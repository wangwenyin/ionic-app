// LMV v6.0.2
//
// Copyright 2018 Autodesk, Inc.
// All rights reserved.
// 
// This computer source code and related instructions and comments are the
// unpublished confidential and proprietary information of Autodesk, Inc.
// and are protected under Federal copyright and state trade secret law.
// They may not be disclosed to, copied or used by any third party without
// the prior written consent of Autodesk, Inc.
// 
// Autodesk Forge Viewer Usage Limitations:
// 
// The Autodesk Forge viewer can only be used to view files generated by
// Autodesk Forge services. The Autodesk Forge Viewer JavaScript must be
// delivered from an Autodesk hosted URL.
var LMV =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var _MainWorker = __webpack_require__(1);

	//Web worker dispatcher function -- received a message
	//from the main thread and calls the appropriate handler
	self.addEventListener('message', function (e) {

	    var loadContext = e.data;
	    loadContext.worker = self;

	    _MainWorker.workerMain.dispatch(loadContext);

	}, false);


	self.raiseError = function (code, msg, args) {
	    self.postMessage({ "error": { "code": code, "msg": msg, "args": args } });
	};

	// Shared by all workers to output debug message on console of main thread.
	function debug(msg) {
	    self.postMessage({ debug: 1, message: msg });
	}

	self.debug = debug;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.workerMain = exports.WorkerMain = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _Xhr = __webpack_require__(2);
	var _endpoints = __webpack_require__(5);function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

	WorkerMain = exports.WorkerMain = function () {

	    function WorkerMain() {_classCallCheck(this, WorkerMain);
	        this._workers = {};
	    }_createClass(WorkerMain, [{ key: "dispatch", value: function dispatch(
	        loadContext) {

	            if (!loadContext.hasOwnProperty('operation')) {
	                return;
	            }

	            //TODO TS:
	            if (loadContext.endpoint)
	            _endpoints.endpoint.setEndpointAndApi(loadContext.endpoint, loadContext.api);


	            var target = this._workers[loadContext.operation];
	            if (!target)
	            return;

	            //Initialize the path that contains the requested
	            //file. It's the root for other relative paths referenced
	            //by the base file.
	            loadContext.basePath = "";
	            if (loadContext.url) {
	                var lastSlash = loadContext.url.lastIndexOf("/");
	                if (lastSlash != -1)
	                loadContext.basePath = loadContext.url.substr(0, lastSlash + 1);
	            }

	            // Create the default failure callback.
	            //
	            loadContext.raiseError = function () {
	                loadContext.worker.raiseError.apply(loadContext.worker, arguments);
	            };
	            loadContext.onFailureCallback = _Xhr.ViewingService.defaultFailureCallback.bind(loadContext);

	            target.doOperation(loadContext);
	        } }, { key: "register", value: function register(

	        operation, worker) {
	            this._workers[operation] = worker;
	        } }, { key: "unregister", value: function unregister(

	        operation) {
	            delete this._workers[operation];
	        } }]);return WorkerMain;}();


	var workerMain = exports.workerMain = new WorkerMain();

	//Add all the worker entry points.
	//Those need to execute in order to register themselves
	//with the web worker operation dispatcher
	__webpack_require__(25).register(workerMain);
	__webpack_require__(45).register(workerMain);
	__webpack_require__(49).register(workerMain);
	__webpack_require__(52).register(workerMain);
	__webpack_require__(56).register(workerMain);
	__webpack_require__(57).register(workerMain);
	__webpack_require__(60).register(workerMain);
	__webpack_require__(64).register(workerMain);
	__webpack_require__(69).register(workerMain);

	//Not used by Fluent
	__webpack_require__(71).register(workerMain);
	__webpack_require__(73).register(workerMain);
	__webpack_require__(76).register(workerMain);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.ViewingService = undefined;exports.







































	pathToURL = pathToURL;exports.




















	textToArrayBuffer = textToArrayBuffer;var _Logger = __webpack_require__(3);var _ErrorCodes = __webpack_require__(6);var _StringUtils = __webpack_require__(7);var _endpoints = __webpack_require__(5);var _compat = __webpack_require__(4);var pako = __webpack_require__(8);var ViewingService = exports.ViewingService = {};var warnedGzip = false; // Simplify Unix style file path. For example, turn '/a/./b/../../c/' into "/c".
	// Required to deal with OSS crappy URNs where there are embedded '..'.
	function simplifyPath(path) {var elements = path.split('/');if (elements.length == 0) return path;var stack = [];for (var index = 0; index < elements.length; ++index) {var c = elements[index];if (c === '.') {continue;}if (c === '..' && stack.length) {stack.pop();} else {stack.push(c);}} // Great, the path commits suicide.
	    if (stack.length == 0) return '';return stack.join("/");} //Maps a relative resource path (like a pack file or texture)
	//to an absolute URL (possibly signed).
	function pathToURL(path) {if (path.indexOf("://") !== -1 || path.indexOf("urn:") === 0) {return path;}if (typeof window === "undefined") return path;var rootRelPath = window.location.pathname; //chop off the index.html part
	    var lastSlash = rootRelPath.lastIndexOf("/");rootRelPath = rootRelPath.substr(0, lastSlash + 1);var absPath = window.location.protocol + "//" + window.location.host + rootRelPath + path;return absPath;}ViewingService.simplifyPath = simplifyPath;function textToArrayBuffer(textBuffer, startOffset) {var len = textBuffer.length - startOffset;var arrayBuffer = new ArrayBuffer(len);var ui8a = new Uint8Array(arrayBuffer, 0);for (var i = 0, j = startOffset; i < len; i++, j++) {ui8a[i] = textBuffer.charCodeAt(j) & 0xff;}return ui8a;
	}


	ViewingService.OSS_PREFIX = "urn:adsk.objects:os.object:";

	/**
	                                                            * Construct full URL given a potentially partial viewing service "urn:" prefixed resource
	                                                            * @returns {string}
	                                                            */
	ViewingService.generateUrl = function (baseUrl, api, path) {

	    path = path || "";

	    //NODE
	    if ((0, _compat.isNodeJS)() && !isRemotePath(baseUrl, path)) {
	        return path;
	    }

	    path = simplifyPath(path);

	    //V2 only accepts URL encoded paths
	    var urnidx = path.indexOf("urn:");
	    var qidx = path.indexOf("?");
	    if (urnidx != -1) {
	        if (qidx !== -1) {
	            //TODO: not sure this will happen, queryParams are normally
	            //passed in separately in the options object
	            path = path.slice(0, urnidx) + encodeURIComponent(path.slice(urnidx, qidx)) + path.slice(qidx);
	        } else {
	            path = path.slice(0, urnidx) + encodeURIComponent(path.slice(urnidx));
	        }
	    } else {
	        path = encodeURI(path);
	    }

	    //Check if it's a viewing service item path
	    //Public/static content will not have the urn: prefix.
	    //So URL construction is a no-op
	    if (!api || decodeURIComponent(path).indexOf('urn:') !== 0) {
	        if (isRemotePath(null, path))
	        return path;else

	        return baseUrl + path;
	    }

	    //Remove "urn:" prefix when getting URN-based stuff (manifests and thumbnails)
	    if (api !== 'items') {
	        path = path.substr(6);
	    }

	    switch (api) {
	        case "items":return _endpoints.endpoint.getItemApi(baseUrl, path);
	        case "bubbles":return _endpoints.endpoint.getManifestApi(baseUrl, path);
	        case "thumbnails":return _endpoints.endpoint.getThumbnailApi(baseUrl, path);}

	};

	function isRemotePath(baseUrl, path) {
	    if (path.indexOf("file://") !== -1)
	    return false;
	    if (path.indexOf("://") !== -1)
	    return true;
	    if (baseUrl)
	    return true;
	}


	//Conditional GET request implementation for node vs. browser
	if ((0, _compat.isNodeJS)()) {

	    (function () {

	        var fs = __webpack_require__(24);
	        var zlib = __webpack_require__(24);
	        var https = __webpack_require__(24);
	        var http = __webpack_require__(24);
	        var urllib = __webpack_require__(24);

	        var forgeAgent = new https.Agent({ maxSockets: 10 });

	        function loadLocalFile(url, onSuccess, onFailure, options) {

	            if (url.indexOf("file://") === 0)
	            url = url.substr(7);

	            function postProcess(data) {
	                if (options.responseType === "json") {
	                    try {
	                        return JSON.parse(data.toString("utf8"));
	                    } catch (e) {
	                        onFailure(e);
	                    }
	                }
	                return data;
	            }

	            //Always use async on Node
	            fs.readFile(url, function (error, data) {
	                if (error) {
	                    onFailure(0, 0, { httpStatusText: error, url: url });
	                } else {
	                    if (data[0] === 31 && data[1] === 139) {
	                        zlib.gunzip(data, null, function (error, data) {
	                            if (error)
	                            onFailure(0, 0, { httpStatusText: error, url: url });else
	                            {
	                                data = postProcess(data);
	                                if (options.ondata)
	                                options.ondata(data);
	                                onSuccess(data);
	                            }
	                        });
	                    } else {
	                        data = postProcess(data);
	                        if (options.ondata)
	                        options.ondata(data);
	                        onSuccess(data);
	                    }
	                }
	            });
	        }

	        function needsGunzip(res, pathname) {

	            if (res.headers['content-encoding'] === 'gzip')
	            return true;

	            //These SVF related files come pre-gzipped
	            //regardless of content-encoding header

	            if (pathname.endsWith(".json.gz"))
	            return true;

	            if (pathname.endsWith("FragmentList.pack"))
	            return true;

	            if (pathname.endsWith("LightList.bin"))
	            return true;

	            if (pathname.endsWith("CameraList.bin"))
	            return true;

	            if (pathname.endsWith("CameraDefinitions.bin"))
	            return true;

	            if (pathname.endsWith("LightDefinitions.bin"))
	            return true;

	            return false;
	        }


	        /**
	           *  Performs a GET/HEAD request to Viewing Service. (Node.js specific implementation)
	           *
	           * @param {string} viewingServiceBaseUrl - The base url for the viewing service.
	           * @param {string} api - The api to call in the viewing service.
	           *  @param {string} url - The url for the request.
	           *  @param {function} onSuccess - A function that takes a single parameter that represents the response
	           *                                returned if the request is successful.
	           *  @param {function} onFailure - A function that takes an integer status code, and a string status, which together represent
	           *                                the response returned if the request is unsuccessful, and a third data argument, which
	           *                                has more information about the failure.  The data is a dictionary that minimally includes
	           *                                the url, and an exception if one was raised.
	           *  @param {Object=} [options] - A dictionary of options that can include:
	           *                               headers - A dictionary representing the additional headers to add.
	           *                               queryParams - A string representing the query parameters
	           *                               responseType - A string representing the response type for this request.
	           *                               {boolean} [encodeUrn] - when true, encodes the document urn if found.
	           *                               {boolean} [noBody] - when true, will perform a HEAD request
	           */
	        ViewingService.rawGet = function (viewingServiceBaseUrl, api, url, onSuccess, onFailure, options) {

	            options = options || {};

	            url = ViewingService.generateUrl(viewingServiceBaseUrl, api, url);

	            if (!isRemotePath(viewingServiceBaseUrl, url)) {
	                loadLocalFile(url, onSuccess, onFailure, options);
	                return;
	            }

	            if (options.queryParams) {
	                var concatSymbol = url.indexOf('?') === -1 ? '?' : '&';
	                url = url + concatSymbol + options.queryParams;
	            }

	            var parsed = urllib.parse(url);

	            var req = {
	                host: parsed.hostname,
	                port: parsed.port,
	                method: options.method || "GET",
	                path: parsed.path,
	                headers: {},
	                retryCount: 0 };


	            //Don't overload derivative service with requests
	            if (req.host.endsWith(".api.autodesk.com") && (
	            req.path.startsWith("/derivativeservice") || req.path.startsWith("/modelderivative"))) {
	                req.agent = forgeAgent;
	            }

	            if (options.headers) {
	                for (var p in options.headers) {
	                    req.headers[p] = options.headers[p];
	                }
	            }

	            if (!req.headers['accept-encoding']) {
	                req.headers['accept-encoding'] = 'gzip, deflate';
	            }

	            if (options.range) {
	                req.headers["Range"] = "bytes=" + options.range.min + "-" + options.range.max;
	            }

	            //Undo hack used to make streaming receive work on browser XHR -- the hack
	            //involves processing the response as text, so responseType is set to "".
	            if (options.ondata || options.onprogress) {
	                options.responseType = "arraybuffer";
	            }


	            var request = (parsed.protocol === "https:" ? https : http).request(req, function (res) {

	                var hasError = !(res.statusCode >= 200 && res.statusCode < 400);

	                //Pipe through gunzip if needed
	                var stream = res;
	                if (!hasError && needsGunzip(res, parsed.pathname) && !options.skipDecompress) {
	                    stream = res.pipe(zlib.createGunzip());
	                }

	                //Decode as UTF8 string if needed
	                if (options.responseType === "json" || options.responseType === "text" || !options.responseType)
	                stream.setEncoding('utf8');

	                var chunks = [];
	                var receiveBuffer;
	                stream.on('data', function (chunk) {

	                    //The onprogress callback is special in that it
	                    //want us to accumulate the data as we receive it, and it only looks at it.
	                    if (options.onprogress) {
	                        if (!receiveBuffer)
	                        receiveBuffer = chunk;else

	                        receiveBuffer = Buffer.concat([receiveBuffer, chunk]);

	                        options.onprogress(receiveBuffer);
	                        return;
	                    } else {
	                        chunks.push(chunk);
	                    }

	                    if (options.ondata) {
	                        options.ondata(chunk);
	                    }

	                });

	                stream.on('end', function () {

	                    if (res.statusCode >= 200 && res.statusCode < 400) {

	                        if (options.responseType === "json") {
	                            var jsobj = JSON.parse(chunks.join(''));
	                            onSuccess(jsobj);
	                            return;
	                        }

	                        if (options.responseType === "text" || options.responseType === "") {
	                            var str = chunks.join('');
	                            onSuccess(str);
	                            return;
	                        }

	                        var buf = options.onprogress ? receiveBuffer : Buffer.concat(chunks);

	                        if (!options.skipDecompress && buf[0] === 31 && buf[1] === 139) {

	                            _Logger.logger.warn("An LMV resource (" + url + ") was double compressed, or Content-Encoding header missing");

	                            try {
	                                buf = zlib.gunzipSync(buf);
	                            } catch (err) {
	                                onFailure(_ErrorCodes.ErrorCodes.BAD_DATA,
	                                "Malformed data received when requesting file",
	                                { "url": url, "exception": err.toString(), "stack": err.stack });
	                            }
	                        }

	                        onSuccess(buf);

	                    } else {

	                        if (onFailure)
	                        onFailure(res.statusCode, res.statusMessage, { url: url });

	                    }
	                });

	            });

	            request.on("error", function (error) {
	                if (onFailure)
	                onFailure(error.code, error.message, { url: url });
	            });

	            if (options.postData) {
	                request.write(options.postData);
	            }

	            request.end();

	        };

	    })();

	} else {

	    /**
	         *  Performs a GET/HEAD request to Viewing Service.
	         *
	         * @param {string} viewingServiceBaseUrl - The base url for the viewing service.
	         * @param {string} api - The api to call in the viewing service.
	         *  @param {string} url - The url for the request.
	         *  @param {function} onSuccess - A function that takes a single parameter that represents the response
	         *                                returned if the request is successful.
	         *  @param {function} onFailure - A function that takes an integer status code, and a string status, which together represent
	         *                                the response returned if the request is unsuccessful, and a third data argument, which
	         *                                has more information about the failure.  The data is a dictionary that minimally includes
	         *                                the url, and an exception if one was raised.
	         *  @param {Object=} [options] - A dictionary of options that can include:
	         *                               headers - A dictionary representing the additional headers to add.
	         *                               queryParams - A string representing the query parameters
	         *                               responseType - A string representing the response type for this request.
	         *                               {boolean} [encodeUrn] - when true, encodes the document urn if found.
	         *                               {boolean} [noBody] - when true, will perform a HEAD request
	         */
	    ViewingService.rawGet = function (viewingServiceBaseUrl, api, url, onSuccess, onFailure, options) {

	        options = options || {};

	        url = ViewingService.generateUrl(viewingServiceBaseUrl, api, url);

	        if (options.queryParams) {
	            var concatSymbol = url.indexOf('?') === -1 ? '?' : '&';
	            url = url + concatSymbol + options.queryParams;
	        }

	        var request = new XMLHttpRequest();

	        function onError(e) {
	            if (onFailure)
	            onFailure(request.status, request.statusText, { url: url });
	        }

	        function fixJsonResponse(response) {
	            if (options.responseType === "json") {
	                try {
	                    if (response instanceof Uint8Array) {
	                        //This should only happen in the node.js case so we can do toString
	                        //instead of using the LMV utf8 converter.
	                        return (0, _StringUtils.blobToJson)(response);
	                    } else if (typeof response === "string") {
	                        return JSON.parse(response);
	                    }
	                } catch (e) {}
	            }
	            return response;
	        }

	        function onLoad(e) {
	            if (request.status === 200 || request.status === 206) {

	                if (request.response &&
	                request.response instanceof ArrayBuffer) {
	                    var rawbuf = new Uint8Array(request.response);
	                    // It's possible that if the Content-Encoding header is set,
	                    // the browser unzips the file by itself, so let's check if it did.
	                    // Return raw buffer if skip decompress is true
	                    if (!options.skipDecompress && rawbuf[0] === 31 && rawbuf[1] === 139) {
	                        if (!warnedGzip) {
	                            warnedGzip = true;
	                            _Logger.logger.warn("An LMV resource (" + url + ") was not uncompressed by the browser. This hurts performance. Check the Content-Encoding header returned by the server and check whether you're getting double-compressed streams. The warning prints only once but it's likely the problem affects multiple resources.");
	                        }
	                        try {
	                            rawbuf = pako.ungzip(rawbuf);
	                        } catch (err) {
	                            onFailure(_ErrorCodes.ErrorCodes.BAD_DATA,
	                            "Malformed data received when requesting file",
	                            { "url": url, "exception": err.toString(), "stack": err.stack });
	                        }
	                    }

	                    onSuccess && onSuccess(fixJsonResponse(rawbuf));
	                } else
	                {
	                    var res = request.response;
	                    if (!res && (!options.responseType || options.responseType === "text"))
	                    res = request.responseText;

	                    onSuccess && onSuccess(fixJsonResponse(res));
	                }
	            } else
	            {
	                onError(e);
	            }
	        }

	        try {

	            var isAsync = options.hasOwnProperty('asynchronous') ? options.asynchronous : true;
	            request.open(options.method || (options.noBody ? 'HEAD' : 'GET'), url, isAsync);

	            if (options.hasOwnProperty('responseType')) {
	                request.responseType = options.responseType;
	            }

	            request.withCredentials = true;
	            if (options.hasOwnProperty("withCredentials"))
	            request.withCredentials = options.withCredentials;

	            if (options.range) {
	                request.setRequestHeader("Range", "bytes=" + options.range.min + "-" + options.range.max);
	            }

	            if (options.headers) {
	                for (var header in options.headers) {
	                    request.setRequestHeader(header, options.headers[header]);

	                    // Disable withCredentials if header is Authorization type
	                    // NOTE: using withCredentials attaches cookie data to request
	                    if (header.toLocaleLowerCase() === "authorization") {
	                        request.withCredentials = false;
	                    }
	                }
	            }

	            if (isAsync) {
	                request.onload = onLoad;
	                request.onerror = onError;
	                request.ontimeout = onError;

	                if (options.ondata || options.onprogress) {

	                    //Set up incremental progress notification
	                    //if needed. We have to do some magic in order
	                    //to get the received data progressively.
	                    //https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
	                    request.overrideMimeType('text/plain; charset=x-user-defined');
	                    options._dlProgress = {
	                        streamOffset: 0 };


	                    request.onreadystatechange = function () {

	                        if (request.readyState > 2 && request.status === 200) {

	                            if (options.ondata) {

	                                var textBuffer = request.responseText;

	                                // No new data coming in.
	                                if (options._dlProgress.streamOffset >= textBuffer.length)
	                                return;

	                                var arrayBuffer = textToArrayBuffer(textBuffer, options._dlProgress.streamOffset);

	                                options._dlProgress.streamOffset = textBuffer.length;

	                                options.ondata(arrayBuffer);

	                            } else if (options.onprogress) {

	                                options.onprogress(request.responseText);
	                            }
	                        }
	                    };
	                }
	            }

	            request.send(options.postData);

	            if (!isAsync) {
	                onLoad();
	            }
	        }
	        catch (e) {
	            onFailure(request.status, request.statusText, { url: url, exception: e });
	        }
	    };

	} //rawGet conditionsl implementation

	// Create the default failure callback.
	//
	ViewingService.defaultFailureCallback = function (httpStatus, httpStatusText, data) {
	    if (httpStatus == 403) {
	        this.raiseError(
	        _ErrorCodes.ErrorCodes.NETWORK_ACCESS_DENIED,
	        "Access denied to remote resource",
	        { "url": data.url, "httpStatus": httpStatus, "httpStatusText": httpStatusText });
	    } else
	    if (httpStatus == 404) {
	        this.raiseError(
	        _ErrorCodes.ErrorCodes.NETWORK_FILE_NOT_FOUND,
	        "Remote resource not found",
	        { "url": data.url, "httpStatus": httpStatus, "httpStatusText": httpStatusText });
	    } else
	    if (httpStatus >= 500 && httpStatus < 600) {
	        this.raiseError(
	        _ErrorCodes.ErrorCodes.NETWORK_SERVER_ERROR,
	        "Server error when accessing resource",
	        { "url": data.url, "httpStatus": httpStatus, "httpStatusText": httpStatusText });
	    } else
	    if (data.exception) {
	        this.raiseError(
	        _ErrorCodes.ErrorCodes.NETWORK_FAILURE,
	        "Network failure",
	        { "url": data.url, "exception": data.exception.toString(), "stack": data.exception.stack });
	    } else
	    {
	        this.raiseError(
	        _ErrorCodes.ErrorCodes.NETWORK_UNHANDLED_RESPONSE_CODE,
	        "Unhandled response code from server",
	        { "url": data.url, "httpStatus": httpStatus, "httpStatusText": httpStatusText, data: data });
	    }
	};



	function copyOptions(loadContext, options) {

	    //Those are the usual defaults when called from the LMV worker
	    if (!options.hasOwnProperty("asynchronous"))
	    options.asynchronous = true;else
	    if (!options.asynchronous)
	    _Logger.logger.warn("LMV: Sync XHR used. Performance warning.");

	    if (!options.hasOwnProperty("responseType"))
	    options.responseType = "arraybuffer";

	    //Add options junk we got from the main thread context

	    if (!options.hasOwnProperty("withCredentials"))
	    options.withCredentials = !!loadContext.auth;

	    options.headers = loadContext.headers;
	    options.queryParams = loadContext.queryParams;
	    options.endpoint = loadContext.endpoint;
	}

	//Utility function called from the web worker to set up the options for a get request,
	//then calling ViewingService.get internally
	ViewingService.getItem = function (loadContext, url, onSuccess, onFailure, options) {

	    options = options || {};

	    copyOptions(loadContext, options);

	    ViewingService.rawGet(loadContext.endpoint, 'items', url, onSuccess, onFailure, options);

	};

	//Utility function called from the web worker to set up the options for a get request,
	//then calling ViewingService.get internally
	ViewingService.getManifest = function (loadContext, url, onSuccess, onFailure, options) {

	    options = options || {};

	    if (!options.hasOwnProperty("responseType"))
	    options.responseType = "json";

	    copyOptions(loadContext, options);

	    ViewingService.rawGet(loadContext.endpoint, 'bubbles', url, onSuccess, onFailure, options);

	};

	//Utility function called from the web worker to set up the options for a get request,
	//then calling ViewingService.get internally
	ViewingService.getThumbnail = function (loadContext, url, onSuccess, onFailure, options) {

	    options = options || {};

	    copyOptions(loadContext, options);

	    var queryParams = options.queryParams || '';
	    var missingElements = [];
	    if (queryParams.indexOf('guid=') === -1) {
	        missingElements.push("guid=" + encodeURIComponent(options.guid));
	    }
	    if (queryParams.indexOf('role=') === -1) {
	        var role = options.role || "rendered";
	        missingElements.push("role=" + role);
	    }
	    if (queryParams.indexOf('width=') === -1) {
	        var sz = options.size || 400;
	        missingElements.push("width=" + sz);
	    }
	    if (queryParams.indexOf('height=') === -1) {
	        var sz = options.size || 400;
	        missingElements.push("height=" + sz);
	    }
	    if (queryParams.indexOf('acmsession=') === -1 && options.acmsession) {
	        missingElements.push("acmsession=" + options.acmsession);
	    }
	    var thumbQueryParams = missingElements.join('&');

	    if (options.queryParams) {
	        options.queryParams = options.queryParams + '&' + thumbQueryParams;
	    } else {
	        options.queryParams = thumbQueryParams;
	    }

	    ViewingService.rawGet(loadContext.endpoint, 'thumbnails', url, onSuccess, onFailure, options);
	};


	ViewingService.getACMSession = function (endpoint, acmProperties, onSuccess, onFailure) {

	    var acmHeaders = {};
	    var token;

	    for (var key in acmProperties) {

	        if (key === "oauth2AccessToken")
	        token = acmProperties[key];else

	        if (key.indexOf("x-ads-acm") !== -1)
	        acmHeaders[key] = acmProperties[key];
	    }

	    // The value of this can be anything. Required for some arcane reasons.
	    acmHeaders.application = "autodesk";

	    var xhr = new XMLHttpRequest();
	    xhr.open("POST", endpoint + '/oss-ext/v2/acmsessions', true);
	    xhr.setRequestHeader("Content-Type", "application/json");
	    xhr.setRequestHeader("Authorization", "Bearer " + token);
	    xhr.responseType = "json";

	    xhr.onload = function () {
	        if (xhr.status === 200 && xhr.response) {
	            // If the response is a string (e.g. from IE), need to parse it to an object first
	            var response = typeof xhr.response === 'string' ? JSON.parse(xhr.response) : xhr.response;

	            if (response && response.acmsession) {
	                onSuccess(response.acmsession);
	            } else
	            {
	                onFailure(xhr.status, "Can't get acm session from response.");
	            }

	        } else {
	            onFailure(xhr.status);
	        }
	    };

	    xhr.onerror = onFailure;
	    xhr.ontimeout = onFailure;
	    xhr.send(JSON.stringify(acmHeaders));

	    // "application" header is only required for OSS end point, and should not be passed
	    // with normal requests because this header is not in allowed header sets of APIGEE.
	    delete acmHeaders.application;

	};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.logger = exports.LogLevels = undefined;exports.





























	Logger = Logger;exports.






























































































































































































































	setLogger = setLogger;var _compat = __webpack_require__(4);var _endpoints = __webpack_require__(5);var global = (0, _compat.getGlobal)(); /**
	                                                                                                                                                           * Logging levels. Higher number means more verbose logs,
	                                                                                                                                                           * for example, with level 3, `info`, `warn`, or `error`
	                                                                                                                                                           * logs will show up in the console but `debug` and `log` won't.
	                                                                                                                                                           *
	                                                                                                                                                           * Semantics of specific levels:
	                                                                                                                                                           *  - debug: low-level debugging logs
	                                                                                                                                                           *  - log: common, higher-level debugging logs
	                                                                                                                                                           *  - info: helpful runtime information (even for stag/prod environments)
	                                                                                                                                                           *  - warn: potentially problematic situations; handled exceptions
	                                                                                                                                                           *  - error: definitely problematic situations; unhandled exceptions
	                                                                                                                                                           * @readonly
	                                                                                                                                                           * @enum {number}
	                                                                                                                                                           */var LogLevels = exports.LogLevels = { DEBUG: 5, LOG: 4, INFO: 3, WARNING: 2, ERROR: 1, NONE: 0 };function Logger() {this.adp = null;this.runtimeStats = {};this.level = -1;this.setLevel(LogLevels.ERROR);}Logger.prototype.initialize = function (options) {if (options.eventCallback) this.callback = options.eventCallback;this.sessionId = options.sessionId;if (!this.sessionId) {var now = Date.now() + "";this.sessionId = parseFloat((Math.random() * 10000 | 0) + "" + now.substring(4));} // Initialize log level is passed in
	    var logLevel = options.logLevel || options.loglevel; // typo-support
	    if (typeof logLevel === 'number' && this.level !== logLevel) {this.setLevel(logLevel);}this.environmentInfo = { touch: (0, _compat.isTouchDevice)(), env: (0, _endpoints.getEnv)(), referer: getReferer(), version: global.LMV_VIEWER_VERSION, patch: global.LMV_VIEWER_PATCH, build_type: global.LMV_BUILD_TYPE }; //Kick off with a viewer start event
	    var startEvent = { category: "viewer_start", touch: this.environmentInfo.touch, env: this.environmentInfo.env, referer: this.environmentInfo.referer, version: this.environmentInfo.version, patch: this.environmentInfo.patch, build_type: this.environmentInfo.build_type };this.track(startEvent);var _this = this;this.interval = setInterval(function () {_this.reportRuntimeStats();}, 60000);};Logger.prototype.shutdown = function () {clearInterval(this.interval);this.interval = undefined;};Logger.prototype.track = function (entry) {this.updateRuntimeStats(entry);if ((0, _endpoints.isOffline)() || !this.sessionId) {return;}entry.timestamp = Date.now();entry.sessionId = this.sessionId;var sent = this.logToADP(entry);if (this.callback) {this.callback(entry, { adp: sent });}};Logger.prototype.logToADP = function (entry) {if (!this.adp) {return false;} // Map & log legacy events to ADP
	    // TODO: move away from the legacy naming and avoid the awkward switch below
	    var evType = '';var opType = '';switch (entry.category) {case 'tool_changed':case 'pref_changed':evType = 'CLICK_OPERATION';opType = entry.category + '/' + entry.name;break;case 'screen_mode':evType = 'CLICK_OPERATION';opType = 'pref_changed/' + entry.category;break;case 'metadata_load_stats':evType = 'DOCUMENT_START';opType = 'stats';entry.full_url = getReferer();break;case 'model_load_stats':evType = 'DOCUMENT_FULL';opType = 'stats';break;case 'tool_used':evType = 'BACKGROUND_CALL';opType = entry.category + '/' + entry.name;break;case 'settingOptionsStatus':evType = 'BACKGROUND_CALL';opType = entry.category + '/' + entry.list;break;case 'node_selected':case 'search_node':evType = 'CLICK_OPERATION';opType = entry.category + '/' + entry.name;break;case 'loaded_extensions':evType = 'BACKGROUND_CALL';opType = entry.category;break;case 'error':evType = 'BACKGROUND_CALL';opType = 'error';break;}if (!evType) return false;this.adp.trackEvent(evType, { operation: { id: entry.sessionId, type: opType, stage: '', status: 'C', meta: entry } });return true;};Logger.prototype.updateRuntimeStats = function (entry) {if (entry.hasOwnProperty('aggregate')) {switch (entry.aggregate) {case 'count':if (this.runtimeStats[entry.name] > 0) {this.runtimeStats[entry.name]++;} else {this.runtimeStats[entry.name] = 1;}this.runtimeStats._nonempty = true;break;case 'last':this.runtimeStats[entry.name] = entry.value;this.runtimeStats._nonempty = true;break;default:this.warn('unknown log aggregate type');}}};Logger.prototype.reportRuntimeStats = function () {if (this.runtimeStats._nonempty) {delete this.runtimeStats._nonempty;if (this.adp) {this.adp.trackEvent('BACKGROUND_CALL', { operation: { id: this.sessionId, type: 'stats', stage: '', status: 'C', meta: this.runtimeStats } });}this.runtimeStats.category = 'misc_stats';this.track(this.runtimeStats);this.runtimeStats = {};}};Logger.prototype.setLevel = function (level) {if (this.level === level) return;this.level = level;var nullFn = function nullFn() {};var avpl = LogLevels;var self = this;var reportError = function reportError() {if (self.callback) {var msg = Array.prototype.slice.call(arguments).join(' ');self.callback({ category: 'error', message: msg }, { adp: false });}console.error.apply(console, arguments);}; // Bind to console
	    this.debug = level >= avpl.DEBUG ? console.log.bind(console) : nullFn;this.log = level >= avpl.LOG ? console.log.bind(console) : nullFn;this.info = level >= avpl.INFO ? console.info.bind(console) : nullFn;this.warn = level >= avpl.WARNING ? console.warn.bind(console) : nullFn;this.error = level >= avpl.ERROR ? reportError : nullFn;}; /**
	                                                                                                                                                                                                                                                                                                                                                     * @private
	                                                                                                                                                                                                                                                                                                                                                     */function getReferer() {// Wrapping href retrieval due to Fortify complains
	    if (typeof window !== 'undefined') {return encodeURI(window.location.href);}return '';}var logger = exports.logger = new Logger();function setLogger(l) {exports.logger = logger = l;}

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.
	getGlobal = getGlobal;exports.











































































	launchFullscreen = launchFullscreen;exports.












	exitFullscreen = exitFullscreen;exports.












	inFullscreen = inFullscreen;exports.












	fullscreenElement = fullscreenElement;exports.



	isFullscreenAvailable = isFullscreenAvailable;exports.





	getAndroidVersion = getAndroidVersion;exports.






	isTouchDevice = isTouchDevice;exports.











	isIOSDevice = isIOSDevice;exports.




	isAndroidDevice = isAndroidDevice;exports.




	isMobileDevice = isMobileDevice;exports.




	isSafari = isSafari;exports.





	isFirefox = isFirefox;exports.





	isChrome = isChrome;exports.





	isMac = isMac;exports.





	isWindows = isWindows;exports.





	ObjectAssign = ObjectAssign;exports.































	disableDocumentTouchSafari = disableDocumentTouchSafari;exports.













	enableDocumentTouchSafari = enableDocumentTouchSafari;exports.















	touchStartToClick = touchStartToClick;function getGlobal() {return typeof window !== "undefined" && window !== null ? window : typeof self !== "undefined" && self !== null ? self : global;}var isNodeJS = exports.isNodeJS = function isNodeJS() {return typeof navigator === "undefined";};var isBrowser = exports.isBrowser = typeof navigator !== "undefined";var isIE11 = exports.isIE11 = isBrowser && !!navigator.userAgent.match(/Edge|Trident\/7\./); // fix IE events
	if (typeof window !== "undefined" && isIE11) {(function () {function CustomEvent(event, params) {params = params || { bubbles: false, cancelable: false, detail: undefined };var evt = document.createEvent('CustomEvent');evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);return evt;}CustomEvent.prototype = window.CustomEvent.prototype;window.CustomEvent = CustomEvent;})();} // IE does not implement ArrayBuffer slice. Handy!
	if (!ArrayBuffer.prototype.slice) {ArrayBuffer.prototype.slice = function (start, end) {// Normalize start/end values
	        if (!end || end > this.byteLength) {end = this.byteLength;} else if (end < 0) {end = this.byteLength + end;if (end < 0) end = 0;}if (start < 0) {start = this.byteLength + start;if (start < 0) start = 0;}if (end <= start) {return new ArrayBuffer();} // Bytewise copy- this will not be fast, but what choice do we have?
	        var len = end - start;var view = new Uint8Array(this, start, len);var out = new Uint8Array(len);for (var i = 0; i < len; i++) {out[i] = view[i];}return out.buffer;};} // IE doesn't implement Math.log2
	(function () {Math.log2 = Math.log2 || function (x) {return Math.log(x) / Math.LN2;};})(); //The BlobBuilder object
	if (typeof window !== "undefined") window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder; // Launch full screen on the given element with the available method
	function launchFullscreen(element, options) {if (element.requestFullscreen) {element.requestFullscreen(options);} else if (element.mozRequestFullScreen) {element.mozRequestFullScreen(options);} else if (element.webkitRequestFullscreen) {element.webkitRequestFullscreen(options);} else if (element.msRequestFullscreen) {element.msRequestFullscreen(options);}}; // Exit full screen with the available method
	function exitFullscreen() {if (document.exitFullscreen) {document.exitFullscreen();} else if (document.mozCancelFullScreen) {document.mozCancelFullScreen();} else if (document.webkitExitFullscreen) {document.webkitExitFullscreen();} else if (document.msExitFullscreen) {document.msExitFullscreen();}}; // Determines if the browser is in full screen
	function inFullscreen() {// Special case for Ms-Edge that has webkitIsFullScreen with correct value
	    // and fullscreenEnabled with wrong value (thanks MS)
	    if ("webkitIsFullScreen" in document) return !!document.webkitIsFullScreen;if ("fullscreenElement" in document) return !!document.fullscreenElement;if ("mozFullScreenElement" in document) return !!document.mozFullScreenElement;if ("msFullscreenElement" in document) return !!document.msFullscreenElement;return !!document.querySelector(".viewer-fill-browser"); // Fallback for iPad
	};function fullscreenElement() {return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;};function isFullscreenAvailable(element) {return element.requestFullscreen || element.mozRequestFullScreen || element.webkitRequestFullscreen || element.msRequestFullscreen;}; // Get the version of the android device through user agent.
	// Return the version string of android device, e.g. 4.4, 5.0...
	function getAndroidVersion(ua) {ua = ua || navigator.userAgent;var match = ua.match(/Android\s([0-9\.]*)/);return match ? match[1] : false;}; // Determine if this is a touch or notouch device.
	function isTouchDevice() {/*
	                          // Temporarily disable touch support through hammer on Android 5, to debug
	                          // some specific gesture issue with Chromium WebView when loading viewer3D.js.
	                          if (parseInt(getAndroidVersion()) == 5) {
	                              return false;
	                          }
	                          */return typeof window !== 'undefined' && ('ontouchstart' in window || navigator.maxTouchPoints > 0);};function isIOSDevice() {if (!isBrowser) return false;return (/ip(ad|hone|od)/.test(navigator.userAgent.toLowerCase()));}function isAndroidDevice() {if (!isBrowser) return false;return navigator.userAgent.toLowerCase().indexOf('android') !== -1;}function isMobileDevice() {if (!isBrowser) return false;return isIOSDevice() || isAndroidDevice();};function isSafari() {if (!isBrowser) return false;var _ua = navigator.userAgent.toLowerCase();return _ua.indexOf("safari") !== -1 && _ua.indexOf("chrome") === -1;};function isFirefox() {if (!isBrowser) return false;var _ua = navigator.userAgent.toLowerCase();return _ua.indexOf("firefox") !== -1;};function isChrome() {if (!isBrowser) return false;var _ua = navigator.userAgent.toLowerCase();return _ua.indexOf("chrome") !== -1;};function isMac() {if (!isBrowser) return false;var _ua = navigator.userAgent.toLowerCase();return _ua.indexOf("mac os") !== -1;};function isWindows() {if (!isBrowser) return false;var _ua = navigator.userAgent.toLowerCase();return _ua.indexOf("win32") !== -1 || _ua.indexOf("windows") !== -1;};function ObjectAssign(des, src) {for (var key in src) {if (src.hasOwnProperty(key)) des[key] = src[key];}return des;}; // Hack to work around Safari's use of pinch and pan inside the viewer canvas.
	function disableTouchSafari(event) {var xOff = window.hasOwnProperty("pageXOffset") ? window.pageXOffset : document.documentElement.scrollLeft;var yOff = window.hasOwnProperty("pageYOffset") ? window.pageYOffset : document.documentElement.scrollTop; // event.pageX and event.pageY returned undefined through Chrome console device mode
	    var pageX = typeof event.pageX === "undefined" ? event.changedTouches[0].pageX : event.pageX;var pageY = typeof event.pageY === "undefined" ? event.changedTouches[0].pageY : event.pageY; // If we aren't inside the canvas, then allow default propagation of the event
	    var element = document.elementFromPoint(pageX - xOff, pageY - yOff);if (!element || element.nodeName !== 'CANVAS') return true; // If it's a CANVAS, check that it's owned by us
	    if (element.getAttribute('data-viewer-canvas' !== 'true')) return true; // Inside the canvas, prevent the event from propagating to Safari'safely
	    // standard handlers, which will pan and zoom the page.
	    event.preventDefault();return false;}; // Hack to work around Safari's use of pinch and pan inside the viewer canvas.
	function disableDocumentTouchSafari() {if (isMobileDevice() && isSafari()) {// Safari mobile disable default touch handling inside viewer canvas
	        // Use capture to make sure Safari doesn't capture the touches and prevent
	        // us from disabling them.
	        document.documentElement.addEventListener('touchstart', disableTouchSafari, true);document.documentElement.addEventListener('touchmove', disableTouchSafari, true);document.documentElement.addEventListener('touchcanceled', disableTouchSafari, true);document.documentElement.addEventListener('touchend', disableTouchSafari, true);}}; // Hack to work around Safari's use of pinch and pan inside the viewer canvas.
	// This method is not being invoked explicitly.
	function enableDocumentTouchSafari() {if (isMobileDevice() && isSafari()) {// Safari mobile disable default touch handling inside viewer canvas
	        // Use capture to make sure Safari doesn't capture the touches and prevent
	        // us from disabling them.
	        document.documentElement.removeEventListener('touchstart', disableTouchSafari, true);document.documentElement.removeEventListener('touchmove', disableTouchSafari, true);document.documentElement.removeEventListener('touchcanceled', disableTouchSafari, true);document.documentElement.removeEventListener('touchend', disableTouchSafari, true);}}; // Convert touchstart event to click to remove the delay between the touch and
	// the click event which is sent after touchstart with about 300ms deley.
	// Should be used in UI elements on touch devices.
	function touchStartToClick(e) {// Buttons that activate fullscreen are a special case. The HTML5 fullscreen spec
	    // requires the original user gesture signal to avoid a security issue.  See LMV-2396 and LMV-2326
	    if (e.target.className.indexOf("fullscreen") > -1 || e.target.className.indexOf("webvr") > -1) return;e.preventDefault(); // Stops the firing of delayed click event.
	    e.stopPropagation();e.target.click(); // Maps to immediate click.
	}; //Safari doesn't have the Performance object
	//We only need the now() function, so that's easy to emulate.
	(function () {var global = getGlobal();if (!global.performance) global.performance = Date;})(); // Polyfill for IE and Safari
	// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
	Number.isInteger = Number.isInteger || function (value) {return typeof value === "number" && isFinite(value) && Math.floor(value) === value;}; // Polyfill for IE
	String.prototype.repeat = String.prototype.repeat || function (count) {if (count < 1) return '';var result = '',pattern = this.valueOf();while (count > 1) {if (count & 1) result += pattern;count >>= 1, pattern += pattern;}return result + pattern;}; // Polyfill for IE
	// It doesn't support negative values for start and end; it complicates the code using this function.
	if (!Array.prototype.fill) {Object.defineProperty(Array.prototype, "fill", { enumerable: false, value: function value(_value, start, end) {start = start === undefined ? 0 : start;end = end === undefined ? this.length : end;for (var i = start; i < end; ++i) {this[i] = _value;}} });} // Polyfill for IE
	Int32Array.prototype.lastIndexOf = Int32Array.prototype.lastIndexOf || function (searchElement, fromIndex) {
	    return Array.prototype.lastIndexOf.call(this, searchElement, fromIndex);
	};

	// Polyfill for IE
	// It doesn't support negative values for start and end; it complicates the code using this function.
	if (!Array.prototype.find) {
	    Object.defineProperty(Array.prototype, "find", {
	        enumerable: false,
	        value: function value(callback, _this) {
	            var len = this.length;
	            for (var i = 0; i < len; ++i) {
	                var item = this[i];
	                if (callback.call(_this, item, i, this))
	                return item;
	            }
	            return undefined;
	        } });

	}

	// Polyfill for IE
	if (typeof Object.assign != 'function') {
	    // Must be writable: true, enumerable: false, configurable: true
	    Object.defineProperty(Object, "assign", {
	        value: function assign(target, varArgs) {// .length of function is 2
	            'use strict';
	            if (target == null) {// TypeError if undefined or null
	                throw new TypeError('Cannot convert undefined or null to object');
	            }

	            var to = Object(target);

	            for (var index = 1; index < arguments.length; index++) {
	                var nextSource = arguments[index];

	                if (nextSource != null) {// Skip over if undefined or null
	                    for (var nextKey in nextSource) {
	                        // Avoid bugs when hasOwnProperty is shadowed
	                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
	                            to[nextKey] = nextSource[nextKey];
	                        }
	                    }
	                }
	            }
	            return to;
	        },
	        writable: true,
	        configurable: true });

	}

	// Polyfill for IE
	if (typeof window !== "undefined" && isIE11 && !HTMLCanvasElement.prototype.toBlob) {
	    Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
	        value: function value(callback, type, quality) {
	            var canvas = this;
	            setTimeout(function () {

	                var binStr = atob(canvas.toDataURL(type, quality).split(',')[1]),
	                len = binStr.length,
	                arr = new Uint8Array(len);

	                for (var i = 0; i < len; i++) {
	                    arr[i] = binStr.charCodeAt(i);
	                }

	                callback(new Blob([arr], { type: type || 'image/png' }));

	            });
	        } });

	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.initLoadContext = exports.endpoint = undefined;exports.












































































































































































































































	getEnv = getEnv;exports.


	setEnv = setEnv;exports.






	isOffline = isOffline;exports.


	setOffline = setOffline;exports.






	setOfflineResourcePrefix = setOfflineResourcePrefix;exports.


	getOfflineResourcePrefix = getOfflineResourcePrefix;var _compat = __webpack_require__(4);var endp = {};var CDN_ROOT = null;endp.ENDPOINT_API_DERIVATIVE_SERVICE_V2 = 'derivativeV2';endp.ENDPOINT_API_MODEL_DERIVATIVE_V2 = 'modelDerivativeV2'; // Forge
	endp.ENDPOINT_API_FLUENT = 'fluent';var _apis_data = { derivativeV2: { baseURL: '/derivativeservice/v2', itemURL: '/derivativeservice/v2/derivatives/:derivativeurn', manifestURL: '/derivativeservice/v2/manifest/:urn', thumbnailsURL: '/derivativeservice/v2/thumbnails/:urn' }, derivativeV2_EU: { baseURL: '/derivativeservice/v2/regions/eu', itemURL: '/derivativeservice/v2/regions/eu/derivatives/:derivativeurn', manifestURL: '/derivativeservice/v2/regions/eu/manifest/:urn', thumbnailsURL: '/derivativeservice/v2/regions/eu/thumbnails/:urn' }, modelDerivativeV2: { baseURL: '/modelderivative/v2/', itemURL: '/modelderivative/v2/designdata/:urn/manifest/:derivativeurn', manifestURL: '/modelderivative/v2/designdata/:urn/manifest', thumbnailsURL: '/modelderivative/v2/designdata/:urn/thumbnail' }, fluent: { baseURL: '/modeldata', itemURL: '/modeldata/file/:derivativeurn', manifestURL: '/modeldata/manifest/:urn', thumbnailsURL: '/derivativeservice/v2/thumbnails/:urn', cdnURL: '/cdn', cdnWS: '/cdnws', cdnRedirectURL: '/cdnurl' } };var _endpoint = '';var _api = endp.ENDPOINT_API_DERIVATIVE_SERVICE_V2;var _useCredentials = false;endp.HTTP_REQUEST_HEADERS = {}; /**
	ets the endpoint and api to be used to create REST API request strings.
	param {string} endpoint
	param {string} [api] - Possible values are derivativeV2, modelDerivativeV2
	endp.setEndpointAndApi = function (endpoint, api) {_endpoint = endpoint;if (api) {_api = api;}}; /**
	eturns the endpoint plus the api used to create REST API request strings.
	xample: "developer.api.autodesk.com/modelderivative/v2"
	returns {string}
	endp.getEndpointAndApi = function () {return _endpoint + _apis_data[_api].baseURL;}; /**
	eturns the endpoint used to create REST API request strings.
	xamples: "developer.api.autodesk.com"
	returns {string}
	endp.getApiEndpoint = function () {return _endpoint;}; /**
	private
	returns {string}
	endp.getApiFlavor = function () {return _api;}; /**
	eturns the default shared resource CDN location.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * For best performance (and to not overload our servers), this should
	be replaced by a direct CloudFront url during initialization, by
	calling the cdnRedirectUrl and looking at the result.
	endp.getCdnUrl = function () {return CDN_ROOT || (_endpoint ? _endpoint + _apis_data[_api].cdnURL : undefined);};endp.getCdnWebSocketEndpoint = function () {return _endpoint + (_apis_data[_api].cdnWS || '');};endp.setCdnUrl = function (url) {CDN_ROOT = url;};endp.getCdnRedirectUrl = function () {var redirect = _apis_data[_api].cdnRedirectURL;if (!redirect) return null;return _endpoint + redirect;}; /**
	eturns a REST API request strings to be used to get the manifest of the provided urn.
	xample: "developer.api.autodesk.com/modelderivative/v2/designdata/:urn/manifest"
	param {string | null} endpoint - When provided is used instead of the globally set endpoint.
	param {string} urn
	param {string} api - When provided is used instead of the globally set API flavor
	returns {string}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */endp.getManifestApi = function (endpoint, urn, api) {var url = endpoint || _endpoint;api = api || _api;url += _apis_data[api].manifestURL; // If urn is not provided we return same string that before for backward compatibility.
	    urn = urn || '';url = url.replace(':urn', urn);return url;}; /**
	                                                                  * Returns a REST API request strings to be used to get a derivative urn.
	                                                                  * Example: "developer.api.autodesk.com/modelderivative/v2/designdata/:urn/manifest/:derivativeUrn"
	                                                                  * @param {string | null} endpoint - When provided is used instead of the globally set API endpoint.
	                                                                  * @param {string} derivativeUrn
	                                                                  * @param {string} api - When provided is used instead of the globally set API flavor
	                                                                  * @returns {string}
	                                                                  */endp.getItemApi = function (endpoint, derivativeUrn, api) {var theApi = api || _api;var itemApi = (endpoint || _endpoint) + _apis_data[theApi].itemURL; // If urn is not provided we return same string that before for backward compatibility.
	    derivativeUrn = derivativeUrn || '';var decodedUrn = decodeURIComponent(derivativeUrn); // Extract svf urn from item urn, needed when using model derivative.
	    if (itemApi.indexOf(':urn') !== -1) {var parts = decodedUrn.split('/');var urn = parts[0] || '';urn = urn.split(':');urn = urn[urn.length - 1] || '';itemApi = itemApi.replace(':urn', urn);}if (theApi === endp.ENDPOINT_API_MODEL_DERIVATIVE_V2) {derivativeUrn = encodeURIComponent(decodedUrn);}itemApi = itemApi.replace(':derivativeurn', derivativeUrn);return itemApi;}; /**
	                                                                                                                                                                                                                                                                                                                                                                                      * Returns a REST API request strings to be used to get the thumbnail for a specific urn.
	                                                                                                                                                                                                                                                                                                                                                                                      * Example: "developer.api.autodesk.com/modelderivative/v2/designdata/:urn/thumbnail"
	                                                                                                                                                                                                                                                                                                                                                                                      * @param {string | null} endpoint - When provided is used instead of the globally set endpoint.
	                                                                                                                                                                                                                                                                                                                                                                                      * @param {string} urn
	                                                                                                                                                                                                                                                                                                                                                                                      * @param {string} api - When provided is used instead of the globally set API flavor
	                                                                                                                                                                                                                                                                                                                                                                                      * @returns {string}
	                                                                                                                                                                                                                                                                                                                                                                                      */endp.getThumbnailApi = function (endpoint, urn, api) {var thumbnailApi = (endpoint || _endpoint) + _apis_data[api || _api].thumbnailsURL;return thumbnailApi.replace(':urn', urn || '');};endp.getUseCredentials = function () {return _useCredentials;};endp.pathRequiresCredentials = function (path) {var isUrn = path.indexOf('://') === -1;var isForgeOrProxy = path.indexOf(this.getEndpointAndApi()) === 0;var isFluent = path.indexOf(_endpoint) === 0; // Fluent may proxy DS or MD, too.
	    var requiresCreds = isUrn || isForgeOrProxy || isFluent;return requiresCreds;};endp.getDomainParam = function () {return this.getUseCredentials() && !(0, _compat.isNodeJS)() ? "domain=" + encodeURIComponent(window.location.origin) : "";};endp.setUseCredentials = function (useCredentials) {_useCredentials = useCredentials;};endp.initLoadContext = function (inputObj) {inputObj = inputObj || {};inputObj.auth = this.getUseCredentials();if (!inputObj.endpoint) inputObj.endpoint = this.getApiEndpoint();if (!inputObj.api) inputObj.api = this.getApiFlavor();if (!inputObj.headers) inputObj.headers = {};for (var p in this.HTTP_REQUEST_HEADERS) {inputObj.headers[p] = this.HTTP_REQUEST_HEADERS[p];} //This is done to avoid CORS errors on content served from proxy or browser cache
	    //The cache will respond with a previously received response, but the Access-Control-Allow-Origin
	    //response header might not match the current Origin header (e.g. localhost vs. developer.api.autodesk.com)
	    //which will cause a CORS error on the second request for the same resource.
	    var domainParam = this.getDomainParam();if (domainParam) {if (inputObj.queryParams) {inputObj.queryParams += "&" + domainParam;} else {inputObj.queryParams = domainParam;}} //shared geometry/material storage
	    inputObj.otg_cdn = CDN_ROOT || this.getCdnUrl();inputObj.otg_ws = this.getCdnWebSocketEndpoint();return inputObj;}; //TODO: Globals that need a better place
	var _env; //formerly avp.env
	function getEnv() {return _env;}function setEnv(env) {_env = env;} // Set viewer in offline mode if set to true. In offline mode, viewer would ignore all URNs in bubble JSON
	// and assume the viewables are laid out in local file system path relative to the bubble.json.
	var _offline = false;function isOffline() {return _offline;}function setOffline(offline) {_offline = offline;} // Offline resource prefix specified by viewer consumer (e.g. IOS web view). Used as prefix to concatenate with
	// each resource relative path to form the absolute path of each resource.
	var _offlineResourcePrefix = "";function setOfflineResourcePrefix(prefix) {_offlineResourcePrefix = prefix;}function getOfflineResourcePrefix() {return _offlineResourcePrefix;}var endpoint = exports.endpoint = endp; //For backwards compatibility until all code is converted to use
	//the function from the endpoint instance.
	var initLoadContext = exports.initLoadContext = endp.initLoadContext.bind(endp);

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.

























































	errorCodeString = errorCodeString;exports.



	getErrorCode = getErrorCode; /**
	                              * Error code constants
	                              *
	                              * These constants will be used in `onErrorCallback` functions.
	                              *
	                              * @enum {number}
	                              * @readonly
	                              * @category Core
	                              */var ErrorCodes = exports.ErrorCodes = { /** An unknown failure has occurred. */UNKNOWN_FAILURE: 1, /** Bad data (corrupted or malformed) was encountered. */BAD_DATA: 2, /** A network failure was encountered. */NETWORK_FAILURE: 3, /** Access was denied to a network resource (HTTP 403) */NETWORK_ACCESS_DENIED: 4, /** A network resource could not be found (HTTP 404) */NETWORK_FILE_NOT_FOUND: 5, /** A server error was returned when accessing a network resource (HTTP 5xx) */NETWORK_SERVER_ERROR: 6, /** An unhandled response code was returned when accessing a network resource (HTTP 'everything else') */NETWORK_UNHANDLED_RESPONSE_CODE: 7, /** Browser error = webGL is not supported by the current browser */BROWSER_WEBGL_NOT_SUPPORTED: 8, /** There is nothing viewable in the fetched document */BAD_DATA_NO_VIEWABLE_CONTENT: 9, /** Browser error = webGL is supported, but not enabled */BROWSER_WEBGL_DISABLED: 10, /** There is no geometry in loaded model */BAD_DATA_MODEL_IS_EMPTY: 11, /** Collaboration server error */RTC_ERROR: 12, /** The extension of the loaded file is not supported */UNSUPORTED_FILE_EXTENSION: 13, /** Viewer error: wrong or forbidden usage of the viewer */VIEWER_INTERNAL_ERROR: 14, /** WebGL error while loading a model, typically due to IE11 limitations */WEBGL_LOST_CONTEXT: 15 };function errorCodeString(errorCode) {return "ErrorCode:" + errorCode + ".";}function getErrorCode(networkStatus) {if (networkStatus === 403 || networkStatus === 401) {return ErrorCodes.NETWORK_ACCESS_DENIED;} else if (networkStatus === 404) {return ErrorCodes.NETWORK_FILE_NOT_FOUND;
	    } else
	    if (networkStatus >= 500)
	    {
	        return ErrorCodes.NETWORK_SERVER_ERROR;
	    }
	    return ErrorCodes.NETWORK_UNHANDLED_RESPONSE_CODE;
	}

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	"use strict";

	// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt
	/* utf.js - UTF-8 <=> UTF-16 convertion
	 *
	 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
	 * Version: 1.0
	 * LastModified: Dec 25 1999
	 * This library is free.  You can redistribute it and/or modify it.
	 */Object.defineProperty(exports, "__esModule", { value: true });exports.
	utf8BlobToStr = utf8BlobToStr;exports.





































	safeUtf8BlobToStr = safeUtf8BlobToStr;exports.










































	utf16to8 = utf16to8;exports.









































	utf8ArrayToString = utf8ArrayToString;exports.




















	blobToJson = blobToJson;exports.








	subBlobToJson = subBlobToJson;exports.
























	subBlobToJsonInt = subBlobToJsonInt;exports.


























	parseIntArray = parseIntArray;exports.





















































	findValueOffsets = findValueOffsets;exports.



















































	getHexString = getHexString;function utf8BlobToStr(array, start, length) {var out, i, len, c;var char2, char3;out = '';len = length;i = 0;while (i < len) {c = array[start + i++];switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7: // 0xxxxxxx
	                out += String.fromCharCode(c);break;case 12:case 13: // 110x xxxx   10xx xxxx
	                char2 = array[start + i++];out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);break;case 14: // 1110 xxxx  10xx xxxx  10xx xxxx
	                char2 = array[start + i++];char3 = array[start + i++];out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);break;}}return out;} /**
	                                                                                                                                                                                     * Safe version of utf8BlobToStr(), where Arrays are used to concatenate chars via join().
	                                                                                                                                                                                     * This function exists because string::operator += crashes on Chrome with large inputs.
	                                                                                                                                                                                     */function safeUtf8BlobToStr(array, start, length) {var out, i, len, c, outArray, count;var char2, char3;var STR_CVT_LIMIT = 32 * 1024;out = '';outArray = [];len = length;count = 0;i = 0;while (i < len) {c = array[start + i++];switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7: // 0xxxxxxx
	                outArray.push(String.fromCharCode(c));break;case 12:case 13: // 110x xxxx   10xx xxxx
	                char2 = array[start + i++];outArray.push(String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F));break;case 14: // 1110 xxxx  10xx xxxx  10xx xxxx
	                char2 = array[start + i++];char3 = array[start + i++];outArray.push(String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0));break;}if (++count >= STR_CVT_LIMIT || i >= len) {out += outArray.join("");outArray.length = 0;count = 0;}}return out;}function utf16to8(str, array, start) {var i, len, c;var j = start || 0;len = str.length;if (array) {for (i = 0; i < len; i++) {c = str.charCodeAt(i);if (c >= 0x0001 && c <= 0x007F) {array[j++] = c;} else if (c > 0x07FF) {array[j++] = 0xE0 | c >> 12 & 0x0F;array[j++] = 0x80 | c >> 6 & 0x3F;array[j++] = 0x80 | c >> 0 & 0x3F;} else {array[j++] = 0xC0 | c >> 6 & 0x1F;array[j++] = 0x80 | c >> 0 & 0x3F;}}} else {//If no output buffer is passed in, estimate the required
	        //buffer size and return that.
	        for (i = 0; i < len; i++) {c = str.charCodeAt(i);if (c >= 0x0001 && c <= 0x007F) {j++;} else if (c > 0x07FF) {j += 3;} else {j += 2;}}}return j - (start || 0);}var USE_MANUAL_UTF8 = true;var SAFE_UTF_LENGTH = 1024 * 1024;function utf8ArrayToString(array, start, length) {if (start === undefined) start = 0;if (length === undefined) length = array.length;if (USE_MANUAL_UTF8) {if (length > SAFE_UTF_LENGTH) {return safeUtf8BlobToStr(array, start, length);}return utf8BlobToStr(array, start, length);} else {var encodedString = "";for (var i = start, iEnd = start + length; i < iEnd; i++) {encodedString += String.fromCharCode(array[i]);}return decodeURIComponent(escape(encodedString));}};function blobToJson(blob) {var decodedString = utf8ArrayToString(blob, 0, blob.length);return JSON.parse(decodedString);}; //parses a piece of json from a given blob (representing an array of json values)
	//up to the next comma+newline combo (i.e. array delimiter).
	function subBlobToJson(blob, startIndex) {if (startIndex === undefined) {return '';}var i = startIndex;while (i < blob.length - 1) {var c = blob[i];if (c == 44 && (blob[i + 1] == 10 || blob[i + 1] == 13)) //comma followed by newline?
	            break;if (c == 10 || c == 13) //detect newline or line feed
	            break;i++;}var decodedString = utf8ArrayToString(blob, startIndex, i - startIndex);try {return JSON.parse(decodedString);} catch (e) {console.error("Error parsing property blob to JSON : " + decodedString);return decodedString;}};function subBlobToJsonInt(blob, startIndex) {var val = 0;var i = startIndex; //Check for integers that were serialized as strings.
	    //This should not happen, ever, but hey, it does.
	    if (blob[i] == 34) i++;while (i < blob.length - 1) {var c = blob[i];if (c == 44 && (blob[i + 1] == 10 || blob[i + 1] == 13)) break;if (c == 10 || c == 13 || c == 34) break;if (c >= 48 && c <= 57) val = val * 10 + (c - 48);i++;}return val;}; //Simple integer array parse -- expects the array in property database
	//format, where the array is packed with possibly newline separator,
	//but no other white space. Does not do extensive error checking
	function parseIntArray(blob, wantSentinel) {//find out how many items we have
	    var count = 0;for (var i = 0, iEnd = blob.length; i < iEnd; i++) {if (blob[i] == 44) //44 = ','
	            count++;}count++; //last item has no comma after it
	    var items = new Uint32Array(count + (wantSentinel ? 1 : 0));i = 0;var end = blob.length;while (blob[i] != 91 && i < end) {//91 = '['
	        i++;}if (i == blob.length) return null;i++;var seenDigit = false;count = 0;var curInt = 0;while (i < end) {var c = blob[i];if (c >= 48 && c <= 57) {//digit
	            curInt = 10 * curInt + (c - 48);seenDigit = true;} else if (c == 44 || c == 93) {//',' or ']'
	            if (seenDigit) {items[count++] = curInt;seenDigit = false;curInt = 0;}} else {seenDigit = false; //most likely a newline (the only other thing we have in our arrays
	            curInt = 0;}i++;}return items;}; //Scans an array of json values (strings, integers, doubles) and finds the
	//offset of each value in the array, so that we can later pick off that
	//specific value, without parsing the whole (potentially huge) json array up front.
	//This expects the input blob to be in the form serialized by the property database
	//C++ component -- one value per line. A more sophisticated parser would be needed
	//in case the format changes and this assumption is not true anymore.
	function findValueOffsets(blob) {//first, count how many items we have
	    var count = 0;var end = blob.length - 1;for (var i = 0; i < end; i++) {if (blob[i] == 44 && (blob[i + 1] == 10 || blob[i + 1] == 13)) // ',' + newline is the item delimiter
	            count++;}if (!count) return null;count++; //one for the last item
	    var items = new Uint32Array(count);i = 0;count = 0; //find opening [
	    while (blob[i] != 91 && i < end) {//91 = '['
	        i++;}i++;items[count++] = i;var seenEol = false;while (i < end) {if (blob[i] == 10 || blob[i] == 13) seenEol = true;else if (seenEol) {seenEol = false;items[count++] = i;}i++;}return items;};var TO_HEX = new Array(256);for (var i = 0; i < 256; i++) {var s = i.toString(16);if (s.length === 1) s = "0" + s;TO_HEX[i] = s;}function getHexString(buffer, offset, length) {var res = [];for (var i = 0; i < length; i++) {var b = buffer[offset + i];var s = TO_HEX[b];res.push(s);}return res.join("");}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	// Top level file is just a mixin of submodules & constants
	'use strict';

	var assign    = __webpack_require__(9).assign;

	var deflate   = __webpack_require__(10);
	var inflate   = __webpack_require__(18);
	var constants = __webpack_require__(22);

	var pako = {};

	assign(pako, deflate, inflate, constants);

	module.exports = pako;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	'use strict';


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');

	function _has(obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key);
	}

	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (_has(source, p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var zlib_deflate = __webpack_require__(11);
	var utils        = __webpack_require__(9);
	var strings      = __webpack_require__(16);
	var msg          = __webpack_require__(15);
	var ZStream      = __webpack_require__(17);

	var toString = Object.prototype.toString;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/

	var Z_NO_FLUSH      = 0;
	var Z_FINISH        = 4;

	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_SYNC_FLUSH    = 2;

	var Z_DEFAULT_COMPRESSION = -1;

	var Z_DEFAULT_STRATEGY    = 0;

	var Z_DEFLATED  = 8;

	/* ===========================================================================*/


	/**
	 * class Deflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[deflate]],
	 * [[deflateRaw]] and [[gzip]].
	 **/

	/* internal
	 * Deflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Deflate#onData]] not overridden.
	 **/

	/**
	 * Deflate.result -> Uint8Array|Array
	 *
	 * Compressed result, generated by default [[Deflate#onData]]
	 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
	 * push a chunk with explicit flush (call [[Deflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Deflate.err -> Number
	 *
	 * Error code after deflate finished. 0 (Z_OK) on success.
	 * You will not need it in real life, because deflate errors
	 * are possible only on wrong options or bad `onData` / `onEnd`
	 * custom handlers.
	 **/

	/**
	 * Deflate.msg -> String
	 *
	 * Error message, if [[Deflate.err]] != 0
	 **/


	/**
	 * new Deflate(options)
	 * - options (Object): zlib deflate options.
	 *
	 * Creates new deflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `level`
	 * - `windowBits`
	 * - `memLevel`
	 * - `strategy`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw deflate
	 * - `gzip` (Boolean) - create gzip wrapper
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 * - `header` (Object) - custom header for gzip
	 *   - `text` (Boolean) - true if compressed data believed to be text
	 *   - `time` (Number) - modification time, unix timestamp
	 *   - `os` (Number) - operation system code
	 *   - `extra` (Array) - array of bytes with extra data (max 65536)
	 *   - `name` (String) - file name (binary string)
	 *   - `comment` (String) - comment (binary string)
	 *   - `hcrc` (Boolean) - true if header crc should be added
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var deflate = new pako.Deflate({ level: 3});
	 *
	 * deflate.push(chunk1, false);
	 * deflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (deflate.err) { throw new Error(deflate.err); }
	 *
	 * console.log(deflate.result);
	 * ```
	 **/
	function Deflate(options) {
	  if (!(this instanceof Deflate)) return new Deflate(options);

	  this.options = utils.assign({
	    level: Z_DEFAULT_COMPRESSION,
	    method: Z_DEFLATED,
	    chunkSize: 16384,
	    windowBits: 15,
	    memLevel: 8,
	    strategy: Z_DEFAULT_STRATEGY,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  if (opt.raw && (opt.windowBits > 0)) {
	    opt.windowBits = -opt.windowBits;
	  }

	  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
	    opt.windowBits += 16;
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm = new ZStream();
	  this.strm.avail_out = 0;

	  var status = zlib_deflate.deflateInit2(
	    this.strm,
	    opt.level,
	    opt.method,
	    opt.windowBits,
	    opt.memLevel,
	    opt.strategy
	  );

	  if (status !== Z_OK) {
	    throw new Error(msg[status]);
	  }

	  if (opt.header) {
	    zlib_deflate.deflateSetHeader(this.strm, opt.header);
	  }

	  if (opt.dictionary) {
	    var dict;
	    // Convert data if needed
	    if (typeof opt.dictionary === 'string') {
	      // If we need to compress text, change encoding to utf8.
	      dict = strings.string2buf(opt.dictionary);
	    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
	      dict = new Uint8Array(opt.dictionary);
	    } else {
	      dict = opt.dictionary;
	    }

	    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

	    if (status !== Z_OK) {
	      throw new Error(msg[status]);
	    }

	    this._dict_set = true;
	  }
	}

	/**
	 * Deflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
	 *   converted to utf8 byte sequence.
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
	 *
	 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
	 * new compressed chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the compression context.
	 *
	 * On fail call [[Deflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * array format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Deflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;

	  if (this.ended) { return false; }

	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // If we need to compress text, change encoding to utf8.
	    strm.input = strings.string2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

	    if (status !== Z_STREAM_END && status !== Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
	      if (this.options.to === 'string') {
	        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
	      } else {
	        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	      }
	    }
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

	  // Finalize on the last chunk.
	  if (_mode === Z_FINISH) {
	    status = zlib_deflate.deflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === Z_OK;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === Z_SYNC_FLUSH) {
	    this.onEnd(Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Deflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): output data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Deflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Deflate#onEnd(status) -> Void
	 * - status (Number): deflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called once after you tell deflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Deflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === Z_OK) {
	    if (this.options.to === 'string') {
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * deflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * Compress `data` with deflate algorithm and `options`.
	 *
	 * Supported options are:
	 *
	 * - level
	 * - windowBits
	 * - memLevel
	 * - strategy
	 * - dictionary
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
	 *
	 * console.log(pako.deflate(data));
	 * ```
	 **/
	function deflate(input, options) {
	  var deflator = new Deflate(options);

	  deflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

	  return deflator.result;
	}


	/**
	 * deflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function deflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return deflate(input, options);
	}


	/**
	 * gzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but create gzip wrapper instead of
	 * deflate one.
	 **/
	function gzip(input, options) {
	  options = options || {};
	  options.gzip = true;
	  return deflate(input, options);
	}


	exports.Deflate = Deflate;
	exports.deflate = deflate;
	exports.deflateRaw = deflateRaw;
	exports.gzip = gzip;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var utils   = __webpack_require__(9);
	var trees   = __webpack_require__(12);
	var adler32 = __webpack_require__(13);
	var crc32   = __webpack_require__(14);
	var msg     = __webpack_require__(15);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}


	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  s = strm.state;
	  wrap = s.wrap;

	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR;
	  }

	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
	  }

	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils.Buf8(s.w_size);
	    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	      s.prev[str & s.w_mask] = s.head[s.ins_h];

	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK;
	}


	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var utils = __webpack_require__(9);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;

	/*============================================================================*/


	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES       = 30;
	/* number of distance codes */

	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It isn't worth it to make additional optimizations as in original.
	// Small size is preferable.

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	module.exports = adler32;


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	module.exports = crc32;


/***/ }),
/* 15 */
/***/ (function(module, exports) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	// String encode/decode helpers
	'use strict';


	var utils = __webpack_require__(9);


	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safari
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;

	try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new utils.Buf8(256);
	for (var q = 0; q < 256; q++) {
	  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
	}
	_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


	// convert string to array (typed, when possible)
	exports.string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }

	  // allocate buffer
	  buf = new utils.Buf8(buf_len);

	  // convert
	  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }

	  return buf;
	};

	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // use fallback for big arrays to avoid stack overflow
	  if (len < 65537) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
	    }
	  }

	  var result = '';
	  for (var i = 0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}


	// Convert byte array to binary string
	exports.buf2binstring = function (buf) {
	  return buf2binstring(buf, buf.length);
	};


	// Convert binary string (typed, when possible)
	exports.binstring2buf = function (str) {
	  var buf = new utils.Buf8(str.length);
	  for (var i = 0, len = buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};


	// convert array to string
	exports.buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;

	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len * 2);

	  for (out = 0, i = 0; i < len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }

	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }

	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }

	  return buf2binstring(utf16buf, out);
	};


	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	exports.utf8border = function (buf, max) {
	  var pos;

	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }

	  // go back from last position, until start of sequence found
	  pos = max - 1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

	  // Very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }

	  // If we came to start of buffer - that means buffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }

	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	module.exports = ZStream;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var zlib_inflate = __webpack_require__(19);
	var utils        = __webpack_require__(9);
	var strings      = __webpack_require__(16);
	var c            = __webpack_require__(22);
	var msg          = __webpack_require__(15);
	var ZStream      = __webpack_require__(17);
	var GZheader     = __webpack_require__(23);

	var toString = Object.prototype.toString;

	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/

	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overridden.
	 **/

	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/

	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/


	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	function Inflate(options) {
	  if (!(this instanceof Inflate)) return new Inflate(options);

	  this.options = utils.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }

	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }

	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm   = new ZStream();
	  this.strm.avail_out = 0;

	  var status  = zlib_inflate.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );

	  if (status !== c.Z_OK) {
	    throw new Error(msg[status]);
	  }

	  this.header = new GZheader();

	  zlib_inflate.inflateGetHeader(this.strm, this.header);
	}

	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var dictionary = this.options.dictionary;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;
	  var dict;

	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;

	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }

	    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

	    if (status === c.Z_NEED_DICT && dictionary) {
	      // Convert data if needed
	      if (typeof dictionary === 'string') {
	        dict = strings.string2buf(dictionary);
	      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
	        dict = new Uint8Array(dictionary);
	      } else {
	        dict = dictionary;
	      }

	      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

	    }

	    if (status === c.Z_BUF_ERROR && allowBufError === true) {
	      status = c.Z_OK;
	      allowBufError = false;
	    }

	    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }

	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

	        if (this.options.to === 'string') {

	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);

	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

	          this.onData(utf8str);

	        } else {
	          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }

	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }

	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

	  if (status === c.Z_STREAM_END) {
	    _mode = c.Z_FINISH;
	  }

	  // Finalize on the last chunk.
	  if (_mode === c.Z_FINISH) {
	    status = zlib_inflate.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === c.Z_OK;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === c.Z_SYNC_FLUSH) {
	    this.onEnd(c.Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): output data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === c.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 aligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate(input, options) {
	  var inflator = new Inflate(options);

	  inflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

	  return inflator.result;
	}


	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate(input, options);
	}


	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/


	exports.Inflate = Inflate;
	exports.inflate = inflate;
	exports.inflateRaw = inflateRaw;
	exports.ungzip  = inflate;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var utils         = __webpack_require__(9);
	var adler32       = __webpack_require__(13);
	var crc32         = __webpack_require__(14);
	var inflate_fast  = __webpack_require__(20);
	var inflate_table = __webpack_require__(21);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	      case HEAD:
	        if (state.wrap === 0) {
	          state.mode = TYPEDO;
	          break;
	        }
	        //=== NEEDBITS(16);
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//

	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          state.mode = FLAGS;
	          break;
	        }
	        state.flags = 0;           /* expect zlib header */
	        if (state.head) {
	          state.head.done = false;
	        }
	        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	          strm.msg = 'incorrect header check';
	          state.mode = BAD;
	          break;
	        }
	        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        len = (hold & 0x0f)/*BITS(4)*/ + 8;
	        if (state.wbits === 0) {
	          state.wbits = len;
	        }
	        else if (len > state.wbits) {
	          strm.msg = 'invalid window size';
	          state.mode = BAD;
	          break;
	        }
	        state.dmax = 1 << len;
	        //Tracev((stderr, "inflate:   zlib header ok\n"));
	        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	        state.mode = hold & 0x200 ? DICTID : TYPE;
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        break;
	      case FLAGS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.flags = hold;
	        if ((state.flags & 0xff) !== Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        if (state.flags & 0xe000) {
	          strm.msg = 'unknown header flags set';
	          state.mode = BAD;
	          break;
	        }
	        if (state.head) {
	          state.head.text = ((hold >> 8) & 1);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = TIME;
	        /* falls through */
	      case TIME:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.time = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC4(state.check, hold)
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          hbuf[2] = (hold >>> 16) & 0xff;
	          hbuf[3] = (hold >>> 24) & 0xff;
	          state.check = crc32(state.check, hbuf, 4, 0);
	          //===
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = OS;
	        /* falls through */
	      case OS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.xflags = (hold & 0xff);
	          state.head.os = (hold >> 8);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = EXLEN;
	        /* falls through */
	      case EXLEN:
	        if (state.flags & 0x0400) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length = hold;
	          if (state.head) {
	            state.head.extra_len = hold;
	          }
	          if (state.flags & 0x0200) {
	            //=== CRC2(state.check, hold);
	            hbuf[0] = hold & 0xff;
	            hbuf[1] = (hold >>> 8) & 0xff;
	            state.check = crc32(state.check, hbuf, 2, 0);
	            //===//
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        else if (state.head) {
	          state.head.extra = null/*Z_NULL*/;
	        }
	        state.mode = EXTRA;
	        /* falls through */
	      case EXTRA:
	        if (state.flags & 0x0400) {
	          copy = state.length;
	          if (copy > have) { copy = have; }
	          if (copy) {
	            if (state.head) {
	              len = state.head.extra_len - state.length;
	              if (!state.head.extra) {
	                // Use untyped array for more convenient processing later
	                state.head.extra = new Array(state.head.extra_len);
	              }
	              utils.arraySet(
	                state.head.extra,
	                input,
	                next,
	                // extra field is limited to 65536 bytes
	                // - no need for additional size check
	                copy,
	                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	                len
	              );
	              //zmemcpy(state.head.extra + len, next,
	              //        len + copy > state.head.extra_max ?
	              //        state.head.extra_max - len : copy);
	            }
	            if (state.flags & 0x0200) {
	              state.check = crc32(state.check, input, copy, next);
	            }
	            have -= copy;
	            next += copy;
	            state.length -= copy;
	          }
	          if (state.length) { break inf_leave; }
	        }
	        state.length = 0;
	        state.mode = NAME;
	        /* falls through */
	      case NAME:
	        if (state.flags & 0x0800) {
	          if (have === 0) { break inf_leave; }
	          copy = 0;
	          do {
	            // TODO: 2 or 1 bytes?
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	                (state.length < 65536 /*state.head.name_max*/)) {
	              state.head.name += String.fromCharCode(len);
	            }
	          } while (len && copy < have);

	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) { break inf_leave; }
	        }
	        else if (state.head) {
	          state.head.name = null;
	        }
	        state.length = 0;
	        state.mode = COMMENT;
	        /* falls through */
	      case COMMENT:
	        if (state.flags & 0x1000) {
	          if (have === 0) { break inf_leave; }
	          copy = 0;
	          do {
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	                (state.length < 65536 /*state.head.comm_max*/)) {
	              state.head.comment += String.fromCharCode(len);
	            }
	          } while (len && copy < have);
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) { break inf_leave; }
	        }
	        else if (state.head) {
	          state.head.comment = null;
	        }
	        state.mode = HCRC;
	        /* falls through */
	      case HCRC:
	        if (state.flags & 0x0200) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.check & 0xffff)) {
	            strm.msg = 'header crc mismatch';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        if (state.head) {
	          state.head.hcrc = ((state.flags >> 9) & 1);
	          state.head.done = true;
	        }
	        strm.adler = state.check = 0;
	        state.mode = TYPE;
	        break;
	      case DICTID:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        strm.adler = state.check = zswap32(hold);
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = DICT;
	        /* falls through */
	      case DICT:
	        if (state.havedict === 0) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          return Z_NEED_DICT;
	        }
	        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	        state.mode = TYPE;
	        /* falls through */
	      case TYPE:
	        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case TYPEDO:
	        if (state.last) {
	          //--- BYTEBITS() ---//
	          hold >>>= bits & 7;
	          bits -= bits & 7;
	          //---//
	          state.mode = CHECK;
	          break;
	        }
	        //=== NEEDBITS(3); */
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.last = (hold & 0x01)/*BITS(1)*/;
	        //--- DROPBITS(1) ---//
	        hold >>>= 1;
	        bits -= 1;
	        //---//

	        switch ((hold & 0x03)/*BITS(2)*/) {
	          case 0:                             /* stored block */
	            //Tracev((stderr, "inflate:     stored block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = STORED;
	            break;
	          case 1:                             /* fixed block */
	            fixedtables(state);
	            //Tracev((stderr, "inflate:     fixed codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = LEN_;             /* decode codes */
	            if (flush === Z_TREES) {
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	              break inf_leave;
	            }
	            break;
	          case 2:                             /* dynamic block */
	            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = TABLE;
	            break;
	          case 3:
	            strm.msg = 'invalid block type';
	            state.mode = BAD;
	        }
	        //--- DROPBITS(2) ---//
	        hold >>>= 2;
	        bits -= 2;
	        //---//
	        break;
	      case STORED:
	        //--- BYTEBITS() ---// /* go to byte boundary */
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	          strm.msg = 'invalid stored block lengths';
	          state.mode = BAD;
	          break;
	        }
	        state.length = hold & 0xffff;
	        //Tracev((stderr, "inflate:       stored length %u\n",
	        //        state.length));
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = COPY_;
	        if (flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case COPY_:
	        state.mode = COPY;
	        /* falls through */
	      case COPY:
	        copy = state.length;
	        if (copy) {
	          if (copy > have) { copy = have; }
	          if (copy > left) { copy = left; }
	          if (copy === 0) { break inf_leave; }
	          //--- zmemcpy(put, next, copy); ---
	          utils.arraySet(output, input, next, copy, put);
	          //---//
	          have -= copy;
	          next += copy;
	          left -= copy;
	          put += copy;
	          state.length -= copy;
	          break;
	        }
	        //Tracev((stderr, "inflate:       stored end\n"));
	        state.mode = TYPE;
	        break;
	      case TABLE:
	        //=== NEEDBITS(14); */
	        while (bits < 14) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	        if (state.nlen > 286 || state.ndist > 30) {
	          strm.msg = 'too many length or distance symbols';
	          state.mode = BAD;
	          break;
	        }
	//#endif
	        //Tracev((stderr, "inflate:       table sizes ok\n"));
	        state.have = 0;
	        state.mode = LENLENS;
	        /* falls through */
	      case LENLENS:
	        while (state.have < state.ncode) {
	          //=== NEEDBITS(3);
	          while (bits < 3) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	          //--- DROPBITS(3) ---//
	          hold >>>= 3;
	          bits -= 3;
	          //---//
	        }
	        while (state.have < 19) {
	          state.lens[order[state.have++]] = 0;
	        }
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        //state.next = state.codes;
	        //state.lencode = state.next;
	        // Switch to use dynamic table
	        state.lencode = state.lendyn;
	        state.lenbits = 7;

	        opts = { bits: state.lenbits };
	        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	        state.lenbits = opts.bits;

	        if (ret) {
	          strm.msg = 'invalid code lengths set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, "inflate:       code lengths ok\n"));
	        state.have = 0;
	        state.mode = CODELENS;
	        /* falls through */
	      case CODELENS:
	        while (state.have < state.nlen + state.ndist) {
	          for (;;) {
	            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          if (here_val < 16) {
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            state.lens[state.have++] = here_val;
	          }
	          else {
	            if (here_val === 16) {
	              //=== NEEDBITS(here.bits + 2);
	              n = here_bits + 2;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              if (state.have === 0) {
	                strm.msg = 'invalid bit length repeat';
	                state.mode = BAD;
	                break;
	              }
	              len = state.lens[state.have - 1];
	              copy = 3 + (hold & 0x03);//BITS(2);
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	            }
	            else if (here_val === 17) {
	              //=== NEEDBITS(here.bits + 3);
	              n = here_bits + 3;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 3 + (hold & 0x07);//BITS(3);
	              //--- DROPBITS(3) ---//
	              hold >>>= 3;
	              bits -= 3;
	              //---//
	            }
	            else {
	              //=== NEEDBITS(here.bits + 7);
	              n = here_bits + 7;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 11 + (hold & 0x7f);//BITS(7);
	              //--- DROPBITS(7) ---//
	              hold >>>= 7;
	              bits -= 7;
	              //---//
	            }
	            if (state.have + copy > state.nlen + state.ndist) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            while (copy--) {
	              state.lens[state.have++] = len;
	            }
	          }
	        }

	        /* handle error breaks in while */
	        if (state.mode === BAD) { break; }

	        /* check for end-of-block code (better have one) */
	        if (state.lens[256] === 0) {
	          strm.msg = 'invalid code -- missing end-of-block';
	          state.mode = BAD;
	          break;
	        }

	        /* build code tables -- note: do not change the lenbits or distbits
	           values here (9 and 6) without reading the comments in inftrees.h
	           concerning the ENOUGH constants, which depend on those values */
	        state.lenbits = 9;

	        opts = { bits: state.lenbits };
	        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.lenbits = opts.bits;
	        // state.lencode = state.next;

	        if (ret) {
	          strm.msg = 'invalid literal/lengths set';
	          state.mode = BAD;
	          break;
	        }

	        state.distbits = 6;
	        //state.distcode.copy(state.codes);
	        // Switch to use dynamic table
	        state.distcode = state.distdyn;
	        opts = { bits: state.distbits };
	        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.distbits = opts.bits;
	        // state.distcode = state.next;

	        if (ret) {
	          strm.msg = 'invalid distances set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, 'inflate:       codes ok\n'));
	        state.mode = LEN_;
	        if (flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case LEN_:
	        state.mode = LEN;
	        /* falls through */
	      case LEN:
	        if (have >= 6 && left >= 258) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          inflate_fast(strm, _out);
	          //--- LOAD() ---
	          put = strm.next_out;
	          output = strm.output;
	          left = strm.avail_out;
	          next = strm.next_in;
	          input = strm.input;
	          have = strm.avail_in;
	          hold = state.hold;
	          bits = state.bits;
	          //---

	          if (state.mode === TYPE) {
	            state.back = -1;
	          }
	          break;
	        }
	        state.back = 0;
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if (here_bits <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_op && (here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.lencode[last_val +
	                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        state.length = here_val;
	        if (here_op === 0) {
	          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	          //        "inflate:         literal '%c'\n" :
	          //        "inflate:         literal 0x%02x\n", here.val));
	          state.mode = LIT;
	          break;
	        }
	        if (here_op & 32) {
	          //Tracevv((stderr, "inflate:         end of block\n"));
	          state.back = -1;
	          state.mode = TYPE;
	          break;
	        }
	        if (here_op & 64) {
	          strm.msg = 'invalid literal/length code';
	          state.mode = BAD;
	          break;
	        }
	        state.extra = here_op & 15;
	        state.mode = LENEXT;
	        /* falls through */
	      case LENEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", state.length));
	        state.was = state.length;
	        state.mode = DIST;
	        /* falls through */
	      case DIST:
	        for (;;) {
	          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if ((here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.distcode[last_val +
	                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        if (here_op & 64) {
	          strm.msg = 'invalid distance code';
	          state.mode = BAD;
	          break;
	        }
	        state.offset = here_val;
	        state.extra = (here_op) & 15;
	        state.mode = DISTEXT;
	        /* falls through */
	      case DISTEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	//#ifdef INFLATE_STRICT
	        if (state.offset > state.dmax) {
	          strm.msg = 'invalid distance too far back';
	          state.mode = BAD;
	          break;
	        }
	//#endif
	        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	        state.mode = MATCH;
	        /* falls through */
	      case MATCH:
	        if (left === 0) { break inf_leave; }
	        copy = _out - left;
	        if (state.offset > copy) {         /* copy from window */
	          copy = state.offset - copy;
	          if (copy > state.whave) {
	            if (state.sane) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break;
	            }
	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	          }
	          if (copy > state.wnext) {
	            copy -= state.wnext;
	            from = state.wsize - copy;
	          }
	          else {
	            from = state.wnext - copy;
	          }
	          if (copy > state.length) { copy = state.length; }
	          from_source = state.window;
	        }
	        else {                              /* copy from output */
	          from_source = output;
	          from = put - state.offset;
	          copy = state.length;
	        }
	        if (copy > left) { copy = left; }
	        left -= copy;
	        state.length -= copy;
	        do {
	          output[put++] = from_source[from++];
	        } while (--copy);
	        if (state.length === 0) { state.mode = LEN; }
	        break;
	      case LIT:
	        if (left === 0) { break inf_leave; }
	        output[put++] = state.length;
	        left--;
	        state.mode = LEN;
	        break;
	      case CHECK:
	        if (state.wrap) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            // Use '|' instead of '+' to make sure that result is signed
	            hold |= input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          _out -= left;
	          strm.total_out += _out;
	          state.total += _out;
	          if (_out) {
	            strm.adler = state.check =
	                /*UPDATE(state.check, put - _out, _out);*/
	                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	          }
	          _out = left;
	          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	            strm.msg = 'incorrect data check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   check matches trailer\n"));
	        }
	        state.mode = LENGTH;
	        /* falls through */
	      case LENGTH:
	        if (state.wrap && state.flags) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.total & 0xffffffff)) {
	            strm.msg = 'incorrect length check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   length matches trailer\n"));
	        }
	        state.mode = DONE;
	        /* falls through */
	      case DONE:
	        ret = Z_STREAM_END;
	        break inf_leave;
	      case BAD:
	        ret = Z_DATA_ERROR;
	        break inf_leave;
	      case MEM:
	        return Z_MEM_ERROR;
	      case SYNC:
	        /* falls through */
	      default:
	        return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}

	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var state;
	  var dictid;
	  var ret;

	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }

	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}

	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var utils = __webpack_require__(9);

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }

	  /* process all codes and make table entries */
	  for (;;) {
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ }),
/* 22 */
/***/ (function(module, exports) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	module.exports = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	'use strict';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications

	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //

	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}

	module.exports = GZheader;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.
































































































































































































	register = register;var _Gltf = __webpack_require__(26);var _Package = __webpack_require__(31);var _PackageLess = __webpack_require__(42);var _InputStream = __webpack_require__(33);var _Xhr = __webpack_require__(2);var _ErrorCodes = __webpack_require__(6);function guardFunction(loadContext, func) {try {func();} catch (exc) {loadContext.worker.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "Unhandled exception while loading SVF", { "url": loadContext.url, "exception": exc.toString(), "stack": exc.stack });loadContext.worker.postMessage(null);}}function doLoadSvfContinued(loadContext) {var _this = loadContext.worker;guardFunction(loadContext, function () {var svf = loadContext.svf;function loadDoneCallback(type, meshMessage) {if (type == "svf") {var msg, xfer;var frags = svf.fragments;var transferable = [frags.transforms.buffer, frags.packIds.buffer, frags.entityIndexes.buffer, frags.fragId2dbId.buffer, frags.visibilityFlags.buffer];if (svf.bvh) {// BVH is posted together with svf,
	                    // so can add more buffer to transfer.
	                    xfer = { nodes: svf.bvh.nodes.getRawData(), primitives: svf.bvh.primitives, useLeanNodes: svf.bvh.nodes.bytes_per_node == 32 };transferable.push(xfer.nodes);transferable.push(xfer.primitives.buffer); // Then can safely transfer following buffers from fragments.
	                    transferable.push(frags.boxes.buffer);transferable.push(frags.polygonCounts.buffer);transferable.push(frags.materials.buffer);msg = { "svf": svf, "bvh": xfer, progress: 1.0 };} else {msg = { "svf": svf, progress: 0.8 };}_this.postMessage(msg, transferable);} else if (type == "bvh") {xfer = { nodes: svf.bvh.nodes.getRawData(), primitives: svf.bvh.primitives, useLeanNodes: svf.bvh.nodes.bytes_per_node == 32 };_this.postMessage({ "bvh": xfer, basePath: svf.basePath, progress: 1.0 }, [xfer.nodes, xfer.primitives.buffer]);} else if (type == "mesh") {var transferList = [];if (meshMessage.mesh) transferList.push(meshMessage.mesh.vb.buffer);_this.postMessage(meshMessage, transferList);} else if (type == "done") {_this.postMessage({ progress: 1.0 });} else {_this.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "Failure while loading SVF", { "url": loadContext.url });_this.postMessage(null);}}loadContext.loadDoneCB = loadDoneCallback;svf.loadRemainingSvf(loadContext);});}function doLoadSvf(loadContext) {var _this = loadContext.worker;_this.postMessage({ progress: 0.01 }); //Tell the main thread we are alive
	    var type = "svf";var url = loadContext.url.toLocaleLowerCase();if (url.lastIndexOf(".gltf") === url.length - 5) type = "gltf";if (url.lastIndexOf(".glb") === url.length - 4) type = "glb";function onSuccess(result) {_this.postMessage({ progress: 0.5 }); //rough progress reporting -- can do better
	        guardFunction(loadContext, function () {var svf;var packageConfig = { max_pf_files: loadContext.max_pf_files };if (type === "gltf" || type === "glb") {// result is json
	                svf = new _Gltf.GltfPackage(result);} else {// result is arraybuffer
	                if (loadContext.perfOpt && loadContext.perfOpt.memoryOptimizedSvfLoading) {svf = new _PackageLess.PackageLess(new Uint8Array(result));} else {svf = new _Package.Package(new Uint8Array(result), packageConfig);}}loadContext.svf = svf;svf.loadManifest(loadContext);if (loadContext.interceptManifest) {_this.postMessage({ "manifest": svf.manifest });} else {loadContext.manifest = svf.manifest;doLoadSvfContinued(loadContext);}});}var options = { responseType: type === "gltf" ? "json" : "arraybuffer" };_Xhr.ViewingService.getItem(loadContext, loadContext.url, onSuccess, loadContext.onFailureCallback, options); //Prefetch the first geometry pack (we assume there is one), to mask some latency
	    //We intentionally ignore any errors here.
	    if (type === "svf") {_Xhr.ViewingService.getItem(loadContext, loadContext.basePath + "0.pf", function () {}, function () {}, options);}}function doFetchTopology(loadContext) {var _this = loadContext.worker;_Xhr.ViewingService.getItem(loadContext, loadContext.path, onSuccess, onFailure, { asynchronous: true }); // on success
	    function onSuccess(data) {_this.postMessage({ "status-topology": {} }); // download is complete
	        // This lines below may take a while...
	        var topology = null;try {var jdr = new _InputStream.InputStream(data);var byteLength = data.byteLength;if (0 < byteLength) {topology = JSON.parse(jdr.getString(byteLength));}if (topology) {_this.postMessage({ "fetch-topology": { error: null, topology: topology } }); // parsing is complete
	            } else {onFailure('topology-no-content');}} catch (eee) {onFailure(eee);}} // on-failure
	    function onFailure(err) {_this.postMessage({ "fetch-topology": { error: err, topology: null } }); // something went wrong
	    }}function register(workerMain) {workerMain.register("LOAD_SVF", { doOperation: doLoadSvf });workerMain.register("LOAD_SVF_CONTD", { doOperation: doLoadSvfContinued });workerMain.register("FETCH_TOPOLOGY", { doOperation: doFetchTopology });}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};exports.





























































































	GltfPackage = GltfPackage;var _VbUtils = __webpack_require__(27);var _LmvVector = __webpack_require__(28);var _LmvBox = __webpack_require__(29);var _LmvMatrix = __webpack_require__(30);var _Xhr = __webpack_require__(2); /*
	                                                                                                                                                                                                                                                                                    * base64-arraybuffer
	                                                                                                                                                                                                                                                                                    * https://github.com/niklasvh/base64-arraybuffer
	                                                                                                                                                                                                                                                                                    *
	                                                                                                                                                                                                                                                                                    * Copyright (c) 2012 Niklas von Hertzen
	                                                                                                                                                                                                                                                                                    * Licensed under the MIT license.
	                                                                                                                                                                                                                                                                                    */var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // Use a lookup table to find the index.
	var lookup = new Uint8Array(256);for (var i = 0; i < chars.length; i++) {lookup[chars.charCodeAt(i)] = i;} // currently base64_encode is not used.
	/*
	var base64_encode = function(arraybuffer) {
	  var bytes = new Uint8Array(arraybuffer),
	  i, len = bytes.length, base64 = "";
	   for (i = 0; i < len; i+=3) {
	    base64 += chars[bytes[i] >> 2];
	    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	    base64 += chars[bytes[i + 2] & 63];
	  }
	   if ((len % 3) === 2) {
	    base64 = base64.substring(0, base64.length - 1) + "=";
	  } else if (len % 3 === 1) {
	    base64 = base64.substring(0, base64.length - 2) + "==";
	  }
	   return base64;
	};
	*/var base64_decode = function base64_decode(base64) {var bufferLength = base64.length * 0.75,len = base64.length,i,p = 0,encoded1,encoded2,encoded3,encoded4;if (base64[base64.length - 1] === "=") {bufferLength--;if (base64[base64.length - 2] === "=") {bufferLength--;}}var arraybuffer = new ArrayBuffer(bufferLength),bytes = new Uint8Array(arraybuffer);for (i = 0; i < len; i += 4) {encoded1 = lookup[base64.charCodeAt(i)];encoded2 = lookup[base64.charCodeAt(i + 1)];encoded3 = lookup[base64.charCodeAt(i + 2)];encoded4 = lookup[base64.charCodeAt(i + 3)];bytes[p++] = encoded1 << 2 | encoded2 >> 4;bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;}return arraybuffer;};function blobToJson(blob) {var decodedString;if ((typeof TextDecoder === 'undefined' ? 'undefined' : _typeof(TextDecoder)) !== undefined) {decodedString = new TextDecoder("utf-8").decode(blob);} else {var encodedString = "";for (var i = 0; i < blob.length; i++) {encodedString += String.fromCharCode(blob[i]);}decodedString = decodeURIComponent(escape(encodedString));}return JSON.parse(decodedString);}function GltfPackage(gltfJson) {this.loadedBuffers = {}; //Check for binary glTF (glb)
	    if (gltfJson instanceof Uint8Array) {var header = new Int32Array(gltfJson.buffer, 0, 20);if (header[0] !== 0x46546C67) //['g', 'l', 'T', 'F'] in little endian
	            debug("glb header " + header[0]);var sceneLength = header[3];var sceneBlob = new Uint8Array(gltfJson.buffer, 20, sceneLength); //TODO: this is a bit lame, copies a large part of the ArrayBuffer,
	        //but the geometry parsing logic is made much easier this way, without
	        //having to keep track of a base offset to add when creating buffer views.
	        var binary_glTF = gltfJson.buffer.slice(20 + sceneLength);gltfJson = blobToJson(sceneBlob);this.loadedBuffers["binary_glTF"] = binary_glTF;}this.gltf = gltfJson; //NOTE: We will map the GltfPackage contents to a structure similar
	    //to an SVF package so that the rendering engine and viewer can work with it.
	    this.manifest = null;this.metadata = this.gltf.asset || {}; //metadata json
	    this.metadata.gltf = this.metadata.version || 1;this.materials = this.gltfMaterials = { name: "GLTF Materials",
	        version: "1.0",
	        scene: {
	            "SceneUnit": "m" },

	        materials: {} };
	    //The materials jsons from the GLTF, reindexed

	    this.materialToIndex = {};
	    this.materialList = [];

	    this.geomToIndex = {};
	    this.geomList = [];
	    this.geomsLoaded = 0;

	    this.fragments = {
	        length: 0,
	        numLoaded: 0,
	        boxes: null,
	        transforms: null,
	        materials: null,

	        fragId2dbId: null,
	        entityIndexes: null,
	        mesh2frag: {} };


	    this.geompacks = [];

	    this.instances = [];

	    this.cameras = [];
	    this.lights = [];

	    this.bbox = null; //Overall scene bounds

	    this.animations = null; // animations json

	    this.pendingRequests = 0;

	    this.globalOffset = { x: 0, y: 0, z: 0 };
	    this.bbox = new _LmvBox.LmvBox3();

	    this.nodeToDbId = {};
	    this.nextDbId = 1;
	    this.nextFragId = 0;

	}


	var BASE64_PREFIX = "data:application/octet-stream;base64,";

	//Lists all dependent files, so that their paths can be converted
	//to e.g. signed links by the manifest interceptor before they are loaded.
	GltfPackage.prototype.loadManifest = function (loadContext) {

	    var manifestTemplate = {
	        "name": "LMV Manifest",
	        "toolkitversion": "LMVTK 2.6.4",
	        "manifestversion": 2,
	        "adskID": {
	            "sourceSystem": "",
	            "type": "",
	            "id": "",
	            "version": "" },

	        "assets": [],
	        "typesets": [] };


	    this.manifest = manifestTemplate;

	    var buffers = this.gltf.buffers;

	    for (var bid in buffers) {

	        //Is it the embedded glb buffer? Skip it, it needs no URI remapping.
	        if (bid === "binary_glTF")
	        continue;

	        var buffer = buffers[bid];

	        //Base64 embedded buffers, decode
	        //and store in loaded buffers array.
	        if (buffer.uri.indexOf(BASE64_PREFIX) === 0) {
	            this.loadedBuffers[bid] = base64_decode(buffer.uri.slice(BASE64_PREFIX.length));
	            buffer.uri = "embed://" + bid;
	            continue;
	        }

	        var asset = {
	            id: bid,
	            URI: buffer.uri,
	            uri: buffer.uri,
	            usize: buffer.byteLength,
	            type: buffer.type };


	        this.manifest.assets.push(asset);
	    }

	    var images = this.gltf.images;

	    for (var iid in images) {

	        var image = images[iid];

	        var _asset = {
	            id: iid,
	            URI: image.uri,
	            uri: image.uri,
	            name: image.name,
	            type: "image" //just so we can differentiate it from the geom buffers
	        };

	        this.manifest.assets.push(_asset);
	    }

	    //TODO: Process any other externally referenced assets that we want to support

	};


	GltfPackage.prototype.loadRemainingSvf = function (loadContext) {

	    //In case it was modified by the path interceptor
	    if (loadContext.manifest)
	    this.manifest = loadContext.manifest;

	    //It's more convenient to find assets by their ids
	    //when dealing with gltf.
	    this.manifest.assetMap = {};
	    for (var i = 0; i < this.manifest.assets.length; i++) {
	        var a = this.manifest.assets[i];
	        this.manifest.assetMap[a.id] = a;
	    }

	    this.processMeshesList();
	    this.processMaterialsList();

	    this.deriveInstanceTree();

	    loadContext.loadDoneCB("svf");

	    //Call the callback for any buffers that were embedded in the gltf,
	    //before loading the external ones.
	    for (var b in this.loadedBuffers) {
	        this.loadGeometry(loadContext, b);
	    }

	    this.loadBuffers(loadContext);

	};

	GltfPackage.prototype.loadBuffers = function (loadContext) {

	    //Launch an XHR to load the data from external file
	    var svf = this;

	    var bufList = [];
	    var assets = this.manifest.assets;
	    for (var i = 0; i < assets.length; i++) {
	        if (assets[i].type !== "image")
	        bufList.push(assets[i]);
	    }

	    var currentRequest = -1;

	    function xhrCB(responseData) {

	        if (currentRequest < bufList.length - 1) {
	            var nextBuf = bufList[currentRequest + 1];

	            var options = {
	                responseType: nextBuf.type || 'arraybuffer' };


	            _Xhr.ViewingService.getItem(
	            loadContext,
	            loadContext.basePath + nextBuf.URI,
	            xhrCB,
	            loadContext.onFailureCallback,
	            options);

	        }

	        if (responseData) {
	            var curBuf = bufList[currentRequest];
	            svf.loadedBuffers[curBuf.id] = responseData.buffer; //Get the ArrayBuffer out of the Uint8Array returned by the ViewingService.getItem
	            svf.loadGeometry(loadContext, curBuf.id);
	        }

	        currentRequest++;

	    }

	    xhrCB(null);

	};

	var COMPONENT_TO_BYTES = {
	    "5120": 1, //BYTE
	    "5121": 1, //UNSIGNED_BYTE
	    "5122": 2, //SHORT
	    "5123": 2, //UNSIGNED_SHORT
	    "5124": 4, //INT
	    "5125": 4, //UNSIGNED_INT
	    "5126": 4 //FLOAT
	};

	var TYPE_TO_SIZE = {
	    "SCALAR": 1,
	    "VEC2": 2,
	    "VEC3": 3,
	    "VEC4": 4 };



	var _tmpfbuf = new Float32Array(1);
	var _tmpbbuf = new Uint8Array(_tmpfbuf.buffer);

	function extractFloat(bbuf, offset) {
	    _tmpbbuf[0] = bbuf[offset];
	    _tmpbbuf[1] = bbuf[offset + 1];
	    _tmpbbuf[2] = bbuf[offset + 2];
	    _tmpbbuf[3] = bbuf[offset + 3];
	    return _tmpfbuf[0];
	}

	//Constructs all meshes that use the buffer
	//that was just loaded
	//NOTE: This loader pulls out all attributes for a mesh from a possibly
	//large shared buffer and interleaves them into a per-mesh vertex buffer
	//for each mesh. This fits better with the architecture of the LMV renderer
	//right now. But, in the future, things could be refactored so that the GL
	//buffers are managed separately from the meshes, and the meshes are pointing
	//into larger shared buffers.
	GltfPackage.prototype.loadGeometry = function (loadContext, bufferId) {

	    var buffer = this.gltf.buffers[bufferId];
	    var meshIds = buffer.meshes;
	    var scope = this;

	    function checkIfBufferAvailable(accessorId) {
	        var accessor = scope.gltf.accessors[accessorId];
	        var bvId = accessor.bufferView;
	        if (bvId) {
	            var bufferId = scope.gltf.bufferViews[bvId].buffer;
	            if (bufferId) {
	                return !!scope.loadedBuffers[bufferId];
	            }
	        }
	        return false;
	    }

	    for (var meshIdx = 0; meshIdx < meshIds.length; meshIdx++) {

	        var mesh = this.gltf.meshes[meshIds[meshIdx]];
	        var prims = mesh.primitives;

	        var usePackedNormals = typeof loadContext.packNormals !== "undefined" ? loadContext.packNormals : true;

	        for (var primIdx = 0; primIdx < prims.length; primIdx++) {

	            var prim = prims[primIdx];

	            var mesh = {
	                vblayout: {},
	                vbstride: 0,
	                packedNormals: usePackedNormals };


	            var canLoad = true;
	            if (prim.indices) {
	                canLoad = canLoad && checkIfBufferAvailable(prim.indices);
	                if (canLoad) {
	                    var inds = scope.gltf.accessors[prim.indices];
	                    mesh.triangleCount = inds.count / 3;
	                    var stride = inds.byteStride;
	                    var componentSize = 2;

	                    var bv = scope.gltf.bufferViews[inds.bufferView];
	                    var byteOffset = inds.byteOffset + bv.byteOffset;
	                    var buffer = scope.loadedBuffers[bv.buffer];
	                    var src, dst;

	                    if (inds.componentType === 5123) {
	                        dst = mesh.indices = new Uint16Array(inds.count);
	                        componentSize = 2;
	                        src = new Uint16Array(buffer);
	                    } else
	                    if (inds.componentType === 5125) {
	                        dst = mesh.indices = new Uint32Array(inds.count);
	                        componentSize = 4;
	                        src = new Uint32Array(buffer);
	                    } else
	                        // other unimplemented types
	                        debug("Unimplemented component type for index buffer");

	                    var srcOffset = byteOffset / componentSize;

	                    if (stride === 0)
	                    stride = 1;else

	                    stride /= componentSize;

	                    for (var i = 0; i < inds.count; i++) {
	                        dst[i] = src[srcOffset + i * stride];
	                    }
	                }
	            }

	            var offset = 0;
	            for (var a in prim.attributes) {
	                canLoad = canLoad && checkIfBufferAvailable(prim.attributes[a]);
	                var attr = scope.gltf.accessors[prim.attributes[a]];

	                if (canLoad) {
	                    if (a === "NORMAL") {
	                        mesh.vbstride += usePackedNormals ? 1 : 3;

	                        mesh.vblayout['normal'] = { offset: offset,
	                            itemSize: usePackedNormals ? 2 : 3,
	                            bytesPerItem: usePackedNormals ? 2 : 4,
	                            normalize: usePackedNormals };

	                        offset += usePackedNormals ? 1 : 3;

	                    } else
	                    {
	                        var attrName = a;

	                        if (a === "POSITION") {
	                            attrName = "position";
	                            mesh.vertexCount = attr.count;
	                        } else if (a.indexOf("TEXCOORD") === 0) {
	                            var uvIdx = parseInt(a.split("_")[1]);
	                            attrName = "uv" + (uvIdx || "");
	                        } else if (a.indexOf("COLOR") === 0) {
	                            attrName = "color";
	                        }

	                        var byteSize = COMPONENT_TO_BYTES[attr.componentType] * TYPE_TO_SIZE[attr.type];
	                        mesh.vbstride += byteSize / 4;

	                        mesh.vblayout[attrName] = { offset: offset,
	                            itemSize: TYPE_TO_SIZE[attr.type],
	                            bytesPerItem: COMPONENT_TO_BYTES[attr.componentType],
	                            normalize: false };


	                        offset += byteSize / 4;
	                    }
	                }

	            }

	            //Now that we know how big of a vertex buffer we need, make one, and
	            //go over the attributes again to copy their data from the glTF buffer
	            //into the mesh vertex buffer
	            if (canLoad) {
	                var vbf = mesh.vb = new Float32Array(mesh.vertexCount * mesh.vbstride);
	                //See if we want to pack the normals into two shorts
	                var vbi;
	                if (usePackedNormals)
	                vbi = new Uint16Array(mesh.vb.buffer);

	                for (var a in prim.attributes) {
	                    var attr = scope.gltf.accessors[prim.attributes[a]];
	                    var bv = scope.gltf.bufferViews[attr.bufferView];
	                    var byteOffset = attr.byteOffset + bv.byteOffset;
	                    var rawbuffer = new Uint8Array(scope.loadedBuffers[bv.buffer]);

	                    if (a === "NORMAL") {
	                        var lmvAttr = mesh.vblayout["normal"];

	                        if (attr.count != mesh.vertexCount)
	                        debug("Normals count does not equal vertex count");

	                        //TODO: assumption that they're all floats...
	                        var stride = attr.byteStride !== 0 ? attr.byteStride : bytesPerItem * TYPE_TO_SIZE[attr.type];
	                        var srcIdx = byteOffset;
	                        var offset = lmvAttr.offset;

	                        for (var i = 0; i < mesh.vertexCount; i++, offset += mesh.vbstride) {
	                            var nx = extractFloat(rawbuffer, srcIdx);
	                            var ny = extractFloat(rawbuffer, srcIdx + 4);
	                            var nz = extractFloat(rawbuffer, srcIdx + 8);

	                            if (vbi) {
	                                var pnx = (Math.atan2(ny, nx) / Math.PI + 1.0) * 0.5;
	                                var pny = (nz + 1.0) * 0.5;

	                                vbi[offset * 2] = pnx * 65535 | 0;
	                                vbi[offset * 2 + 1] = pny * 65535 | 0;
	                            } else {
	                                vbf[offset] = nx;
	                                vbf[offset + 1] = ny;
	                                vbf[offset + 2] = nz;
	                            }

	                            srcIdx += stride;
	                        }
	                    } else
	                    {
	                        var attrName = a;

	                        //Map common attribute names to ones used by LMV
	                        if (a === "POSITION") {
	                            attrName = "position";
	                            mesh.vertexCount = attr.count;
	                        } else if (a.indexOf("TEXCOORD") === 0) {
	                            var uvIdx = parseInt(a.split("_")[1]);
	                            attrName = "uv" + (uvIdx || "");
	                        } else if (a.indexOf("COLOR") === 0) {
	                            attrName = "color";
	                        }

	                        var lmvAttr = mesh.vblayout[attrName];

	                        var bytesPerItem = COMPONENT_TO_BYTES[attr.componentType];
	                        var stride = attr.byteStride !== 0 ? attr.byteStride : bytesPerItem * TYPE_TO_SIZE[attr.type];
	                        var src = new Uint8Array(rawbuffer);
	                        var dst = new Uint8Array(vbf.buffer, lmvAttr.offset * 4);
	                        var srcIdx = byteOffset;
	                        var offset = 0;
	                        for (var i = 0; i < mesh.vertexCount; i++) {

	                            for (var j = 0; j < lmvAttr.itemSize * bytesPerItem; j++) {
	                                dst[offset + j] = src[srcIdx + j];
	                            }

	                            offset += mesh.vbstride * bytesPerItem;
	                            srcIdx += stride;
	                        }
	                    }

	                    //If all meshes using this buffer are successfully loaded,
	                    //free its array buffer from memory.
	                    var gltfBuffer = scope.gltf.buffers[bv.buffer];
	                    gltfBuffer.refCount--;
	                    if (gltfBuffer.refCount === 0) {
	                        delete scope.loadedBuffers[bv.buffer];
	                    }
	                }

	                //Mesh is complete.
	                scope.geomsLoaded++;

	                _VbUtils.VBUtils.computeBounds3D(mesh);

	                loadContext.loadDoneCB("mesh", { mesh: mesh,

	                    //Set these so that when SvfLoader adds them together
	                    //it comes up with the IDs we use in the meshToFrag map.
	                    packId: meshIds[meshIdx],
	                    meshIndex: primIdx,

	                    progress: scope.geomsLoaded / scope.geomList.length });
	            }
	        }

	    }

	    buffer.meshes = null;

	};

	//Converts materials to indexed list, for use in
	//the fragment list material indices array
	GltfPackage.prototype.processMaterialsList = function () {

	    var mats = this.gltf.materials;

	    for (var m in mats) {
	        var idx = this.materialList.length;
	        this.materialToIndex[m] = idx;
	        this.gltfMaterials.materials[idx] = mats[m];
	        this.materialList.push(m);
	    }

	};

	GltfPackage.prototype.processMeshesList = function () {

	    var meshes = this.gltf.meshes;
	    var scope = this;

	    function processAccessor(accessorId) {
	        var accessor = scope.gltf.accessors[accessorId];
	        var bvId = accessor.bufferView;
	        if (bvId) {
	            var bufferId = scope.gltf.bufferViews[bvId].buffer;
	            if (bufferId) {
	                var buffer = scope.gltf.buffers[bufferId];

	                //Keep track of how many buffer views are using this buffer.
	                //Once we load all of them, we will free it from memory
	                if (!buffer.refCount)
	                buffer.refCount = 1;else

	                buffer.refCount++;

	                //Keep track of meshes using a buffer. We will load those
	                //in a batch once a buffer file is loaded.
	                if (!buffer.meshes)
	                buffer.meshes = [];

	                if (!addedToBuffer) {
	                    buffer.meshes.push(m);
	                    addedToBuffer = true;
	                }
	            }
	        }
	    }

	    for (var m in meshes) {
	        var mesh = meshes[m];
	        var addedToBuffer = false;
	        for (var k = 0; k < mesh.primitives.length; k++) {
	            var entityId = m + ":" + k;
	            this.geomToIndex[entityId] = this.geomList.length;
	            this.geomList.push(entityId);

	            var prim = mesh.primitives[k];

	            if (prim.indices) {
	                processAccessor(prim.indices);
	            }

	            for (var a in prim.attributes) {
	                processAccessor(prim.attributes[a]);
	            }
	        }
	    }

	    this.numGeoms = this.geomList.length;
	};


	//Pre-traversal of the node hierarchy to count how many fragments we will
	//need in the LMV fragment list
	GltfPackage.prototype.countFragments = function () {

	    var sceneName = this.gltf.scene;
	    var gltfRoot = this.gltf.scenes[sceneName];
	    var gltfNodes = this.gltf.nodes;

	    var numFrags = 0;

	    var scope = this;

	    function traverseNodes(gltfNode) {

	        var meshes = gltfNode.meshes;
	        if (gltfNode.meshes) {
	            for (var j = 0; j < meshes.length; j++) {
	                var prims = scope.gltf.meshes[meshes[j]].primitives;
	                for (var k = 0; k < prims.length; k++) {
	                    numFrags++;
	                }
	            }
	        }

	        var children = gltfNode.children || gltfNode.nodes; //the root scene uses "nodes" instead of "children"
	        if (children) {
	            for (var i = 0; i < children.length; i++) {
	                var gltfChild = gltfNodes[children[i]];
	                traverseNodes(gltfChild);
	            }
	        }
	    }

	    traverseNodes(gltfRoot);

	    this.fragments.length = numFrags;
	    this.fragments.boxes = new Float32Array(6 * numFrags);
	    this.fragments.transforms = new Float32Array(12 * numFrags);
	    this.fragments.materials = new Int32Array(numFrags);
	    this.fragments.entityIndexes = new Int32Array(numFrags);
	    this.fragments.fragId2dbId = new Int32Array(numFrags);
	    this.fragments.packIds = new Int32Array(numFrags); //TODO: not used for gltf

	};

	//Create an instance tree similar to the one
	//that SVF gets from the property db
	GltfPackage.prototype.deriveInstanceTree = function () {

	    this.countFragments();

	    var sceneName = this.gltf.scene;
	    var gltfRoot = this.gltf.scenes[sceneName];
	    var gltfNodes = this.gltf.nodes;

	    this.instanceTree = {
	        name: sceneName,
	        dbId: this.nextDbId++,
	        children: [] };

	    this.nodeToDbId[sceneName] = this.instanceTree.dbId;

	    var nodeBoxes = [];
	    var maxDepth = 1;

	    var scope = this;
	    var fragments = this.fragments;
	    var tmpBox = new _LmvBox.LmvBox3();

	    function traverseNodes(svfNode, gltfNode, worldTransform, depth) {

	        if (depth > maxDepth)
	        maxDepth = depth;

	        var currentTransform = worldTransform.clone();
	        // nodes can have a matrix transform, or a TRS type transform
	        if (gltfNode.matrix) {
	            var mtx = new _LmvMatrix.LmvMatrix4(true);
	            mtx.fromArray(gltfNode.matrix);
	            currentTransform.multiply(mtx);
	        } else
	        {
	            var t = gltfNode.translation;
	            var r = gltfNode.rotation;
	            var s = gltfNode.scale;

	            // if none are defined, don't bother making the matrix -
	            // this may be a non-matrix-oriented node
	            if (t !== undefined || r !== undefined || s !== undefined) {

	                // Rotations are stored as quaternions in glTF. Here is a quick and dirty quaternion class.
	                // It's purely for storing the incoming data. We need this below to call the matrix.compose function.
	                // Feel free to make a whole separate LmvQuaternion.js file if you're doing serious quaternion work.
	                var Quat = function Quat(x, y, z, w) {

	                    this.x = x || 0;
	                    this.y = y || 0;
	                    this.z = z || 0;
	                    this.w = w || 0;

	                };

	                var position = t ? new _LmvVector.LmvVector3(t[0], t[1], t[2]) :
	                new _LmvVector.LmvVector3();
	                var rotation = r ? new Quat(r[0], r[1], r[2], r[3]) :
	                new Quat();
	                var scale = s ? new _LmvVector.LmvVector3(s[0], s[1], s[2]) :
	                new _LmvVector.LmvVector3(1, 1, 1);

	                var mtx = new _LmvMatrix.LmvMatrix4(true);
	                mtx.compose(position, rotation, scale);
	                currentTransform.multiply(mtx);
	            }
	        }

	        var nodeBox = new _LmvBox.LmvBox3();

	        var meshes = gltfNode.meshes;
	        if (gltfNode.meshes) {
	            svfNode.fragIds = [];
	            for (var j = 0; j < meshes.length; j++) {
	                var prims = scope.gltf.meshes[meshes[j]].primitives;
	                for (var k = 0; k < prims.length; k++) {

	                    var entityId = meshes[j] + ":" + k;
	                    var fragId = scope.nextFragId++;

	                    svfNode.fragIds.push(fragId);

	                    fragments.fragId2dbId[fragId] = svfNode.dbId;

	                    fragments.entityIndexes[fragId] = scope.geomToIndex[entityId];

	                    if (!fragments.mesh2frag[entityId])
	                    fragments.mesh2frag[entityId] = [fragId];else

	                    fragments.mesh2frag[entityId].push(fragId);

	                    fragments.materials[fragId] = scope.materialToIndex[prims[k].material];

	                    // Copy the transform to the fraglist array
	                    var off = fragId * 12;
	                    var cur = currentTransform.elements;
	                    var orig = fragments.transforms;
	                    orig[off] = cur[0];
	                    orig[off + 1] = cur[1];
	                    orig[off + 2] = cur[2];
	                    orig[off + 3] = cur[4];
	                    orig[off + 4] = cur[5];
	                    orig[off + 5] = cur[6];
	                    orig[off + 6] = cur[8];
	                    orig[off + 7] = cur[9];
	                    orig[off + 8] = cur[10];
	                    orig[off + 9] = cur[12];
	                    orig[off + 10] = cur[13];
	                    orig[off + 11] = cur[14];

	                    var posAccessorId = prims[k].attributes["POSITION"];
	                    if (posAccessorId) {
	                        var accessor = scope.gltf.accessors[posAccessorId];
	                        if (accessor.min && accessor.max) {
	                            tmpBox.min.x = accessor.min[0];
	                            tmpBox.min.y = accessor.min[1];
	                            tmpBox.min.z = accessor.min[2];
	                            tmpBox.max.x = accessor.max[0];
	                            tmpBox.max.y = accessor.max[1];
	                            tmpBox.max.z = accessor.max[2];

	                        } else {

	                            tmpBox.min.x = -0.5;
	                            tmpBox.min.y = -0.5;
	                            tmpBox.min.z = -0.5;
	                            tmpBox.max.x = 0.5;
	                            tmpBox.max.y = 0.5;
	                            tmpBox.max.z = 0.5;

	                            debug("unknown bbox for mesh, using unit box", meshes[j]);
	                        }

	                        tmpBox.applyMatrix4(currentTransform);

	                        off = fragId * 6;
	                        var dst = fragments.boxes;
	                        dst[off] = tmpBox.min.x;
	                        dst[off + 1] = tmpBox.min.y;
	                        dst[off + 2] = tmpBox.min.z;

	                        dst[off + 3] = tmpBox.max.x;
	                        dst[off + 4] = tmpBox.max.y;
	                        dst[off + 5] = tmpBox.max.z;

	                        nodeBox.union(tmpBox);
	                    }
	                }
	            }
	        }

	        var children = gltfNode.children || gltfNode.nodes; //the root scene uses "nodes" instead of "children"
	        if (children) {
	            svfNode.children = [];
	            for (var i = 0; i < children.length; i++) {
	                var gltfChild = gltfNodes[children[i]];

	                var svfChild = {
	                    name: gltfChild.name || children[i],
	                    dbId: scope.nextDbId++ };


	                scope.nodeToDbId[children[i]] = svfChild.dbId;

	                svfNode.children.push(svfChild);

	                var childBox = traverseNodes(svfChild, gltfChild, currentTransform, depth + 1);
	                nodeBox.union(childBox);
	            }
	        }

	        var boxOffset = svfNode.dbId * 6;
	        var dst = nodeBoxes;
	        dst[boxOffset] = nodeBox.min.x;
	        dst[boxOffset + 1] = nodeBox.min.y;
	        dst[boxOffset + 2] = nodeBox.min.z;
	        dst[boxOffset + 3] = nodeBox.max.x;
	        dst[boxOffset + 4] = nodeBox.max.y;
	        dst[boxOffset + 5] = nodeBox.max.z;

	        return nodeBox;
	    }

	    var rootBox = traverseNodes(this.instanceTree, gltfRoot, new _LmvMatrix.LmvMatrix4(true), 1);
	    scope.bbox.union(rootBox);

	    //convert boxes to typed array now that we know the needed size
	    this.instanceBoxes = new Float32Array(nodeBoxes.length);
	    this.instanceBoxes.set(nodeBoxes);
	    this.objectCount = this.nextDbId;
	    this.maxTreeDepth = maxDepth;
	};

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });


	var VBUtils = exports.VBUtils = {


	    deduceUVRepetition: function deduceUVRepetition(mesh) {

	        for (var p in mesh.vblayout) {

	            if (p.indexOf("uv") != 0 || p.indexOf("uvw") == 0)
	            continue;

	            var baseOffset = mesh.vblayout[p].offset;
	            var floatStride = mesh.vbstride;
	            var vbf = mesh.vb;
	            var vcount = mesh.vb.length / floatStride;

	            for (var i = 0, offset = baseOffset; i < vcount; i++, offset += floatStride)
	            {
	                var u = vbf[offset];
	                var v = vbf[offset + 1];
	                if (u > 2 || u < 0 || v > 2 || v < 0) {
	                    mesh.vblayout[p].isPattern = true;
	                    break;
	                }
	            }
	        }
	    },


	    //Calculate the 3D bounding box and bounding sphere
	    //of a mesh containing an interleaved vertex buffer
	    computeBounds3D: function computeBounds3D(mesh) {

	        var minx = Infinity,miny = Infinity,minz = Infinity;
	        var maxx = -Infinity,maxy = -Infinity,maxz = -Infinity;
	        var i, offset, x, y, z;

	        var floatStride = mesh.vbstride;
	        var baseOffset = mesh.vblayout.position.offset;
	        var vbf = mesh.vb;
	        var vcount = mesh.vb.length / floatStride;

	        for (i = 0, offset = baseOffset; i < vcount; i++, offset += floatStride)
	        {
	            x = vbf[offset];
	            y = vbf[offset + 1];
	            z = vbf[offset + 2];

	            if (minx > x) minx = x;
	            if (miny > y) miny = y;
	            if (minz > z) minz = z;

	            if (maxx < x) maxx = x;
	            if (maxy < y) maxy = y;
	            if (maxz < z) maxz = z;
	        }

	        var bb = mesh.boundingBox = {
	            min: { x: minx, y: miny, z: minz },
	            max: { x: maxx, y: maxy, z: maxz } };


	        var cx = 0.5 * (minx + maxx),cy = 0.5 * (miny + maxy),cz = 0.5 * (minz + maxz);

	        var bs = mesh.boundingSphere = {};
	        bs.center = { x: cx, y: cy, z: cz };

	        var maxRadiusSq = 0;
	        for (i = 0, offset = baseOffset; i < vcount; i++, offset += floatStride) {

	            x = vbf[offset];
	            y = vbf[offset + 1];
	            z = vbf[offset + 2];

	            var dx = x - cx;
	            var dy = y - cy;
	            var dz = z - cz;
	            var distsq = dx * dx + dy * dy + dz * dz;
	            if (distsq > maxRadiusSq)
	            maxRadiusSq = distsq;
	        }

	        bs.radius = Math.sqrt(maxRadiusSq);

	    },

	    bboxUnion: function bboxUnion(bdst, bsrc) {
	        if (bsrc.min.x < bdst.min.x)
	        bdst.min.x = bsrc.min.x;
	        if (bsrc.min.y < bdst.min.y)
	        bdst.min.y = bsrc.min.y;
	        if (bsrc.min.z < bdst.min.z)
	        bdst.min.z = bsrc.min.z;

	        if (bsrc.max.x > bdst.max.x)
	        bdst.max.x = bsrc.max.x;
	        if (bsrc.max.y > bdst.max.y)
	        bdst.max.y = bsrc.max.y;
	        if (bsrc.max.z > bdst.max.z)
	        bdst.max.z = bsrc.max.z;
	    } };

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true }); /**
	                                                                             * @author mrdoob / http://mrdoob.com/
	                                                                             * @author *kile / http://kile.stravaganza.org/
	                                                                             * @author philogb / http://blog.thejit.org/
	                                                                             * @author mikael emtinger / http://gomo.se/
	                                                                             * @author egraether / http://egraether.com/
	                                                                             * @author WestLangley / http://github.com/WestLangley
	                                                                             */
	/* Pruned version of THREE.Vector3, for use in the LMV web worker */

	var LmvVector3 = exports.LmvVector3 = function LmvVector3(x, y, z) {

	    this.x = x || 0;
	    this.y = y || 0;
	    this.z = z || 0;

	};

	LmvVector3.prototype = {

	    constructor: LmvVector3,

	    set: function set(x, y, z) {

	        this.x = x;
	        this.y = y;
	        this.z = z;

	        return this;

	    },

	    setX: function setX(x) {

	        this.x = x;

	        return this;

	    },

	    setY: function setY(y) {

	        this.y = y;

	        return this;

	    },

	    setZ: function setZ(z) {

	        this.z = z;

	        return this;

	    },

	    setComponent: function setComponent(index, value) {

	        switch (index) {

	            case 0:this.x = value;break;
	            case 1:this.y = value;break;
	            case 2:this.z = value;break;
	            default:throw new Error('index is out of range: ' + index);}



	    },

	    getComponent: function getComponent(index) {

	        switch (index) {

	            case 0:return this.x;
	            case 1:return this.y;
	            case 2:return this.z;
	            default:throw new Error('index is out of range: ' + index);}



	    },

	    clone: function clone() {

	        return new this.constructor(this.x, this.y, this.z);

	    },

	    copy: function copy(v) {

	        this.x = v.x;
	        this.y = v.y;
	        this.z = v.z;

	        return this;

	    },

	    add: function add(v, w) {

	        if (w !== undefined) {

	            console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
	            return this.addVectors(v, w);

	        }

	        this.x += v.x;
	        this.y += v.y;
	        this.z += v.z;

	        return this;

	    },

	    addScalar: function addScalar(s) {

	        this.x += s;
	        this.y += s;
	        this.z += s;

	        return this;

	    },

	    addVectors: function addVectors(a, b) {

	        this.x = a.x + b.x;
	        this.y = a.y + b.y;
	        this.z = a.z + b.z;

	        return this;

	    },

	    addScaledVector: function addScaledVector(v, s) {

	        this.x += v.x * s;
	        this.y += v.y * s;
	        this.z += v.z * s;

	        return this;

	    },

	    sub: function sub(v, w) {

	        if (w !== undefined) {

	            console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
	            return this.subVectors(v, w);

	        }

	        this.x -= v.x;
	        this.y -= v.y;
	        this.z -= v.z;

	        return this;

	    },

	    subScalar: function subScalar(s) {

	        this.x -= s;
	        this.y -= s;
	        this.z -= s;

	        return this;

	    },

	    subVectors: function subVectors(a, b) {

	        this.x = a.x - b.x;
	        this.y = a.y - b.y;
	        this.z = a.z - b.z;

	        return this;

	    },

	    multiply: function multiply(v, w) {

	        if (w !== undefined) {

	            console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
	            return this.multiplyVectors(v, w);

	        }

	        this.x *= v.x;
	        this.y *= v.y;
	        this.z *= v.z;

	        return this;

	    },

	    multiplyScalar: function multiplyScalar(scalar) {

	        this.x *= scalar;
	        this.y *= scalar;
	        this.z *= scalar;

	        return this;

	    },

	    multiplyVectors: function multiplyVectors(a, b) {

	        this.x = a.x * b.x;
	        this.y = a.y * b.y;
	        this.z = a.z * b.z;

	        return this;

	    },

	    applyMatrix3: function applyMatrix3(m) {

	        var x = this.x;
	        var y = this.y;
	        var z = this.z;

	        var e = m.elements;

	        this.x = e[0] * x + e[3] * y + e[6] * z;
	        this.y = e[1] * x + e[4] * y + e[7] * z;
	        this.z = e[2] * x + e[5] * y + e[8] * z;

	        return this;

	    },

	    applyMatrix4: function applyMatrix4(m) {

	        // input: THREE.Matrix4 affine matrix

	        var x = this.x,y = this.y,z = this.z;

	        var e = m.elements;

	        this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
	        this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
	        this.z = e[2] * x + e[6] * y + e[10] * z + e[14];

	        return this;

	    },

	    applyProjection: function applyProjection(m) {

	        // input: THREE.Matrix4 projection matrix

	        var x = this.x,y = this.y,z = this.z;

	        var e = m.elements;
	        var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]); // perspective divide

	        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;
	        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;
	        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;

	        return this;

	    },

	    applyQuaternion: function applyQuaternion(q) {

	        var x = this.x;
	        var y = this.y;
	        var z = this.z;

	        var qx = q.x;
	        var qy = q.y;
	        var qz = q.z;
	        var qw = q.w;

	        // calculate quat * vector

	        var ix = qw * x + qy * z - qz * y;
	        var iy = qw * y + qz * x - qx * z;
	        var iz = qw * z + qx * y - qy * x;
	        var iw = -qx * x - qy * y - qz * z;

	        // calculate result * inverse quat

	        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

	        return this;

	    },

	    transformDirection: function transformDirection(m) {

	        // input: THREE.Matrix4 affine matrix
	        // vector interpreted as a direction

	        var x = this.x,y = this.y,z = this.z;

	        var e = m.elements;

	        this.x = e[0] * x + e[4] * y + e[8] * z;
	        this.y = e[1] * x + e[5] * y + e[9] * z;
	        this.z = e[2] * x + e[6] * y + e[10] * z;

	        this.normalize();

	        return this;

	    },

	    divide: function divide(v) {

	        this.x /= v.x;
	        this.y /= v.y;
	        this.z /= v.z;

	        return this;

	    },

	    divideScalar: function divideScalar(scalar) {

	        if (scalar !== 0) {

	            var invScalar = 1 / scalar;

	            this.x *= invScalar;
	            this.y *= invScalar;
	            this.z *= invScalar;

	        } else {

	            this.x = 0;
	            this.y = 0;
	            this.z = 0;

	        }

	        return this;

	    },

	    min: function min(v) {

	        if (this.x > v.x) {

	            this.x = v.x;

	        }

	        if (this.y > v.y) {

	            this.y = v.y;

	        }

	        if (this.z > v.z) {

	            this.z = v.z;

	        }

	        return this;

	    },

	    max: function max(v) {

	        if (this.x < v.x) {

	            this.x = v.x;

	        }

	        if (this.y < v.y) {

	            this.y = v.y;

	        }

	        if (this.z < v.z) {

	            this.z = v.z;

	        }

	        return this;

	    },

	    clamp: function clamp(min, max) {

	        // This function assumes min < max, if this assumption isn't true it will not operate correctly

	        if (this.x < min.x) {

	            this.x = min.x;

	        } else if (this.x > max.x) {

	            this.x = max.x;

	        }

	        if (this.y < min.y) {

	            this.y = min.y;

	        } else if (this.y > max.y) {

	            this.y = max.y;

	        }

	        if (this.z < min.z) {

	            this.z = min.z;

	        } else if (this.z > max.z) {

	            this.z = max.z;

	        }

	        return this;

	    },

	    clampScalar: function () {

	        var min, max;

	        return function clampScalar(minVal, maxVal) {

	            if (min === undefined) {

	                min = new LmvVector3();
	                max = new LmvVector3();

	            }

	            min.set(minVal, minVal, minVal);
	            max.set(maxVal, maxVal, maxVal);

	            return this.clamp(min, max);

	        };

	    }(),

	    floor: function floor() {

	        this.x = Math.floor(this.x);
	        this.y = Math.floor(this.y);
	        this.z = Math.floor(this.z);

	        return this;

	    },

	    ceil: function ceil() {

	        this.x = Math.ceil(this.x);
	        this.y = Math.ceil(this.y);
	        this.z = Math.ceil(this.z);

	        return this;

	    },

	    round: function round() {

	        this.x = Math.round(this.x);
	        this.y = Math.round(this.y);
	        this.z = Math.round(this.z);

	        return this;

	    },

	    roundToZero: function roundToZero() {

	        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
	        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
	        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);

	        return this;

	    },

	    negate: function negate() {

	        this.x = -this.x;
	        this.y = -this.y;
	        this.z = -this.z;

	        return this;

	    },

	    dot: function dot(v) {

	        return this.x * v.x + this.y * v.y + this.z * v.z;

	    },

	    lengthSq: function lengthSq() {

	        return this.x * this.x + this.y * this.y + this.z * this.z;

	    },

	    length: function length() {

	        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);

	    },

	    lengthManhattan: function lengthManhattan() {

	        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);

	    },

	    normalize: function normalize() {

	        return this.divideScalar(this.length());

	    },

	    setLength: function setLength(l) {

	        var oldLength = this.length();

	        if (oldLength !== 0 && l !== oldLength) {

	            this.multiplyScalar(l / oldLength);

	        }

	        return this;

	    },

	    lerp: function lerp(v, alpha) {

	        this.x += (v.x - this.x) * alpha;
	        this.y += (v.y - this.y) * alpha;
	        this.z += (v.z - this.z) * alpha;

	        return this;

	    },

	    lerpVectors: function lerpVectors(v1, v2, alpha) {

	        this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);

	        return this;

	    },

	    cross: function cross(v, w) {

	        if (w !== undefined) {

	            console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
	            return this.crossVectors(v, w);

	        }

	        var x = this.x,y = this.y,z = this.z;

	        this.x = y * v.z - z * v.y;
	        this.y = z * v.x - x * v.z;
	        this.z = x * v.y - y * v.x;

	        return this;

	    },

	    crossVectors: function crossVectors(a, b) {

	        var ax = a.x,ay = a.y,az = a.z;
	        var bx = b.x,by = b.y,bz = b.z;

	        this.x = ay * bz - az * by;
	        this.y = az * bx - ax * bz;
	        this.z = ax * by - ay * bx;

	        return this;

	    },

	    projectOnVector: function () {

	        var v1, dot;

	        return function projectOnVector(vector) {

	            if (v1 === undefined) v1 = new LmvVector3();

	            v1.copy(vector).normalize();

	            dot = this.dot(v1);

	            return this.copy(v1).multiplyScalar(dot);

	        };

	    }(),

	    projectOnPlane: function () {

	        var v1;

	        return function projectOnPlane(planeNormal) {

	            if (v1 === undefined) v1 = new LmvVector3();

	            v1.copy(this).projectOnVector(planeNormal);

	            return this.sub(v1);

	        };

	    }(),

	    reflect: function () {

	        // reflect incident vector off plane orthogonal to normal
	        // normal is assumed to have unit length

	        var v1;

	        return function reflect(normal) {

	            if (v1 === undefined) v1 = new LmvVector3();

	            return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));

	        };

	    }(),

	    distanceTo: function distanceTo(v) {

	        return Math.sqrt(this.distanceToSquared(v));

	    },

	    distanceToSquared: function distanceToSquared(v) {

	        var dx = this.x - v.x;
	        var dy = this.y - v.y;
	        var dz = this.z - v.z;

	        return dx * dx + dy * dy + dz * dz;

	    },

	    setEulerFromRotationMatrix: function setEulerFromRotationMatrix(m, order) {

	        console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');

	    },

	    setEulerFromQuaternion: function setEulerFromQuaternion(q, order) {

	        console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');

	    },

	    getPositionFromMatrix: function getPositionFromMatrix(m) {

	        console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');

	        return this.setFromMatrixPosition(m);

	    },

	    getScaleFromMatrix: function getScaleFromMatrix(m) {

	        console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');

	        return this.setFromMatrixScale(m);

	    },

	    getColumnFromMatrix: function getColumnFromMatrix(index, matrix) {

	        console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');

	        return this.setFromMatrixColumn(index, matrix);

	    },

	    setFromMatrixPosition: function setFromMatrixPosition(m) {

	        this.x = m.elements[12];
	        this.y = m.elements[13];
	        this.z = m.elements[14];

	        return this;

	    },

	    setFromMatrixScale: function setFromMatrixScale(m) {

	        var sx = this.set(m.elements[0], m.elements[1], m.elements[2]).length();
	        var sy = this.set(m.elements[4], m.elements[5], m.elements[6]).length();
	        var sz = this.set(m.elements[8], m.elements[9], m.elements[10]).length();

	        this.x = sx;
	        this.y = sy;
	        this.z = sz;

	        return this;

	    },

	    setFromMatrixColumn: function setFromMatrixColumn(index, matrix) {

	        var offset = index * 4;

	        var me = matrix.elements;

	        this.x = me[offset];
	        this.y = me[offset + 1];
	        this.z = me[offset + 2];

	        return this;

	    },

	    equals: function equals(v) {

	        return v.x === this.x && v.y === this.y && v.z === this.z;

	    },

	    fromArray: function fromArray(array, offset) {

	        if (offset === undefined) offset = 0;

	        this.x = array[offset];
	        this.y = array[offset + 1];
	        this.z = array[offset + 2];

	        return this;

	    },

	    toArray: function toArray(array, offset) {

	        if (array === undefined) array = [];
	        if (offset === undefined) offset = 0;

	        array[offset] = this.x;
	        array[offset + 1] = this.y;
	        array[offset + 2] = this.z;

	        return array;

	    },

	    fromAttribute: function fromAttribute(attribute, index, offset) {

	        if (offset === undefined) offset = 0;

	        index = index * attribute.itemSize + offset;

	        this.x = attribute.array[index];
	        this.y = attribute.array[index + 1];
	        this.z = attribute.array[index + 2];

	        return this;

	    } };

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.LmvBox3 = undefined;





	var _LmvVector = __webpack_require__(28);

	var LmvBox3 = exports.LmvBox3 = function LmvBox3(min, max) {

	    this.min = min !== undefined ? min : new _LmvVector.LmvVector3(Infinity, Infinity, Infinity);
	    this.max = max !== undefined ? max : new _LmvVector.LmvVector3(-Infinity, -Infinity, -Infinity);

	}; /**
	    * @author bhouston / http://exocortex.com
	    * @author WestLangley / http://github.com/WestLangley
	    */ /* Pruned version of THREE.Box3, for use in the LMV web worker */LmvBox3.prototype = {
	    constructor: LmvBox3,

	    set: function set(min, max) {

	        this.min.copy(min);
	        this.max.copy(max);

	        return this;

	    },

	    setFromPoints: function setFromPoints(points) {

	        this.makeEmpty();

	        for (var i = 0, il = points.length; i < il; i++) {

	            this.expandByPoint(points[i]);

	        }

	        return this;

	    },

	    setFromArray: function setFromArray(array, offset) {

	        this.min.x = array[offset];
	        this.min.y = array[offset + 1];
	        this.min.z = array[offset + 2];

	        this.max.x = array[offset + 3];
	        this.max.y = array[offset + 4];
	        this.max.z = array[offset + 5];

	        return this;

	    },

	    copyToArray: function copyToArray(array, offset) {

	        array[offset] = this.min.x;
	        array[offset + 1] = this.min.y;
	        array[offset + 2] = this.min.z;

	        array[offset + 3] = this.max.x;
	        array[offset + 4] = this.max.y;
	        array[offset + 5] = this.max.z;

	    },

	    setFromCenterAndSize: function () {

	        var v1 = new _LmvVector.LmvVector3();

	        return function (center, size) {

	            var halfSize = v1.copy(size).multiplyScalar(0.5);

	            this.min.copy(center).sub(halfSize);
	            this.max.copy(center).add(halfSize);

	            return this;

	        };

	    }(),

	    clone: function clone() {

	        return new this.constructor().copy(this);

	    },

	    copy: function copy(box) {

	        this.min.copy(box.min);
	        this.max.copy(box.max);

	        return this;

	    },

	    makeEmpty: function makeEmpty() {

	        this.min.x = this.min.y = this.min.z = Infinity;
	        this.max.x = this.max.y = this.max.z = -Infinity;

	        return this;

	    },

	    empty: function empty() {

	        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

	        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;

	    },

	    center: function center(optionalTarget) {

	        var result = optionalTarget || new _LmvVector.LmvVector3();
	        return result.addVectors(this.min, this.max).multiplyScalar(0.5);

	    },

	    size: function size(optionalTarget) {

	        var result = optionalTarget || new _LmvVector.LmvVector3();
	        return result.subVectors(this.max, this.min);

	    },

	    expandByPoint: function expandByPoint(point) {

	        this.min.min(point);
	        this.max.max(point);

	        return this;

	    },

	    expandByVector: function expandByVector(vector) {

	        this.min.sub(vector);
	        this.max.add(vector);

	        return this;

	    },

	    expandByScalar: function expandByScalar(scalar) {

	        this.min.addScalar(-scalar);
	        this.max.addScalar(scalar);

	        return this;

	    },

	    containsPoint: function containsPoint(point) {

	        if (point.x < this.min.x || point.x > this.max.x ||
	        point.y < this.min.y || point.y > this.max.y ||
	        point.z < this.min.z || point.z > this.max.z) {

	            return false;

	        }

	        return true;

	    },

	    containsBox: function containsBox(box) {

	        if (this.min.x <= box.min.x && box.max.x <= this.max.x &&
	        this.min.y <= box.min.y && box.max.y <= this.max.y &&
	        this.min.z <= box.min.z && box.max.z <= this.max.z) {

	            return true;

	        }

	        return false;

	    },

	    getParameter: function getParameter(point, optionalTarget) {

	        // This can potentially have a divide by zero if the box
	        // has a size dimension of 0.

	        var result = optionalTarget || new _LmvVector.LmvVector3();

	        return result.set(
	        (point.x - this.min.x) / (this.max.x - this.min.x),
	        (point.y - this.min.y) / (this.max.y - this.min.y),
	        (point.z - this.min.z) / (this.max.z - this.min.z));


	    },

	    isIntersectionBox: function isIntersectionBox(box) {

	        // using 6 splitting planes to rule out intersections.

	        if (box.max.x < this.min.x || box.min.x > this.max.x ||
	        box.max.y < this.min.y || box.min.y > this.max.y ||
	        box.max.z < this.min.z || box.min.z > this.max.z) {

	            return false;

	        }

	        return true;

	    },

	    clampPoint: function clampPoint(point, optionalTarget) {

	        var result = optionalTarget || new _LmvVector.LmvVector3();
	        return result.copy(point).clamp(this.min, this.max);

	    },

	    distanceToPoint: function () {

	        var v1 = new _LmvVector.LmvVector3();

	        return function (point) {

	            var clampedPoint = v1.copy(point).clamp(this.min, this.max);
	            return clampedPoint.sub(point).length();

	        };

	    }(),

	    intersect: function intersect(box) {

	        this.min.max(box.min);
	        this.max.min(box.max);

	        return this;

	    },

	    union: function union(box) {

	        this.min.min(box.min);
	        this.max.max(box.max);

	        return this;

	    },

	    applyMatrix4: function () {

	        var points = [
	        new _LmvVector.LmvVector3(),
	        new _LmvVector.LmvVector3(),
	        new _LmvVector.LmvVector3(),
	        new _LmvVector.LmvVector3(),
	        new _LmvVector.LmvVector3(),
	        new _LmvVector.LmvVector3(),
	        new _LmvVector.LmvVector3(),
	        new _LmvVector.LmvVector3()];


	        return function (matrix) {

	            // NOTE: I am using a binary pattern to specify all 2^3 combinations below
	            points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
	            points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
	            points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
	            points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
	            points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
	            points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
	            points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
	            points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111

	            this.makeEmpty();
	            this.setFromPoints(points);

	            return this;

	        };

	    }(),

	    translate: function translate(offset) {

	        this.min.add(offset);
	        this.max.add(offset);

	        return this;

	    },

	    equals: function equals(box) {

	        return box.min.equals(this.min) && box.max.equals(this.max);

	    } };

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true }); /**
	                                                                             * @author mrdoob / http://mrdoob.com/
	                                                                             * @author supereggbert / http://www.paulbrunt.co.uk/
	                                                                             * @author philogb / http://blog.thejit.org/
	                                                                             * @author jordi_ros / http://plattsoft.com
	                                                                             * @author D1plo1d / http://github.com/D1plo1d
	                                                                             * @author alteredq / http://alteredqualia.com/
	                                                                             * @author mikael emtinger / http://gomo.se/
	                                                                             * @author timknip / http://www.floorplanner.com/
	                                                                             * @author bhouston / http://exocortex.com
	                                                                             * @author WestLangley / http://github.com/WestLangley
	                                                                             */
	/* Pruned version of THREE.Matrix4, for use in the LMV web worker */

	var LmvMatrix4 = exports.LmvMatrix4 = function LmvMatrix4(useDoublePrecision) {

	    if (useDoublePrecision) {

	        this.elements = new Float64Array([

	        1, 0, 0, 0,
	        0, 1, 0, 0,
	        0, 0, 1, 0,
	        0, 0, 0, 1]);



	    } else {

	        this.elements = new Float32Array([

	        1, 0, 0, 0,
	        0, 1, 0, 0,
	        0, 0, 1, 0,
	        0, 0, 0, 1]);



	    }

	};

	LmvMatrix4.prototype = {

	    constructor: LmvMatrix4,

	    set: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {

	        var te = this.elements;

	        te[0] = n11;te[4] = n12;te[8] = n13;te[12] = n14;
	        te[1] = n21;te[5] = n22;te[9] = n23;te[13] = n24;
	        te[2] = n31;te[6] = n32;te[10] = n33;te[14] = n34;
	        te[3] = n41;te[7] = n42;te[11] = n43;te[15] = n44;

	        return this;

	    },

	    identity: function identity() {

	        this.set(

	        1, 0, 0, 0,
	        0, 1, 0, 0,
	        0, 0, 1, 0,
	        0, 0, 0, 1);



	        return this;

	    },

	    copy: function copy(m) {

	        this.elements.set(m.elements);

	        return this;

	    },

	    makeRotationFromQuaternion: function makeRotationFromQuaternion(q) {

	        var te = this.elements;

	        var x = q.x,y = q.y,z = q.z,w = q.w;
	        var x2 = x + x,y2 = y + y,z2 = z + z;
	        var xx = x * x2,xy = x * y2,xz = x * z2;
	        var yy = y * y2,yz = y * z2,zz = z * z2;
	        var wx = w * x2,wy = w * y2,wz = w * z2;

	        te[0] = 1 - (yy + zz);
	        te[4] = xy - wz;
	        te[8] = xz + wy;

	        te[1] = xy + wz;
	        te[5] = 1 - (xx + zz);
	        te[9] = yz - wx;

	        te[2] = xz - wy;
	        te[6] = yz + wx;
	        te[10] = 1 - (xx + yy);

	        // last column
	        te[3] = 0;
	        te[7] = 0;
	        te[11] = 0;

	        // bottom row
	        te[12] = 0;
	        te[13] = 0;
	        te[14] = 0;
	        te[15] = 1;

	        return this;

	    },

	    multiply: function multiply(n) {

	        return this.multiplyMatrices(this, n);

	    },

	    multiplyMatrices: function multiplyMatrices(a, b) {

	        var ae = a.elements;
	        var be = b.elements;
	        var te = this.elements;

	        var a11 = ae[0],a12 = ae[4],a13 = ae[8],a14 = ae[12];
	        var a21 = ae[1],a22 = ae[5],a23 = ae[9],a24 = ae[13];
	        var a31 = ae[2],a32 = ae[6],a33 = ae[10],a34 = ae[14];
	        var a41 = ae[3],a42 = ae[7],a43 = ae[11],a44 = ae[15];

	        var b11 = be[0],b12 = be[4],b13 = be[8],b14 = be[12];
	        var b21 = be[1],b22 = be[5],b23 = be[9],b24 = be[13];
	        var b31 = be[2],b32 = be[6],b33 = be[10],b34 = be[14];
	        var b41 = be[3],b42 = be[7],b43 = be[11],b44 = be[15];

	        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
	        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
	        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
	        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

	        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
	        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
	        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
	        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

	        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
	        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
	        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
	        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

	        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
	        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
	        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
	        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

	        return this;

	    },

	    multiplyToArray: function multiplyToArray(a, b, r) {

	        var te = this.elements;

	        this.multiplyMatrices(a, b);

	        r[0] = te[0];r[1] = te[1];r[2] = te[2];r[3] = te[3];
	        r[4] = te[4];r[5] = te[5];r[6] = te[6];r[7] = te[7];
	        r[8] = te[8];r[9] = te[9];r[10] = te[10];r[11] = te[11];
	        r[12] = te[12];r[13] = te[13];r[14] = te[14];r[15] = te[15];

	        return this;

	    },

	    multiplyScalar: function multiplyScalar(s) {

	        var te = this.elements;

	        te[0] *= s;te[4] *= s;te[8] *= s;te[12] *= s;
	        te[1] *= s;te[5] *= s;te[9] *= s;te[13] *= s;
	        te[2] *= s;te[6] *= s;te[10] *= s;te[14] *= s;
	        te[3] *= s;te[7] *= s;te[11] *= s;te[15] *= s;

	        return this;

	    },

	    determinant: function determinant() {

	        var te = this.elements;

	        var n11 = te[0],n12 = te[4],n13 = te[8],n14 = te[12];
	        var n21 = te[1],n22 = te[5],n23 = te[9],n24 = te[13];
	        var n31 = te[2],n32 = te[6],n33 = te[10],n34 = te[14];
	        var n41 = te[3],n42 = te[7],n43 = te[11],n44 = te[15];

	        //TODO: make this more efficient
	        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

	        return (
	            n41 * (
	            +n14 * n23 * n32 -
	            n13 * n24 * n32 -
	            n14 * n22 * n33 +
	            n12 * n24 * n33 +
	            n13 * n22 * n34 -
	            n12 * n23 * n34) +

	            n42 * (
	            +n11 * n23 * n34 -
	            n11 * n24 * n33 +
	            n14 * n21 * n33 -
	            n13 * n21 * n34 +
	            n13 * n24 * n31 -
	            n14 * n23 * n31) +

	            n43 * (
	            +n11 * n24 * n32 -
	            n11 * n22 * n34 -
	            n14 * n21 * n32 +
	            n12 * n21 * n34 +
	            n14 * n22 * n31 -
	            n12 * n24 * n31) +

	            n44 * (
	            -n13 * n22 * n31 -
	            n11 * n23 * n32 +
	            n11 * n22 * n33 +
	            n13 * n21 * n32 -
	            n12 * n21 * n33 +
	            n12 * n23 * n31));




	    },

	    transpose: function transpose() {

	        var te = this.elements;
	        var tmp;

	        tmp = te[1];te[1] = te[4];te[4] = tmp;
	        tmp = te[2];te[2] = te[8];te[8] = tmp;
	        tmp = te[6];te[6] = te[9];te[9] = tmp;

	        tmp = te[3];te[3] = te[12];te[12] = tmp;
	        tmp = te[7];te[7] = te[13];te[13] = tmp;
	        tmp = te[11];te[11] = te[14];te[14] = tmp;

	        return this;

	    },

	    flattenToArrayOffset: function flattenToArrayOffset(array, offset) {

	        var te = this.elements;

	        array[offset] = te[0];
	        array[offset + 1] = te[1];
	        array[offset + 2] = te[2];
	        array[offset + 3] = te[3];

	        array[offset + 4] = te[4];
	        array[offset + 5] = te[5];
	        array[offset + 6] = te[6];
	        array[offset + 7] = te[7];

	        array[offset + 8] = te[8];
	        array[offset + 9] = te[9];
	        array[offset + 10] = te[10];
	        array[offset + 11] = te[11];

	        array[offset + 12] = te[12];
	        array[offset + 13] = te[13];
	        array[offset + 14] = te[14];
	        array[offset + 15] = te[15];

	        return array;

	    },

	    setPosition: function setPosition(v) {

	        var te = this.elements;

	        te[12] = v.x;
	        te[13] = v.y;
	        te[14] = v.z;

	        return this;

	    },

	    getInverse: function getInverse(m, throwOnInvertible) {

	        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
	        var te = this.elements;
	        var me = m.elements;

	        var n11 = me[0],n12 = me[4],n13 = me[8],n14 = me[12];
	        var n21 = me[1],n22 = me[5],n23 = me[9],n24 = me[13];
	        var n31 = me[2],n32 = me[6],n33 = me[10],n34 = me[14];
	        var n41 = me[3],n42 = me[7],n43 = me[11],n44 = me[15];

	        te[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
	        te[4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
	        te[8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
	        te[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
	        te[1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
	        te[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
	        te[9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
	        te[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
	        te[2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
	        te[6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
	        te[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
	        te[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
	        te[3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
	        te[7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
	        te[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
	        te[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;

	        var det = n11 * te[0] + n21 * te[4] + n31 * te[8] + n41 * te[12];

	        if (det == 0) {

	            var msg = "Matrix4.getInverse(): can't invert matrix, determinant is 0";

	            if (throwOnInvertible || false) {

	                throw new Error(msg);

	            } else {

	                console.warn(msg);

	            }

	            this.identity();

	            return this;
	        }

	        this.multiplyScalar(1 / det);

	        return this;

	    },

	    scale: function scale(v) {

	        var te = this.elements;
	        var x = v.x,y = v.y,z = v.z;

	        te[0] *= x;te[4] *= y;te[8] *= z;
	        te[1] *= x;te[5] *= y;te[9] *= z;
	        te[2] *= x;te[6] *= y;te[10] *= z;
	        te[3] *= x;te[7] *= y;te[11] *= z;

	        return this;

	    },

	    makeTranslation: function makeTranslation(x, y, z) {

	        this.set(

	        1, 0, 0, x,
	        0, 1, 0, y,
	        0, 0, 1, z,
	        0, 0, 0, 1);



	        return this;

	    },

	    makeRotationX: function makeRotationX(theta) {

	        var c = Math.cos(theta),s = Math.sin(theta);

	        this.set(

	        1, 0, 0, 0,
	        0, c, -s, 0,
	        0, s, c, 0,
	        0, 0, 0, 1);



	        return this;

	    },

	    makeRotationY: function makeRotationY(theta) {

	        var c = Math.cos(theta),s = Math.sin(theta);

	        this.set(

	        c, 0, s, 0,
	        0, 1, 0, 0,
	        -s, 0, c, 0,
	        0, 0, 0, 1);



	        return this;

	    },

	    makeRotationZ: function makeRotationZ(theta) {

	        var c = Math.cos(theta),s = Math.sin(theta);

	        this.set(

	        c, -s, 0, 0,
	        s, c, 0, 0,
	        0, 0, 1, 0,
	        0, 0, 0, 1);



	        return this;

	    },

	    makeRotationAxis: function makeRotationAxis(axis, angle) {

	        // Based on http://www.gamedev.net/reference/articles/article1199.asp

	        var c = Math.cos(angle);
	        var s = Math.sin(angle);
	        var t = 1 - c;
	        var x = axis.x,y = axis.y,z = axis.z;
	        var tx = t * x,ty = t * y;

	        this.set(

	        tx * x + c, tx * y - s * z, tx * z + s * y, 0,
	        tx * y + s * z, ty * y + c, ty * z - s * x, 0,
	        tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
	        0, 0, 0, 1);



	        return this;

	    },

	    makeScale: function makeScale(x, y, z) {

	        this.set(

	        x, 0, 0, 0,
	        0, y, 0, 0,
	        0, 0, z, 0,
	        0, 0, 0, 1);



	        return this;

	    },

	    compose: function compose(position, quaternion, scale) {

	        this.makeRotationFromQuaternion(quaternion);
	        this.scale(scale);
	        this.setPosition(position);

	        return this;

	    },

	    //Added for LMV
	    transformPoint: function transformPoint(pt) {

	        // input: THREE.Matrix4 affine matrix

	        var x = pt.x,y = pt.y,z = pt.z;

	        var e = this.elements;

	        pt.x = e[0] * x + e[4] * y + e[8] * z + e[12];
	        pt.y = e[1] * x + e[5] * y + e[9] * z + e[13];
	        pt.z = e[2] * x + e[6] * y + e[10] * z + e[14];

	        return pt;
	    },

	    //Added for LMV
	    transformDirection: function transformDirection(v) {

	        // input: THREE.Matrix4 affine matrix
	        // vector interpreted as a direction

	        var x = v.x,y = v.y,z = v.z;

	        var e = this.elements;

	        v.x = e[0] * x + e[4] * y + e[8] * z;
	        v.y = e[1] * x + e[5] * y + e[9] * z;
	        v.z = e[2] * x + e[6] * y + e[10] * z;

	        var len = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	        if (len > 0) {
	            var ilen = 1.0 / len;
	            v.x *= ilen;
	            v.y *= ilen;
	            v.z *= ilen;
	        }

	        return v;
	    },


	    fromArray: function fromArray(array) {

	        this.elements.set(array);

	        return this;

	    },

	    toArray: function toArray() {

	        var te = this.elements;

	        return [
	        te[0], te[1], te[2], te[3],
	        te[4], te[5], te[6], te[7],
	        te[8], te[9], te[10], te[11],
	        te[12], te[13], te[14], te[15]];


	    },

	    clone: function clone() {

	        return new LmvMatrix4(this.elements instanceof Float64Array).fromArray(this.elements);

	    } };

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.
















	Package = Package;var _compat = __webpack_require__(4);var _BVHBuilder = __webpack_require__(32);var _LmvVector = __webpack_require__(28);var _Xhr = __webpack_require__(2);var _InputStream = __webpack_require__(33);var _PackReader = __webpack_require__(34);var _Fragments = __webpack_require__(35);var _Instances = __webpack_require__(37);var _SvfPlacementUtils = __webpack_require__(38);var _Cameras = __webpack_require__(39);var _Lights = __webpack_require__(40);var Zlib = __webpack_require__(41).Zlib; /** @constructor */function Package(zipPack, config) {

	    this.unzip = new Zlib.Unzip(zipPack);

	    this.max_pf_files = config ? config.max_pf_files || 0 : 0;

	    this.manifest = null;

	    this.materials = null; //The materials json as it came from the SVF

	    this.metadata = null; //metadata json

	    this.fragments = null; //will be a FragList

	    this.geompacks = [];

	    //TODO:
	    //Those will not be parsed immediately
	    //but we will remember the raw arrays
	    //and fire off async workers to parse
	    //them later, once we are loading geometry packs
	    this.instances = [];

	    this.cameras = [];
	    this.lights = [];

	    this.propertydb = {
	        attrs: [],
	        avs: [],
	        ids: [],
	        values: [],
	        offsets: [] };


	    this.bbox = null; //Overall scene bounds

	    this.animations = null; // animations json

	    this.pendingRequests = 0;

	    this.globalOffset = { x: 0, y: 0, z: 0 };

	    this.topologyPath = null; // string path to the topology file

	}



	Package.prototype.loadAsyncResource = function (loadContext, resourcePath, contents, callback) {

	    //Data is immediately available from the SVF zip
	    if (contents) {
	        callback(contents);
	        return;
	    }

	    //Launch an XHR to load the data from external file
	    var svf = this;

	    this.pendingRequests++;

	    function xhrCB(responseData) {
	        svf.pendingRequests--;

	        callback(responseData);

	        if (svf.pendingRequests == 0)
	        svf.postLoad(loadContext);
	    }

	    _Xhr.ViewingService.getItem(loadContext, loadContext.basePath + resourcePath,
	    xhrCB,
	    loadContext.onFailureCallback,
	    { asynchronous: true });


	};

	Package.prototype.loadManifest = function (loadContext) {
	    // TODO: zlib.js throws exceptions on failure;
	    // it doesn't return null as this code seems to assume.
	    // yes, LoadContext is passed in, but is not used.
	    var manifestJson = this.unzip.decompress("manifest.json");
	    if (!manifestJson)
	    return false;

	    var jdr = new _InputStream.InputStream(manifestJson);
	    this.manifest = JSON.parse(jdr.getString(manifestJson.byteLength));
	};

	Package.prototype.parseFragmentList = function (asset, loadContext, path, contents) {

	    var self = this;
	    this.loadAsyncResource(loadContext, path, contents, function (data) {
	        var pfr = new _PackReader.PackFileReader(data);

	        //Use a single large blocks to store all fragment elements
	        //TODO: perhaps have a FragList per pack file to keep block size down?
	        var frags = self.fragments = new _Fragments.FragList();
	        (0, _Fragments.readFragments)(pfr, frags, self.globalOffset, loadContext.placementTransform);
	        pfr = null;

	    });
	};

	Package.prototype.parseGeometryMetadata = function (asset, loadContext, path, contents) {
	    var self = this;
	    this.loadAsyncResource(loadContext, path, contents, function (data) {
	        var pfr = new _PackReader.PackFileReader(data);

	        self.geomMetadata = {};
	        (0, _Fragments.readGeometryMetadata)(pfr, self.geomMetadata);
	        self.numGeoms = self.geomMetadata.primCounts.length;
	    });
	};


	Package.prototype.parseInstanceTree = function (loadContext, path, contents, version) {

	    var that = this;

	    this.loadAsyncResource(loadContext, path, contents, function (data) {
	        var pfr = new _PackReader.PackFileReader(data);
	        that.instanceTransforms = (0, _Instances.readInstanceTree)(pfr, version);
	    });

	};


	Package.prototype.loadRemainingSvf = function (loadContext) {
	    var svf = this;

	    var unzip = this.unzip;

	    //var filenames = unzip.getFilenames();
	    this.manifest = loadContext.manifest;
	    var manifest = this.manifest;

	    var assets = manifest["assets"];

	    var metadataJson = unzip.decompress("metadata.json");
	    var jdr = new _InputStream.InputStream(metadataJson);

	    // Test to see if this is json (not a binary header)
	    // Done by verifying that there is no 0 (Hence ASCII)
	    if (metadataJson.byteLength > 3 && metadataJson[3] !== 0) {
	        this.metadata = JSON.parse(jdr.getString(metadataJson.byteLength)).metadata;

	        (0, _SvfPlacementUtils.initPlacement)(this, loadContext);
	    }

	    //Version strings seem to be variable at the moment.
	    //var manifestVersion = manifest["manifestversion"];
	    //if (   manifest["name"] != "LMV Manifest"
	    //    || manifest["manifestversion"] != 1)
	    //    return false;

	    this.packFileTotalSize = 0;
	    this.primitiveCount = 0;

	    var typesetsList = manifest["typesets"];
	    var typesets = {};
	    for (var i = 0; i < typesetsList.length; i++) {
	        var ts = typesetsList[i];
	        typesets[ts['id']] = ts['types'];
	    }

	    //Loop through the assets, and schedule non-embedded
	    //ones for later loading.
	    //TODO: currently only geometry pack files are stored for later
	    //load and other assets will be loaded by this worker thread before
	    //we return to the SvfLoader in the main thread.

	    for (var i = 0; i < assets.length; i++)
	    {
	        var asset = assets[i];
	        if ((0, _compat.isMobileDevice)() && asset.id === "Set.bin")
	        continue;
	        var type = asset["type"];
	        if (type.indexOf("Autodesk.CloudPlatform.") == 0)
	        type = type.substr(23);
	        var uri = asset["URI"];
	        var typeset = asset["typeset"] ? typesets[asset["typeset"]] : null;
	        var usize = asset["usize"] || 0;
	        var megaBytes = Math.round(usize / 1048576 * 100000) / 100000 | 0;

	        //If the asset is a geometry pack or property pack
	        //just remember it for later demand loading
	        if (uri.indexOf("embed:/") != 0) {
	            if (type == "PackFile") {
	                var typeclass = typeset ? typeset[0]["class"] : null;

	                if (typeclass == "Autodesk.CloudPlatform.Geometry") {

	                    this.packFileTotalSize += usize;

	                    this.geompacks.push({ id: asset["id"], uri: uri, usize: usize });
	                }
	            } else
	            if (type == "PropertyAttributes") {
	                this.propertydb.attrs.push(uri);
	            } else
	            if (type == "PropertyAVs") {
	                this.propertydb.avs.push(uri);
	            } else
	            if (type == "PropertyIDs") {
	                this.propertydb.ids.push(uri);
	            } else
	            if (type == "PropertyOffsets") {
	                this.propertydb.offsets.push(uri);
	            } else
	            if (type == "PropertyValues") {
	                this.propertydb.values.push(uri);
	            }
	        }

	        //parse assets which we will need immediately when
	        // setting up the scene (whether embedded or not)
	        var path = asset["URI"];
	        var contents = null; //if the data was in the zip, this will contain it
	        if (path.indexOf("embed:/") == 0) {
	            path = path.substr(7);
	            contents = unzip.decompress(path);
	        }

	        if (type == "ProteinMaterials") {
	            //For simple materials, we want the file named "Materials.json" and not "ProteinMaterials.json"
	            if (path.indexOf("Protein") == -1) {
	                this.loadAsyncResource(loadContext, path, contents, function (data) {
	                    var jdr = new _InputStream.InputStream(data);
	                    var byteLength = data.byteLength;
	                    if (0 < byteLength) {
	                        svf.materials = JSON.parse(jdr.getString(byteLength));
	                    } else {
	                        svf.materials = null;
	                    }
	                });
	            } else {
	                //Also parse the Protein materials -- at the moment this helps
	                //With some Prism materials that have properties we can handle, but
	                //are not in the Simple variant.
	                this.loadAsyncResource(loadContext, path, contents, function (data) {
	                    var jdr = new _InputStream.InputStream(data);
	                    var byteLength = data.byteLength;
	                    if (0 < byteLength) {
	                        svf.proteinMaterials = JSON.parse(jdr.getString(byteLength));
	                    } else {
	                        svf.proteinMaterials = null;
	                    }
	                });
	            }
	        } else
	        if (type == "FragmentList") {

	            this.parseFragmentList(asset, loadContext, path, contents);

	        } else
	        if (type == "GeometryMetadataList") {

	            this.parseGeometryMetadata(asset, loadContext, path, contents);

	        } else
	        if (type == "PackFile") {

	            if (path.indexOf("CameraDefinitions.bin") != -1) {
	                this.loadAsyncResource(loadContext, path, contents, function (data) {
	                    svf.camDefPack = new _PackReader.PackFileReader(data);
	                });
	            } else

	            if (path.indexOf("CameraList.bin") != -1) {
	                this.loadAsyncResource(loadContext, path, contents, function (data) {
	                    svf.camInstPack = new _PackReader.PackFileReader(data);
	                });
	            } else

	            if (path.indexOf("LightDefinitions.bin") != -1) {
	                this.loadAsyncResource(loadContext, path, contents, function (data) {
	                    svf.lightDefPack = new _PackReader.PackFileReader(data);
	                });
	            } else

	            if (path.indexOf("LightList.bin") != -1) {
	                this.loadAsyncResource(loadContext, path, contents, function (data) {
	                    svf.lightInstPack = new _PackReader.PackFileReader(data);
	                });
	            }
	        } else
	        if (type == "Animations") {
	            this.loadAsyncResource(loadContext, path, contents, function (data) {
	                var jdr = new _InputStream.InputStream(data);
	                var byteLength = data.byteLength;
	                if (0 < byteLength) {
	                    svf.animations = JSON.parse(jdr.getString(byteLength));

	                    (0, _SvfPlacementUtils.transformAnimations)(svf);
	                } else {
	                    svf.animations = null;
	                }
	            });
	        } else
	        if (type == "Topology") {

	            // save the path for later download.
	            svf.topologyPath = loadContext.basePath + path;
	            svf.topologySizeMB = megaBytes;

	        } else
	        if (loadContext.loadInstanceTree && (
	        type == "InstanceTree" || type == "InstanceTreeTree")) {//Yes, the typo does occur in some older files

	            //Instance tree node serialization version is stored in the type set
	            var version = typeset ? typeset[0]["version"] : 1;

	            this.parseInstanceTree(loadContext, path, contents, version);
	        }
	    }


	    if (this.pendingRequests == 0)
	    this.postLoad(loadContext);

	    delete this.unzip;
	};

	Package.prototype.addTransparencyFlagsToMaterials = function (mats) {
	    for (var id in mats) {
	        var mat = mats[id];
	        var userAssets = mat["userassets"];
	        var innerMats = mat["materials"];
	        var innerMat = innerMats[userAssets[0]];
	        mat.transparent = innerMat["transparent"];
	    }
	};

	Package.prototype.postLoadOfCam = function (loadContext) {

	    //Combine camera instances and camera definitions -- we need
	    //both to be loaded to get the camera list
	    if (this.camDefPack && this.camInstPack) {
	        for (var k = 0, kEnd = this.camInstPack.getEntryCounts(); k < kEnd; k++) {
	            var inst = (0, _Instances.readInstance)(this.camInstPack, k, this.placementTransform, this.globalOffset);
	            var cam = (0, _Cameras.readCameraDefinition)(this.camDefPack, inst);

	            //Apply any instance transform to get the camera to world space.
	            if (inst.transform) {
	                // Apply any transformations associated with the camera
	                // to put it into world space
	                inst.transform.transformPoint(cam.position);
	                inst.transform.transformPoint(cam.target);
	                inst.transform.transformDirection(cam.up);
	            }

	            // Fix camera's target if it is not inside the scene's bounding box.
	            var bbox = this.bbox;
	            if (bbox && !bbox.containsPoint(cam.target)) {
	                var distanceFromCenter = new _LmvVector.LmvVector3().copy(bbox.center()).distanceTo(cam.position);
	                var direction = new _LmvVector.LmvVector3().copy(cam.target).sub(cam.position).normalize().multiplyScalar(distanceFromCenter);
	                cam.target = new _LmvVector.LmvVector3().copy(cam.position).add(direction);
	            }

	            this.cameras.push(cam);
	        }

	        delete this.camDefPack;
	        delete this.camInstPack;
	    }

	};

	Package.prototype.postLoadOfLight = function (loadContext) {

	    //Lights need the same thing as the cameras
	    if (this.lightDefPack && this.lightInstPack) {
	        for (var k = 0, kEnd = this.lightInstPack.getEntryCounts(); k < kEnd; k++) {
	            var inst = (0, _Instances.readInstance)(this.lightInstPack, k, this.placementTransform, this.globalOffset);
	            this.lights.push((0, _Lights.readLightDefinition)(this.lightDefPack, inst.definition));
	        }

	        delete this.lightInstPack;
	        delete this.lightDefPack;
	    }

	};

	Package.prototype.postLoadOfFragments = function (loadContext) {

	    //Post processing step -- splice geometry metadata information
	    //into the fragments list, in case it was given separately
	    //TODO: consider keeping the geom metadata as is instead of splicing
	    //into the fragments, as it would be more efficient --
	    //but that would require special handling on the viewer side,
	    //changing the fragment filter code, etc.
	    var frags = this.fragments;

	    if (this.geomMetadata) {

	        //reusing the geomDataIndexes array to store
	        //polygon counts, now that we don't need the geomIndexes
	        //after this loop.
	        frags.polygonCounts = frags.geomDataIndexes;

	        var gm = this.geomMetadata;

	        // Holds the indexes to the topology data.
	        if (gm.topoIndexes != undefined) {
	            frags.topoIndexes = new Int32Array(frags.length);
	        }

	        for (var i = 0, iEnd = frags.length; i < iEnd; i++) {
	            var geomIndex = frags.geomDataIndexes[i];
	            frags.entityIndexes[i] = gm.entityIndexes[geomIndex];
	            frags.packIds[i] = gm.packIds[geomIndex];

	            frags.polygonCounts[i] = gm.primCounts[geomIndex];
	            this.primitiveCount += gm.primCounts[geomIndex];

	            // Fills in the indexes to the topology data.
	            if (gm.topoIndexes != undefined) {
	                frags.topoIndexes[i] = gm.topoIndexes[geomIndex];
	            }
	        }

	        frags.geomDataIndexes = null;

	        this.geomMetadata = null;
	    }

	    //Build a map from mesh to its referencing fragment(s)
	    //So that we can quickly find them once meshes begin loading
	    //incrementally. This requires the packIds and entityIndexes
	    //to be known per fragment, so it happens after geometry metadata
	    //is resolved above
	    this.calculateMesh2Frag(frags);

	    // Constrain the max number of PF files here, if not use packageless class
	    // Previously geom pack file uri are directly discarded when read from
	    // manifest, but with the on demand loading and paging enabled, it is expected
	    // to handle all the pack files.
	    // So, assume the packageless is used together with on demand loading enabled.
	    // ??? probably better to have another option to control whether need this or not.
	    if (this.max_pf_files > 0 && this.geompacks.length > this.max_pf_files) {
	        this.geompacks.splice(this.max_pf_files, this.geompacks.length - this.max_pf_files);
	    }
	};

	Package.prototype.calculateMesh2Frag = function (frags) {
	    var mesh2frag = frags.mesh2frag = {};
	    var packIds = frags.packIds;
	    var entityIndexes = frags.entityIndexes;

	    for (var i = 0, iEnd = frags.length; i < iEnd; i++) {
	        var meshid = packIds[i] + ":" + entityIndexes[i];

	        var meshRefs = mesh2frag[meshid];
	        if (meshRefs === undefined) {
	            //If it's the first fragments for this mesh,
	            //store the index directly -- most common case.
	            mesh2frag[meshid] = i;
	        } else
	        if (!Array.isArray(meshRefs)) {
	            //otherwise put the fragments that
	            //reference the mesh into an array
	            mesh2frag[meshid] = [meshRefs, i];
	        } else
	        {
	            //already is an array
	            meshRefs.push(i);
	        }
	    }
	};

	Package.prototype.postLoadOfBBox = function (loadContext) {

	    //if we don't know the overall scene bounds, compute them from the
	    //fragment boxes
	    if (!this.bbox || loadContext.placementTransform) {

	        if (this.bbox && loadContext.placementTransform)
	        this.modelBox = this.bbox;

	        var totalbox = [Infinity, Infinity, Infinity, -Infinity, -Infinity, -Infinity];
	        var frags = this.fragments;
	        var fragBoxes = frags.boxes;

	        for (var f = 0, fEnd = frags.length; f < fEnd; f++) {
	            var bboff = f * 6;
	            var i;
	            for (i = 0; i < 3; i++) {
	                if (fragBoxes[bboff + i] < totalbox[i])
	                totalbox[i] = fragBoxes[bboff + i];}

	            for (i = 3; i < 6; i++) {
	                if (fragBoxes[bboff + i] > totalbox[i])
	                totalbox[i] = fragBoxes[bboff + i];}
	        }

	        this.bbox = {
	            min: { x: totalbox[0], y: totalbox[1], z: totalbox[2] },
	            max: { x: totalbox[3], y: totalbox[4], z: totalbox[5] } };

	    }


	};

	Package.prototype.postLoadOfObjectIds = function (loadContext) {

	    // If object ids are specified, clean up pack file list by only keeping the packs that's
	    // we intended to load.
	    var ids = loadContext.objectIds;
	    if (ids != null) {
	        var packIds = [];
	        var fragIndexes = [];
	        // Pick out pack ids that referenced by fragments with specified db ids.
	        for (var i = 0; i < ids.length; ++i) {
	            for (var j = 0; j < this.fragments.length; ++j) {
	                if (this.fragments.fragId2dbId[j] == ids[i]) {
	                    packIds.push(this.fragments.packIds[j]);
	                    fragIndexes.push(j);
	                }
	            }
	        }

	        // Two fragments could reference same pack file, so packIds may contain duplicates.
	        // Remove any duplicates here.
	        var end = 1,n = packIds.length; // end is the length of reduced array.
	        for (var i = 1; i < n;) {
	            while (i < n && packIds[i] == packIds[i - 1]) {
	                ++i;}
	            if (n == i)
	            break;
	            packIds[end++] = packIds[i++];
	        }
	        packIds.splice(end - 1, n - end);

	        // Reduce pack files based on selected pack ids.
	        var packs = [];
	        for (var i = 0; i < this.geompacks.length; ++i) {
	            for (var j = 0; j < packIds.length; ++j) {
	                // LMVTK pre-2.0 release uses integers for pack file id.
	                // LMVTK 2.0 release uses integer + .pf as id.
	                // We just drop the suffix here as we did in SVFLoader.
	                // More info: https://git.autodesk.com/A360/LMVTK/commit/68b8c07a643a7ac39ecd5651d031d170e3a325be
	                if (parseInt(this.geompacks[i].id) == packIds[j])
	                packs.push(this.geompacks[i]);
	            }
	        }
	        this.geompacks = packs;

	        var bb = (0, _Fragments.filterFragments)(this.fragments, fragIndexes);
	        this.bbox = {
	            min: { x: bb[0], y: bb[1], z: bb[2] },
	            max: { x: bb[3], y: bb[4], z: bb[5] } };

	    }

	};

	Package.prototype.postLoadComplete = function (loadContext) {

	    loadContext.loadDoneCB("svf");

	    if (this.fragments.polygonCounts) {
	        //Build the R-Tree
	        var t0 = performance.now();
	        var mats = this.materials ? this.materials["materials"] : null;
	        if (mats)
	        this.addTransparencyFlagsToMaterials(mats);
	        this.bvh = new _BVHBuilder.BVHBuilder(this.fragments, mats);
	        this.bvh.build(loadContext.bvhOptions);
	        var t1 = performance.now();
	        loadContext.worker.debug("BVH build time (worker thread):" + (t1 - t0));

	        // In normal mode, just post back BVH as svf is already posted back earlier.
	        loadContext.loadDoneCB("bvh");
	    }

	    loadContext.loadDoneCB("done");
	};

	Package.prototype.postLoad = function (loadContext) {

	    this.postLoadOfCam(loadContext);

	    this.postLoadOfLight(loadContext);

	    this.postLoadOfFragments(loadContext);

	    this.postLoadOfBBox(loadContext);

	    this.postLoadOfObjectIds(loadContext);

	    this.postLoadComplete(loadContext);
	};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.




































	NodeArray = NodeArray;exports.















































































































































































































































































































































































































































































































































































































































































































































































































































	BVHBuilder = BVHBuilder; /**
	                          * BVH definitions:
	                          *
	                          * BVH Node: if this was C (the only real programming language), it would go something like this,
	                          * but with better alignment.
	                          *
	                          * This is definition for "fat" nodes (for rasterization),
	                          * i.e. when inner nodes also contain primitives.
	                          * struct Node {                                                            byte/short/int offset
	                          *      float worldBox[6]; //world box of the node node                         0/0/0
	                          *      int leftChildIndex; //pointer to left child node (right is left+1)     24/12/6
	                          *      ushort primCount; //how many fragments are at this node                28/14/7
	                          *      ushort flags; //bitfield of good stuff                                 30/15/7.5
	                          *
	                          *      int primStart; //start of node's own primitives (fragments) list       32/16/8
	                          * };
	                          * => sizeof(Node) = 36 bytes
	                         
	                          * Definition for lean nodes (for ray casting): when a node is either inner node (just children, no primitives)
	                          * or leaf (just primitives, no children).
	                          * struct Node {
	                          *      float worldBox[6]; //world box of the node
	                          *      union {
	                          *          int leftChildIndex; //pointer to left child node (right is left+1)
	                          *          int primStart; //start of node's own primitives (fragments) list
	                          *      };
	                          *      ushort primCount; //how many fragments are at this node
	                          *      ushort flags; //bitfield of good stuff
	                          * };
	                          * => sizeof(Node) = 32 bytes
	                          *
	                          * The class below encapsulates an array of such nodes using ArrayBuffer as backing store.
	                          *
	                          * @param {ArrayBuffer|number} initialData  Initial content of the NodeArray, or initial allocation of empty nodes
	                          * @param {boolean} useLeanNode Use minimal node structure size. Currently this parameter must be set to false.
	                          * @constructor
	                          */function NodeArray(initialData, useLeanNode) {'use strict';if (useLeanNode) {this.bytes_per_node = 32;} else {this.bytes_per_node = 36;}var initialCount;var initialBuffer;if (initialData instanceof ArrayBuffer) {initialCount = initialData.byteLength / this.bytes_per_node;initialBuffer = initialData;this.nodeCount = initialCount;} else {initialCount = initialData | 0;initialBuffer = new ArrayBuffer(this.bytes_per_node * initialCount);this.nodeCount = 0;}this.nodeCapacity = initialCount;this.nodesRaw = initialBuffer;this.is_lean_node = useLeanNode;this.node_stride = this.bytes_per_node / 4;this.node_stride_short = this.bytes_per_node / 2; //Allocate memory buffer for all tree nodes
	    this.nodesF = new Float32Array(this.nodesRaw);this.nodesI = new Int32Array(this.nodesRaw);this.nodesS = new Uint16Array(this.nodesRaw);}NodeArray.prototype.setLeftChild = function (nodeidx, childidx) {this.nodesI[nodeidx * this.node_stride + 6] = childidx;};NodeArray.prototype.getLeftChild = function (nodeidx) {return this.nodesI[nodeidx * this.node_stride + 6];};NodeArray.prototype.setPrimStart = function (nodeidx, start) {if (this.is_lean_node) this.nodesI[nodeidx * this.node_stride + 6] = start;else this.nodesI[nodeidx * this.node_stride + 8] = start;};NodeArray.prototype.getPrimStart = function (nodeidx) {if (this.is_lean_node) return this.nodesI[nodeidx * this.node_stride + 6];else return this.nodesI[nodeidx * this.node_stride + 8];};NodeArray.prototype.setPrimCount = function (nodeidx, count) {this.nodesS[nodeidx * this.node_stride_short + 14] = count;};NodeArray.prototype.getPrimCount = function (nodeidx) {return this.nodesS[nodeidx * this.node_stride_short + 14];};NodeArray.prototype.setFlags = function (nodeidx, axis, isFirst, isTransparent) {this.nodesS[nodeidx * this.node_stride_short + 15] = isTransparent << 3 | isFirst << 2 | axis & 0x3;};NodeArray.prototype.getFlags = function (nodeidx) {return this.nodesS[nodeidx * this.node_stride_short + 15];};NodeArray.prototype.setBox0 = function (nodeidx, src) {var off = nodeidx * this.node_stride;var dst = this.nodesF;dst[off] = src[0];dst[off + 1] = src[1];dst[off + 2] = src[2];dst[off + 3] = src[3];dst[off + 4] = src[4];dst[off + 5] = src[5];};NodeArray.prototype.getBoxThree = function (nodeidx, dst) {var off = nodeidx * this.node_stride;var src = this.nodesF;dst.min.x = src[off];dst.min.y = src[off + 1];dst.min.z = src[off + 2];dst.max.x = src[off + 3];dst.max.y = src[off + 4];dst.max.z = src[off + 5];};NodeArray.prototype.getBoxArray = function (nodeidx, dst, offset) {var off = nodeidx * this.node_stride;var src = this.nodesF;offset = offset || 0;dst[0 + offset] = src[off];dst[1 + offset] = src[off + 1];dst[2 + offset] = src[off + 2];dst[3 + offset] = src[off + 3];dst[4 + offset] = src[off + 4];dst[5 + offset] = src[off + 5];};NodeArray.prototype.setBoxThree = function (nodeidx, src) {var off = nodeidx * this.node_stride;var dst = this.nodesF;dst[off] = src.min.x;dst[off + 1] = src.min.y;dst[off + 2] = src.min.z;dst[off + 3] = src.max.x;dst[off + 4] = src.max.y;dst[off + 5] = src.max.z;};NodeArray.prototype.makeEmpty = function (nodeidx) {var off = nodeidx * this.node_stride;var dst = this.nodesI; //No point to makeEmpty here, because the box gets set
	    //directly when the node is initialized in bvh_subdivide.
	    //box_make_empty(this.nodesF, off);
	    //_this.setLeftChild(nodeidx,-1);
	    dst[off + 6] = -1; //both prim count and flags to 0
	    dst[off + 7] = 0; //_this.setPrimStart(nodeidx, -1);
	    if (!this.is_lean_node) dst[off + 8] = -1;};NodeArray.prototype.realloc = function (extraSize) {if (this.nodeCount + extraSize > this.nodeCapacity) {var nsz = 0 | this.nodeCapacity * 3 / 2;if (nsz < this.nodeCount + extraSize) nsz = this.nodeCount + extraSize;var nnodes = new ArrayBuffer(nsz * this.bytes_per_node);var nnodesI = new Int32Array(nnodes);nnodesI.set(this.nodesI);this.nodeCapacity = nsz;this.nodesRaw = nnodes;this.nodesF = new Float32Array(nnodes);this.nodesI = nnodesI;this.nodesS = new Uint16Array(nnodes);}};NodeArray.prototype.nextNodes = function (howMany) {this.realloc(howMany);var res = this.nodeCount;this.nodeCount += howMany;for (var i = 0; i < howMany; i++) {this.makeEmpty(res + i);}return res;};NodeArray.prototype.getRawData = function () {return this.nodesRaw.slice(0, this.nodeCount * this.bytes_per_node);};var POINT_STRIDE = 3;var BOX_EPSILON = 1e-5;var BOX_SCALE_EPSILON = 1e-5;var MAX_DEPTH = 15; /* max tree depth */var MAX_BINS = 16; /**
	ounding Volume Hierarchy build algorithm.
	ses top down binning -- see "On fast Construction of SAH-based Bounding Volume Hierarchies" by I.Wald
	orted from the C version here: https://git.autodesk.com/stanevt/t-ray/blob/master/render3d/t-ray/t-core/t-bvh.c
	ptimized for JavaScript.
	var BVHModule = function () {//There be dragons in this closure.
	    "use strict"; /**
	                   * Utilities for manipulating bounding boxes stored
	                   * in external array (as sextuplets of float32)
	                   */function box_get_centroid(dst, dst_off, src, src_off) {dst[dst_off] = 0.5 * (src[src_off] + src[src_off + 3]);dst[dst_off + 1] = 0.5 * (src[src_off + 1] + src[src_off + 4]);dst[dst_off + 2] = 0.5 * (src[src_off + 2] + src[src_off + 5]);}function box_add_point_0(dst, src, src_off) {if (dst[0] > src[src_off]) dst[0] = src[src_off];if (dst[3] < src[src_off]) dst[3] = src[src_off];if (dst[1] > src[src_off + 1]) dst[1] = src[src_off + 1];if (dst[4] < src[src_off + 1]) dst[4] = src[src_off + 1];if (dst[2] > src[src_off + 2]) dst[2] = src[src_off + 2];if (dst[5] < src[src_off + 2]) dst[5] = src[src_off + 2];}function box_add_box_0(dst, src, src_off) {if (dst[0] > src[src_off]) dst[0] = src[src_off];if (dst[1] > src[src_off + 1]) dst[1] = src[src_off + 1];if (dst[2] > src[src_off + 2]) dst[2] = src[src_off + 2];if (dst[3] < src[src_off + 3]) dst[3] = src[src_off + 3];if (dst[4] < src[src_off + 4]) dst[4] = src[src_off + 4];if (dst[5] < src[src_off + 5]) dst[5] = src[src_off + 5];}function box_add_box_00(dst, src) {if (dst[0] > src[0]) dst[0] = src[0];if (dst[1] > src[1]) dst[1] = src[1];if (dst[2] > src[2]) dst[2] = src[2];if (dst[3] < src[3]) dst[3] = src[3];if (dst[4] < src[4]) dst[4] = src[4];if (dst[5] < src[5]) dst[5] = src[5];}function box_get_size(dst, dst_off, src, src_off) {for (var i = 0; i < 3; i++) {dst[dst_off + i] = src[src_off + 3 + i] - src[src_off + i];}} //function box_copy(dst, dst_off, src, src_off) {
	    //    for (var i=0; i<6; i++) {
	    //        dst[dst_off+i] = src[src_off+i];
	    //    }
	    //}
	    // unwound version of box_copy
	    function box_copy_00(dst, src) {dst[0] = src[0];dst[1] = src[1];dst[2] = src[2];dst[3] = src[3];dst[4] = src[4];dst[5] = src[5];}var dbl_max = Infinity; //function box_make_empty(dst, dst_off) {
	    //        dst[dst_off]   =  dbl_max;
	    //        dst[dst_off+1] =  dbl_max;
	    //        dst[dst_off+2] =  dbl_max;
	    //        dst[dst_off+3] = -dbl_max;
	    //        dst[dst_off+4] = -dbl_max;
	    //        dst[dst_off+5] = -dbl_max;
	    //}
	    function box_make_empty_0(dst) {dst[0] = dbl_max;dst[1] = dbl_max;dst[2] = dbl_max;dst[3] = -dbl_max;dst[4] = -dbl_max;dst[5] = -dbl_max;}function box_area(src, src_off) {var dx = src[src_off + 3] - src[src_off];var dy = src[src_off + 4] - src[src_off + 1];var dz = src[src_off + 5] - src[src_off + 2];if (dx < 0 || dy < 0 || dz < 0) return 0;return 2.0 * (dx * dy + dy * dz + dz * dx);}function box_area_0(src) {var dx = src[3] - src[0];var dy = src[4] - src[1];var dz = src[5] - src[2];if (dx < 0 || dy < 0 || dz < 0) return 0;return 2.0 * (dx * dy + dy * dz + dz * dx);}function bvh_split_info() {this.vb_left = new Float32Array(6);this.vb_right = new Float32Array(6);this.cb_left = new Float32Array(6);this.cb_right = new Float32Array(6);this.num_left = 0;this.best_split = -1;this.best_cost = -1;this.num_bins = -1;}bvh_split_info.prototype.reset = function () {this.num_left = 0;this.best_split = -1;this.best_cost = -1;this.num_bins = -1;};function bvh_bin() {this.box_bbox = new Float32Array(6); // bbox of all primitive bboxes
	        this.box_centroid = new Float32Array(6); // bbox of all primitive centroids
	        this.num_prims = 0; // number of primitives in the bin
	    }bvh_bin.prototype.reset = function () {this.num_prims = 0; // number of primitives in the bin
	        box_make_empty_0(this.box_bbox);box_make_empty_0(this.box_centroid);};function accum_bin_info() {this.BL = new Float32Array(6);this.CL = new Float32Array(6);this.NL = 0;this.AL = 0;}accum_bin_info.prototype.reset = function () {this.NL = 0;this.AL = 0;box_make_empty_0(this.BL);box_make_empty_0(this.CL);}; //Scratch variables used by bvh_bin_axis
	    //TODO: can be replaced by a flat ArrayBuffer
	    var bins = [];var i;for (i = 0; i < MAX_BINS; i++) {bins.push(new bvh_bin());} //TODO: can be replaced by a flat ArrayBuffer
	    var ai = [];for (i = 0; i < MAX_BINS - 1; i++) {ai.push(new accum_bin_info());}var BR = new Float32Array(6);var CR = new Float32Array(6);function assign_bins(bvh, start, end, axis, cb, cbdiag, num_bins) {var centroids = bvh.centroids;var primitives = bvh.primitives;var boxes = bvh.finfo.boxes;var boxStride = bvh.finfo.boxStride; /* bin assignment */var k1 = num_bins * (1.0 - BOX_SCALE_EPSILON) / cbdiag[axis];var cbaxis = cb[axis];var sp = bvh.sort_prims;for (var j = start; j <= end; j++) {/* map array index to primitive index -- since primitive index array gets reordered by the BVH build*/ /* while the primitive info array is not reordered */var iprim = primitives[j] | 0;var fpbin = k1 * (centroids[iprim * 3 /*POINT_STRIDE*/ + axis] - cbaxis);var binid = fpbin | 0; //Truncate to int is algorithmic -> not an optimization thing!
	            /* possible floating point problems */if (binid < 0) {binid = 0; //debug("Bin index out of range " + fpbin);
	            } else if (binid >= num_bins) {binid = num_bins - 1; //debug("Bin index out of range. " + fpbin);
	            } /* Store the bin index for the partitioning step, so we don't recompute it there */sp[j] = binid; /* update other bin data with the new primitive */ //var bin = bins[binid];
	            bins[binid].num_prims++;box_add_box_0(bins[binid].box_bbox, boxes, iprim * boxStride);box_add_point_0(bins[binid].box_centroid, centroids, iprim * 3 /*POINT_STRIDE*/);} /* at this point all primitves are assigned to a bin */}function bvh_bin_axis(bvh, start, end, axis, cb, cbdiag, split_info) {/* if size is near 0 on this axis, cost of split is infinite */if (cbdiag[axis] < bvh.scene_epsilon) {split_info.best_cost = Infinity;return;}var num_bins = MAX_BINS;if (num_bins > end - start + 1) num_bins = end - start + 1;var i;for (i = 0; i < num_bins; i++) {bins[i].reset();}for (i = 0; i < num_bins - 1; i++) {ai[i].reset();}split_info.num_bins = num_bins;assign_bins(bvh, start, end, axis, cb, cbdiag, num_bins); /* now do the accumulation sweep from left to right */box_copy_00(ai[0].BL, bins[0].box_bbox);box_copy_00(ai[0].CL, bins[0].box_centroid);ai[0].AL = box_area_0(ai[0].BL);ai[0].NL = bins[0].num_prims;var bin;for (i = 1; i < num_bins - 1; i++) {bin = bins[i];var aii = ai[i];box_copy_00(aii.BL, ai[i - 1].BL);box_add_box_00(aii.BL, bin.box_bbox);aii.AL = box_area_0(aii.BL);box_copy_00(aii.CL, ai[i - 1].CL);box_add_box_00(aii.CL, bin.box_centroid);aii.NL = ai[i - 1].NL + bin.num_prims;} /* sweep from right to left, keeping track of lowest cost and split */i = num_bins - 1;box_copy_00(BR, bins[i].box_bbox);box_copy_00(CR, bins[i].box_centroid);var AR = box_area_0(BR);var NR = bins[i].num_prims;var best_split = i;var best_cost = AR * NR + ai[i - 1].AL * ai[i - 1].NL;box_copy_00(split_info.vb_right, BR);box_copy_00(split_info.cb_right, bins[i].box_centroid);box_copy_00(split_info.vb_left, ai[i - 1].BL);box_copy_00(split_info.cb_left, ai[i - 1].CL);split_info.num_left = ai[i - 1].NL;for (i = i - 1; i >= 1; i--) {bin = bins[i];box_add_box_00(BR, bin.box_bbox);box_add_box_00(CR, bin.box_centroid);AR = box_area_0(BR);NR += bin.num_prims;var cur_cost = AR * NR + ai[i - 1].AL * ai[i - 1].NL;if (cur_cost <= best_cost) {best_cost = cur_cost;best_split = i;box_copy_00(split_info.vb_right, BR);box_copy_00(split_info.cb_right, CR);box_copy_00(split_info.vb_left, ai[i - 1].BL);box_copy_00(split_info.cb_left, ai[i - 1].CL);split_info.num_left = ai[i - 1].NL;}}split_info.best_split = best_split;split_info.best_cost = best_cost;}function bvh_partition(bvh, start, end, axis, cb, cbdiag, split_info) {//At this point, the original algorithm does an in-place NON-STABLE partition
	        //to move primitives to the left and right sides of the split plane
	        //into contiguous location of the primitives list for use by
	        //the child nodes. But, we want to preserve the ordering by size
	        //without having to do another sort, so we have to use
	        //a temporary storage location to copy into. We place right-side primitives
	        //in temporary storage, then copy back into the original storage in the right order.
	        //Left-side primitives are still put directly into the destination location.
	        var primitives = bvh.primitives; //var centroids = bvh.centroids;
	        var i, j; //sort_prims contains bin indices computed during the split step.
	        //Here we read those and also use sort_prims as temporary holding
	        //of primitive indices. Hopefully the read happens before the write. :)
	        //In C it was cheap enough to compute this again...
	        //var k1 = split_info.num_bins * (1.0 - BOX_SCALE_EPSILON) / cbdiag[axis];
	        //var cbaxis = cb[axis];
	        var sp = bvh.sort_prims;var right = 0;var left = start | 0;var best_split = split_info.best_split | 0;for (i = start; i <= end; i++) {var iprim = primitives[i] | 0; //var fpbin = (k1 * (centroids[3/*POINT_STRIDE*/ * iprim + axis] - cbaxis));
	            var binid = sp[i]; /* fpbin|0; */if (binid < best_split) {primitives[left++] = iprim;} else {sp[right++] = iprim;}} //if ((left-start) != split_info.num_left)
	        //    debug("Mismatch between binning and partitioning.");
	        //Copy back the right-side primitives into main primitives array, while
	        //maintaining order
	        for (j = 0; j < right; j++) {primitives[left + j] = sp[j];} /* at this point the binning is complete and we have computed a split */}function bvh_fatten_inner_node(bvh, nodes, nodeidx, start, end, cb, cbdiag, poly_cut_off) {var primitives = bvh.primitives;var centroids = bvh.centroids; //Take the first few items to place into the inner node,
	        //but do not go over the max item or polygon count.
	        var prim_count = end - start + 1;if (prim_count > bvh.frags_per_inner_node) prim_count = bvh.frags_per_inner_node;if (prim_count > poly_cut_off) prim_count = poly_cut_off;nodes.setPrimStart(nodeidx, start);nodes.setPrimCount(nodeidx, prim_count);start += prim_count; //Because we take some primitives off the input, we have to recompute
	        //the bounding box used for computing the node split.
	        box_make_empty_0(cb);for (var i = start; i <= end; i++) {box_add_point_0(cb, centroids, 3 /*POINT_STRIDE*/ * primitives[i]);} //Also update the split axis -- it could possibly change too.
	        box_get_size(cbdiag, 0, cb, 0); //Decide which axis to split on. Done purely by longest.
	        var axis = 0;if (cbdiag[1] > cbdiag[0]) axis = 1;if (cbdiag[2] > cbdiag[axis]) axis = 2;return axis;}var cbdiag = new Float32Array(3); //scratch variable used in bvh_subdivide
	    function bvh_subdivide(bvh, nodeidx, /* current parent node to consider splitting */start, end, /* primitive sub-range to be considered at this recursion step */vb, /* bounding volume of the primitives' bounds in the sub-range */cb, /* bounding box of primitive centroids in this range */transparent, /* does the node contain opaque or transparent objects */depth /* recursion depth */) {box_get_size(cbdiag, 0, cb, 0);var nodes = bvh.nodes;var frags_per_leaf = transparent ? bvh.frags_per_leaf_node_transparent : bvh.frags_per_leaf_node;var frags_per_inner = transparent ? bvh.frags_per_inner_node_transparent : bvh.frags_per_inner_node;var polys_per_node = bvh.max_polys_per_node; //Decide which axis to split on.
	        var axis = 0;if (cbdiag[1] > cbdiag[0]) axis = 1;if (cbdiag[2] > cbdiag[axis]) axis = 2; //Whether the node gets split or not, it gets
	        //the same overall bounding box.
	        nodes.setBox0(nodeidx, vb); //Check the expected polygon count of the node. This figures out the maximum number of fragments
	        // we can put at the node as determined by polys_per_node
	        var poly_count = 0;var poly_cut_off = 0;var prim_count = end - start + 1; // If we have the number of triangles in each mesh, limit the number of primitives in an inner node.
	        if (bvh.finfo.hasPolygonCounts && bvh.frags_per_inner_node) {// Walk through primitives, add up the counts until we reach polys_per_node (10000), or run through
	            // frags_per_inner_node (usually 32).
	            // We know that later on we'll limit the number to frags_per_inner_node, so also do it here.
	            var shorten_end = prim_count <= bvh.frags_per_inner_node ? end : start + bvh.frags_per_inner_node - 1;for (var i = start; i <= shorten_end; i++) {poly_count += bvh.finfo.getPolygonCount(bvh.primitives[i]);poly_cut_off++;if (poly_count > polys_per_node) break;}}var isSmall = prim_count <= frags_per_leaf && poly_count < polys_per_node || prim_count === 1; //Decide whether to terminate recursion
	        if (isSmall || depth > MAX_DEPTH || //max recursion depth
	        cbdiag[axis] < bvh.scene_epsilon) //node would be way too tiny for math to make sense (a point)
	            {nodes.setLeftChild(nodeidx, -1);nodes.setPrimStart(nodeidx, start);nodes.setPrimCount(nodeidx, end - start + 1);nodes.setFlags(nodeidx, 0, 0, transparent ? 1 : 0);return;} //Pick the largest (first) primitives to live in this node
	        //NOTE: this assumes primitives are sorted by size.
	        //NOTE: This step is an optional departure from the original, and we also do a check for it above
	        // to compute poly_cut_off.
	        if (frags_per_inner) {axis = bvh_fatten_inner_node(bvh, nodes, nodeidx, start, end, cb, cbdiag, poly_cut_off);start = start + nodes.getPrimCount(nodeidx);}var split_info = new bvh_split_info(); //Do the binning of the remaining primitives to go into child nodes
	        bvh_bin_axis(bvh, start, end, axis, cb, cbdiag, split_info);if (split_info.num_bins < 0) {//Split was too costly, so add all objects to the current node and bail
	            nodes.setPrimCount(nodeidx, nodes.getPrimCount(nodeidx) + end - start + 1);return;}bvh_partition(bvh, start, end, axis, cb, cbdiag, split_info);var child_idx = nodes.nextNodes(2); /* set info about split into the node */var cleft = (split_info.vb_left[3 + axis] + split_info.vb_left[axis]) * 0.5;var cright = (split_info.vb_right[3 + axis] + split_info.vb_right[axis]) * 0.5;nodes.setFlags(nodeidx, axis, cleft < cright ? 0 : 1, transparent ? 1 : 0);nodes.setLeftChild(nodeidx, child_idx); /* validate split */ /*
	if (true) {
	for (var i=start; i< start+num_left; i++)
	{
	int binid = (int)(k1 * (info->prim_info[info->bvh->iprims[i]].centroid.v[axis] - cb->min.v[axis]));
	var cen = primitives[i] * POINT_STRIDE;
	if (   centroids[cen] < split_info.cb_left[0]
	|| centroids[cen] > split_info.cb_left[3]
	|| centroids[cen+1] < split_info.cb_left[1]
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       || centroids[cen+1] > split_info.cb_left[4]
	|| centroids[cen+2] < split_info.cb_left[2]
	|| centroids[cen+2] > split_info.cb_left[5])
	{
	debug ("wrong centroid box");
	}
	}
	for (i=start+num_left; i<=end; i++)
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               {
	int binid = (int)(k1 * (info->prim_info[info->bvh->iprims[i]].centroid.v[axis] - cb->min.v[axis]));
	var cen = primitives[i] * POINT_STRIDE;
	if (   centroids[cen] < split_info.cb_right[0]
	|| centroids[cen] > split_info.cb_right[3]
	|| centroids[cen+1] < split_info.cb_right[1]
	|| centroids[cen+1] > split_info.cb_right[4]
	|| centroids[cen+2] < split_info.cb_right[2]
	|| centroids[cen+2] > split_info.cb_right[5])
	{
	debug ("wrong centroid box");
	}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               }
	}
	recurse */ //bvh_subdivide(bvh, child_idx, start, start + split_info.num_left - 1, split_info.vb_left, split_info.cb_left, transparent, depth+1);
	        //bvh_subdivide(bvh, child_idx + 1, start + split_info.num_left, end, split_info.vb_right, split_info.cb_right, transparent, depth+1);
	        //Iterative stack-based recursion for easier profiling
	        bvh.recursion_stack.push([bvh, child_idx + 1, start + split_info.num_left, end, split_info.vb_right, split_info.cb_right, transparent, depth + 1]);bvh.recursion_stack.push([bvh, child_idx, start, start + split_info.num_left - 1, split_info.vb_left, split_info.cb_left, transparent, depth + 1]);}function compute_boxes(bvh) {var boxv_o = bvh.boxv_o;var boxc_o = bvh.boxc_o;var boxv_t = bvh.boxv_t;var boxc_t = bvh.boxc_t;box_make_empty_0(boxv_o);box_make_empty_0(boxc_o);box_make_empty_0(boxv_t);box_make_empty_0(boxc_t);var c = bvh.centroids;var b = bvh.finfo.boxes;var boxStride = bvh.finfo.boxStride;for (var i = 0, iEnd = bvh.prim_count; i < iEnd; i++) {// find which primitive in the sorted list to use next
	            var p = bvh.primitives[i];box_get_centroid(c, 3 /*POINT_STRIDE*/ * p, b, boxStride * p);if (i >= bvh.first_transparent) {box_add_point_0(boxc_t, c, 3 /*POINT_STRIDE*/ * p);box_add_box_0(boxv_t, b, boxStride * p);} else {box_add_point_0(boxc_o, c, 3 /*POINT_STRIDE*/ * p);box_add_box_0(boxv_o, b, boxStride * p);}}box_get_size(cbdiag, 0, bvh.boxv_o, 0);var maxsz = Math.max(cbdiag[0], cbdiag[1], cbdiag[2]);bvh.scene_epsilon = BOX_EPSILON * maxsz;} //Module exports
	    return { bvh_subdivide: bvh_subdivide, compute_boxes: compute_boxes, box_area: box_area };}();function FragInfo(fragments, materialDefs) {//Invariants
	    this.boxes = fragments.boxes; //Array of Float32, each bbox is a sextuplet
	    this.polygonCounts = fragments.polygonCounts;this.hasPolygonCounts = !!this.polygonCounts;this.materials = fragments.materials; //material indices (we need to know which fragments are transparent)
	    this.materialDefs = materialDefs;this.count = fragments.length;this.boxStride = 6;this.wantSort = true;}FragInfo.prototype.getCount = function () {return this.count;};FragInfo.prototype.isTransparent = function (i) {return this.materialDefs && this.materialDefs[this.materials[i]] ? this.materialDefs[this.materials[i]].transparent : false;};FragInfo.prototype.getPolygonCount = function (i) {return this.polygonCounts[i];}; /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                              * Given a list of LMV fragments, builds a spatial index for view-dependent traversal and hit testing.
	                                                                                                                                                                                                                                                                                                                                                                                                                                              * @constructor
	                                                                                                                                                                                                                                                                                                                                                                                                                                              */function BVHBuilder(fragments, materialDefs, finfo) {//Initialize the inputs (bboxes, transparent flags, polygon counts)
	    this.finfo = finfo || new FragInfo(fragments, materialDefs);this.prim_count = this.finfo.getCount(); //To be initialized by build() function based on build options
	    this.frags_per_leaf_node = -1;this.frags_per_inner_node = -1;this.nodes = null;this.work_buf = new ArrayBuffer(this.prim_count * 4);this.sort_prims = new Int32Array(this.work_buf); //Allocate memory buffer for re-ordered fragment primitive indices,
	    //which will be sorted by node ownership and point to the index
	    //of the fragment data.
	    this.primitives = new Int32Array(this.prim_count); //The BVH split algorithm works based on centroids of the bboxes.
	    this.centroids = new Float32Array(POINT_STRIDE * this.prim_count); //BBoxes and centroid bboxes for opaque and transparent primitive sets
	    this.boxv_o = new Float32Array(6);this.boxc_o = new Float32Array(6);this.boxv_t = new Float32Array(6);this.boxc_t = new Float32Array(6);this.recursion_stack = [];}BVHBuilder.prototype.sortPrimitives = function (wantSort) {var prim_sizes = new Float32Array(this.work_buf);var primitives = this.primitives;var numTransparent = 0; //Sort the input objects by size
	    //We assume all LMV SVF files come
	    //sorted by draw priority already, so in theory we can skip this step.
	    //This turns out to not be the case - some fragments are badly sorted.
	    //Part of the reason may be that the surface area of the geometry itself,
	    //not its bounding box, is used to sort by physical size in LMVTK.
	    //In any case, the transparent objects do not always come last (bug in LMVTK?),
	    //so we still have to pull them out to the end of the list, so some sorting
	    //takes place no matter how this value is set.
	    // Turning this option on will mean that the BVH building process as a whole
	    // will be 45% to 75% longer, for large models - full sorting takes awhile.
	    // In absolute terms this is an increase of a maximum of 1.15 seconds for a
	    // very large model (one with over 1 million fragments, i.e., mesh instances).
	    // This cost may be acceptable. For smaller models - "only" 70K instances -
	    // the cost is 0.05 seconds. For 130k instances, 0.1 seconds. The rise is
	    // slightly more than linear, but not excessively slow. I think it's acceptable,
	    // given that the cost is still much less than loading even a small part of the
	    // model.
	    var doSort = wantSort; // console.log("BVH sort is " + WANT_SORT);
	    var i, iEnd;for (i = 0, iEnd = this.prim_count; i < iEnd; i++) {//Start with trivial 1:1 order of the indices array
	        primitives[i] = i;var transparent = this.finfo.isTransparent(i);if (transparent) numTransparent++;if (doSort) {prim_sizes[i] = BVHModule.box_area(this.finfo.boxes, this.finfo.boxStride * i); //In order to make transparent objects appear last,
	            //we give them a negative size, so that they are naturally
	            //sorted last in the sort by size.
	            if (transparent) prim_sizes[i] = -prim_sizes[i];} else {//We still need the transparency flag for the loop below
	            //where we find the last opaque item, but we can
	            //short-cut the size computation.
	            prim_sizes[i] = transparent ? -1 : 1;}}if (doSort) {Array.prototype.sort.call(this.primitives, function (a, b) {return prim_sizes[b] - prim_sizes[a];});} else {if (numTransparent && numTransparent < this.prim_count) {var tmpTransparent = new Int32Array(numTransparent);var oidx = 0,tidx = 0;for (i = 0, iEnd = this.prim_count; i < iEnd; i++) {if (prim_sizes[i] >= 0) primitives[oidx++] = primitives[i];else tmpTransparent[tidx++] = primitives[i];}primitives.set(tmpTransparent, this.prim_count - numTransparent);}}this.first_transparent = this.prim_count - numTransparent;};BVHBuilder.prototype.build = function (options) {//Kick off the BVH build.
	    var useSlimNodes = options && !!options.useSlimNodes;var self = this;function assign_option(name, defaultVal) {if (options.hasOwnProperty(name)) self[name] = options[name];else self[name] = defaultVal;} // note: frags_per_leaf_node does *not* make an upper limit for the number of frags per node.
	    //options for build optimized for rasterization renderer scenes
	    if (useSlimNodes) {assign_option("frags_per_leaf_node", 1);assign_option("frags_per_inner_node", 0);assign_option("frags_per_leaf_node_transparent", 1);assign_option("frags_per_inner_node_transparent", 0);assign_option("max_polys_per_node", Infinity);} else {var multiplier = options.isWeakDevice ? 0.5 : 1.0; //TODO: tune these constants
	        assign_option("frags_per_leaf_node", 0 | 32 * multiplier); //Placing fragments at inner nodes places more emphasis on bigger objects during tree traversal
	        //but it can only be done for opaque objects. Transparent objects have to be strictly back to front
	        //traversal regardless of size, unless a unified traversal
	        assign_option("frags_per_inner_node", 0 | this.frags_per_leaf_node);assign_option("frags_per_leaf_node_transparent", this.frags_per_leaf_node);assign_option("frags_per_inner_node_transparent", 0);assign_option("max_polys_per_node", 0 | 10000 * multiplier);} //Reuse existing node array if there
	    if (this.nodes && this.nodes.is_lean_node == useSlimNodes) this.nodes.nodeCount = 0;else {var est_nodes = this.prim_count / this.frags_per_leaf_node;var num_nodes = 1;while (num_nodes < est_nodes) {num_nodes *= 2;}this.nodes = new NodeArray(num_nodes, options ? options.useSlimNodes : false);}this.sortPrimitives(this.finfo.wantSort);BVHModule.compute_boxes(this); //Init the root nodes at 0 for opaque
	    //and 1 for transparent objects
	    var root = this.nodes.nextNodes(2); //Now kick off the recursive tree build
	    //Opaque
	    BVHModule.bvh_subdivide(this, root, 0, this.first_transparent - 1, this.boxv_o, this.boxc_o, false, 0);var a;while (this.recursion_stack.length) {a = this.recursion_stack.pop();BVHModule.bvh_subdivide(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);} //Transparent
	    BVHModule.bvh_subdivide(this, root + 1, this.first_transparent, this.prim_count - 1, this.boxv_t, this.boxc_t, true, 0);while (this.recursion_stack.length) {a = this.recursion_stack.pop();BVHModule.bvh_subdivide(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);}};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.















	InputStream = InputStream;var _StringUtils = __webpack_require__(7);"use strict"; //We will use these shared memory arrays to
	//convert from bytes to the desired data type.
	var convBuf = new ArrayBuffer(8);var convUint8 = new Uint8Array(convBuf);var convUint16 = new Uint16Array(convBuf);var convInt32 = new Int32Array(convBuf);var convUint32 = new Uint32Array(convBuf);var convFloat32 = new Float32Array(convBuf);var convFloat64 = new Float64Array(convBuf); /** @constructor */function InputStream(buf) {this.buffer = buf;this.offset = 0;
	    this.byteLength = buf.length;
	}


	InputStream.prototype.seek = function (off) {
	    this.offset = off;
	};

	InputStream.prototype.getBytes = function (len) {
	    var ret = new Uint8Array(this.buffer.buffer, this.offset, len);
	    this.offset += len;
	    return ret;
	};

	InputStream.prototype.getVarints = function () {
	    var b;
	    var value = 0;
	    var shiftBy = 0;
	    do {
	        b = this.buffer[this.offset++];
	        value |= (b & 0x7f) << shiftBy;
	        shiftBy += 7;
	    } while (b & 0x80);
	    return value;
	};

	InputStream.prototype.getUint8 = function () {
	    return this.buffer[this.offset++];
	};

	InputStream.prototype.getUint16 = function () {
	    convUint8[0] = this.buffer[this.offset++];
	    convUint8[1] = this.buffer[this.offset++];
	    return convUint16[0];
	};

	InputStream.prototype.getInt16 = function () {
	    var tmp = this.getUint16();
	    //make negative integer if the ushort is negative
	    if (tmp > 0x7fff)
	    tmp = tmp | 0xffff0000;
	    return tmp;
	};

	InputStream.prototype.getInt32 = function () {
	    var src = this.buffer;
	    var dst = convUint8;
	    var off = this.offset;
	    dst[0] = src[off];
	    dst[1] = src[off + 1];
	    dst[2] = src[off + 2];
	    dst[3] = src[off + 3];
	    this.offset += 4;
	    return convInt32[0];
	};

	InputStream.prototype.getUint32 = function () {
	    var src = this.buffer;
	    var dst = convUint8;
	    var off = this.offset;
	    dst[0] = src[off];
	    dst[1] = src[off + 1];
	    dst[2] = src[off + 2];
	    dst[3] = src[off + 3];
	    this.offset += 4;
	    return convUint32[0];
	};

	InputStream.prototype.getFloat32 = function () {
	    var src = this.buffer;
	    var dst = convUint8;
	    var off = this.offset;
	    dst[0] = src[off];
	    dst[1] = src[off + 1];
	    dst[2] = src[off + 2];
	    dst[3] = src[off + 3];
	    this.offset += 4;
	    return convFloat32[0];
	};

	//Specialized copy which copies 4 byte integers into 2-byte target.
	//Used for downcasting OCTM int32 index buffers to int16 index buffers,
	//in cases we know we don't need more (LMVTK guarantees 2 byte indices).
	InputStream.prototype.getIndicesArray = function (buffer, offset, numItems) {

	    var src = this.buffer;
	    var dst = new Uint8Array(buffer, offset, numItems * 2);
	    var off = this.offset;

	    for (var i = 0, iEnd = numItems * 2; i < iEnd; i += 2) {
	        dst[i] = src[off];
	        dst[i + 1] = src[off + 1];
	        off += 4;
	    }

	    this.offset = off;
	};

	InputStream.prototype.getVector3Array = function (arr, numItems, startOffset, stride) {
	    var src = this.buffer;
	    var off = this.offset;

	    //We cannot use Float32Array copying here because the
	    //source stream is out of alignment
	    var dst = new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);

	    if (stride === 3 && startOffset === 0) {
	        var len = numItems * 12;
	        dst.set(src.subarray(off, off + len));
	        this.offset += len;
	    } else {

	        stride *= 4;
	        var aoff = startOffset * 4;
	        for (var i = 0; i < numItems; i++) {
	            for (var j = 0; j < 12; j++) {
	                dst[aoff + j] = src[off++];
	            }
	            aoff += stride;
	        }

	        this.offset = off;
	    }
	};

	InputStream.prototype.getVector2Array = function (arr, numItems, startOffset, stride) {
	    var src = this.buffer;
	    var dst = new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
	    var off = this.offset;

	    stride *= 4;
	    var aoff = startOffset * 4;
	    for (var i = 0; i < numItems; i++) {
	        for (var j = 0; j < 8; j++) {
	            dst[aoff + j] = src[off++];
	        }
	        aoff += stride;
	    }

	    this.offset = off;
	};

	InputStream.prototype.getVector4 = function (arr, offset) {
	    var src = this.buffer;
	    var dst = convUint8;
	    var off = this.offset;
	    var conv = convFloat32;

	    for (var j = 0; j < 4; j++) {
	        dst[0] = src[off];
	        dst[1] = src[off + 1];
	        dst[2] = src[off + 2];
	        dst[3] = src[off + 3];
	        arr[offset + j] = conv[0];
	        off += 4;
	    }

	    this.offset = off;
	};

	InputStream.prototype.getFloat64 = function () {
	    var src = this.buffer;
	    var dst = convUint8;
	    var off = this.offset;
	    for (var i = 0; i < 8; i++) {
	        dst[i] = src[off + i];}
	    this.offset += 8;
	    return convFloat64[0];
	};



	InputStream.prototype.getString = function (len) {
	    var res = (0, _StringUtils.utf8ArrayToString)(this.buffer, this.offset, len);
	    this.offset += len;
	    return res;
	};

	InputStream.prototype.reset = function (buf) {
	    this.buffer = buf;
	    this.offset = 0;
	    this.byteLength = buf.length;
	};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.








	PackFileReader = PackFileReader;var _InputStream = __webpack_require__(33);var _LmvMatrix = __webpack_require__(30);"use strict";var warnedGzip = false; /** @constructor */function PackFileReader(data)
	{
	    var stream = this.stream = new _InputStream.InputStream(data);

	    var len = stream.getInt32();
	    this.type = stream.getString(len);
	    this.version = stream.getInt32();

	    this.types = null;
	    this.entryOffsets = [];

	    //read the table of contents
	    {
	        var offset = stream.offset;

	        // Jump to file footer.
	        stream.seek(stream.byteLength - 8);

	        // Jump to toc.
	        var tocOffset = stream.getUint32();
	        this.typesOffset = stream.getUint32();

	        // Populate type sets.
	        stream.seek(this.typesOffset);
	        var typesCount = this.readU32V();
	        this.types = [];
	        for (var i = 0; i < typesCount; ++i) {
	            this.types.push({
	                "entryClass": this.readString(),
	                "entryType": this.readString(),
	                "version": this.readU32V() });}


	        // Populate data offset list.
	        stream.seek(tocOffset);
	        var entryCount = this.readU32V();
	        var dso = this.entryOffsets;
	        for (var i = 0; i < entryCount; ++i) {
	            dso.push(stream.getUint32());}

	        // Restore sanity of the world.
	        stream.seek(offset);
	    }
	};

	PackFileReader.prototype.readVarint = function () {
	    var b;
	    var value = 0;
	    var shiftBy = 0;
	    do {
	        b = this.stream.getUint8();
	        value |= (b & 0x7f) << shiftBy;
	        shiftBy += 7;
	    } while (b & 0x80);
	    return value;
	};
	PackFileReader.prototype.readU32V = PackFileReader.prototype.readVarint;

	PackFileReader.prototype.readU16 = function () {
	    return this.stream.getUint16();
	};

	PackFileReader.prototype.readU8 = function () {
	    return this.stream.getUint8();
	};

	PackFileReader.prototype.readString = function () {
	    return this.stream.getString(this.readU32V());
	};

	PackFileReader.prototype.readVector3f = function () {
	    var s = this.stream;
	    return { x: s.getFloat32(), y: s.getFloat32(), z: s.getFloat32() };
	};

	PackFileReader.prototype.readF32 = function () {
	    return this.stream.getFloat32();
	};

	PackFileReader.prototype.readVector3d = function () {

	    var t = { x: 0, y: 0, z: 0 };

	    return function () {
	        var s = this.stream;
	        t.x = s.getFloat64();
	        t.y = s.getFloat64();
	        t.z = s.getFloat64();

	        return t;
	    };
	}();

	PackFileReader.prototype.readQuaternionf = function () {

	    var q = { x: 0, y: 0, z: 0, w: 0 };

	    return function () {
	        var s = this.stream;
	        q.x = s.getFloat32();
	        q.y = s.getFloat32();
	        q.z = s.getFloat32();
	        q.w = s.getFloat32();

	        return q;
	    };

	}();

	PackFileReader.prototype.readMatrix3f = function () {

	    var _m = new _LmvMatrix.LmvMatrix4();

	    return function (dst) {
	        if (!dst) dst = _m;

	        var s = this.stream;
	        dst.identity();
	        for (var i = 0; i < 3; ++i) {
	            for (var j = 0; j < 3; ++j) {
	                dst.elements[4 * i + j] = s.getFloat32();}}

	        return dst;
	    };

	}();



	PackFileReader.prototype.readTransform = function () {

	    var s = { x: 1, y: 1, z: 1 };
	    var m = new _LmvMatrix.LmvMatrix4(true);

	    return function (entityIndex, buffer, offset, placementTransform, globalOffset, originalTranslation)
	    {
	        var stream = this.stream;
	        var t, q;

	        var transformType = stream.getUint8();

	        switch (transformType) {

	            case 4 /*TransformType.Identity*/:{
	                    m.identity();
	                }break;
	            case 0 /*TransformType.Translation*/:{
	                    t = this.readVector3d();
	                    m.makeTranslation(t.x, t.y, t.z);
	                }break;
	            case 1 /*TransformType.RotationTranslation*/:{
	                    q = this.readQuaternionf();
	                    t = this.readVector3d();
	                    s.x = 1;s.y = 1;s.z = 1;
	                    m.compose(t, q, s);
	                }break;
	            case 2 /*TransformType.UniformScaleRotationTranslation*/:{
	                    var scale = stream.getFloat32();
	                    q = this.readQuaternionf();
	                    t = this.readVector3d();
	                    s.x = scale;s.y = scale;s.z = scale;
	                    m.compose(t, q, s);
	                }break;
	            case 3 /*TransformType.AffineMatrix*/:{
	                    this.readMatrix3f(m);
	                    t = this.readVector3d();
	                    m.setPosition(t);
	                }break;
	            default:
	                break; //ERROR
	        }

	        //Report the original translation term to the caller, if they need it.
	        //This is only required when reading fragment bounding boxes, where the translation
	        //term of this matrix is subtracted from the bbox terms.
	        if (originalTranslation) {
	            originalTranslation[0] = m.elements[12];
	            originalTranslation[1] = m.elements[13];
	            originalTranslation[2] = m.elements[14];
	        }

	        //Apply any placement transform
	        if (placementTransform) {
	            m.multiplyMatrices(placementTransform, m);
	        }

	        //Apply global double precision offset on top
	        if (globalOffset) {
	            m.elements[12] -= globalOffset.x;
	            m.elements[13] -= globalOffset.y;
	            m.elements[14] -= globalOffset.z;
	        }

	        //Store result back into single precision matrix or array
	        if (entityIndex !== undefined) {
	            var src = m.elements;
	            // Sometimes we don't want to keep this data (e.g. when we are probing the fragment list
	            // to find the data base id to fragment index mappings used for fragment filtering) so we
	            // pass a null buffer and if that is the case, bail out here.
	            if (!buffer) return;
	            buffer[offset + 0] = src[0];buffer[offset + 1] = src[1];buffer[offset + 2] = src[2];
	            buffer[offset + 3] = src[4];buffer[offset + 4] = src[5];buffer[offset + 5] = src[6];
	            buffer[offset + 6] = src[8];buffer[offset + 7] = src[9];buffer[offset + 8] = src[10];
	            buffer[offset + 9] = src[12];buffer[offset + 10] = src[13];buffer[offset + 11] = src[14];
	        } else
	        {
	            return new _LmvMatrix.LmvMatrix4().copy(m);
	        }
	    };

	}();

	PackFileReader.prototype.getEntryCounts = function () {
	    return this.entryOffsets.length;
	};

	PackFileReader.prototype.seekToEntry = function (entryIndex) {
	    var count = this.getEntryCounts();
	    if (entryIndex >= count)
	    return null;

	    // Read the type index and populate the entry data
	    this.stream.seek(this.entryOffsets[entryIndex]);
	    var typeIndex = this.stream.getUint32();
	    if (typeIndex >= this.types.length)
	    return null;

	    return this.types[typeIndex];
	};


	PackFileReader.prototype.readPathID = function () {
	    var s = this.stream;

	    //Construct a /-delimited string as the path to a node
	    //TODO: in case we need a split representation (e.g. to follow paths), then
	    //an array of numbers might be better to return from here.
	    if (this.version < 2) {
	        var pathLength = s.getUint16();
	        if (!pathLength)
	        return null;

	        //The first number in a path ID is always zero (root)
	        //so we skip adding it to the path string here.
	        //Remove this section if that is not the case in the future.
	        s.getUint16();
	        if (pathLength == 1)
	        return "";

	        var path = s.getUint16();
	        for (var i = 2; i < pathLength; ++i) {
	            path += "/" + s.getUint16();
	        }
	    } else
	    {
	        var pathLength = this.readU32V();
	        if (!pathLength)
	        return null;

	        //The first number in a path ID is always zero (root)
	        //so we skip adding it to the path string here.
	        //Remove this section if that is not the case in the future.
	        this.readU32V();
	        if (pathLength == 1)
	        return "";

	        var path = this.readU32V();
	        for (var i = 2; i < pathLength; ++i) {
	            path += "/" + this.readU32V();
	        }
	    }
	    return path;
	};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.










	FragList = FragList;exports.

















	readGeometryMetadataIntoFragments = readGeometryMetadataIntoFragments;exports.





























































	readGeometryMetadata = readGeometryMetadata;exports.































































































	readFragments = readFragments;exports.































































































































	filterFragments = filterFragments;var _LmvBox = __webpack_require__(29);var _LmvMatrix = __webpack_require__(30);var _compat = __webpack_require__(4);var _MeshFlags = __webpack_require__(36); //FragList represents an array of fragments, stored in Structure of Arrays form
	//which allows us to free some parts easily and transfer the fragment information in large chunks.
	var NUM_FRAGMENT_LIMITS = (0, _compat.isMobileDevice)() ? null : null; /** @constructor */ // note: update transferable var list in SvfWorker.ts if you add a new field
	function FragList() {this.length = 0;this.numLoaded = 0;this.boxes = null;this.transforms = null;this.materials = null;this.packIds = null;this.entityIndexes = null;this.fragId2dbId = null;this.topoIndexes = null;this.visibilityFlags = null;}function readGeometryMetadataIntoFragments(pfr, fragments) {var length = fragments.geomDataIndexes.length;var stream = pfr.stream;var primsCount = 0; // Read from cache if the same entry has been reading from stream.
	    var entryCache = {};var mesh2frag = fragments.mesh2frag = {};fragments.polygonCounts = fragments.geomDataIndexes;for (var g = 0; g < length; g++) {var entry = fragments.geomDataIndexes[g];if (entryCache[entry]) {var i = entryCache[entry];fragments.polygonCounts[g] = fragments.polygonCounts[i];fragments.packIds[g] = fragments.packIds[i];fragments.entityIndexes[g] = fragments.entityIndexes[i];primsCount += fragments.polygonCounts[g];} else {var tse = pfr.seekToEntry(entry);if (!tse) return; // Frag type, seems no use any more.
	            stream.getUint8(); //skip past object space bbox -- we don't use that
	            stream.seek(stream.offset + 24);fragments.polygonCounts[g] = stream.getUint16();fragments.packIds[g] = parseInt(pfr.readString());fragments.entityIndexes[g] = pfr.readU32V();primsCount += fragments.polygonCounts[g];entryCache[entry] = g;} // Construct mesh2frag here directly
	        var meshid = fragments.packIds[g] + ":" + fragments.entityIndexes[g];var meshRefs = mesh2frag[meshid];if (meshRefs === undefined) {//If it's the first fragments for this mesh,
	            //store the index directly -- most common case.
	            mesh2frag[meshid] = g;} else if (!Array.isArray(meshRefs)) {//otherwise put the fragments that
	            //reference the mesh into an array
	            mesh2frag[meshid] = [meshRefs, g];} else {//already is an array
	            meshRefs.push(g);}}fragments.geomDataIndexes = null;entryCache = null;return primsCount;}function readGeometryMetadata(pfr, geoms) {var numGeoms = pfr.getEntryCounts();var stream = pfr.stream;geoms.length = numGeoms;var fragTypes = geoms.fragTypes = new Uint8Array(numGeoms);var primCounts = geoms.primCounts = new Uint16Array(numGeoms);var packIds = geoms.packIds = new Int32Array(numGeoms);var entityIndexes = geoms.entityIndexes = new Int32Array(numGeoms); // Holds the indexes to the topology data.
	    var topoIndexes;for (var g = 0, gEnd = numGeoms; g < gEnd; g++) {var tse = pfr.seekToEntry(g);if (!tse) return;fragTypes[g] = stream.getUint8(); //skip past object space bbox -- we don't use that
	        stream.seek(stream.offset + 24);primCounts[g] = stream.getUint16();packIds[g] = parseInt(pfr.readString());entityIndexes[g] = pfr.readU32V();if (tse.version > 2) {var topoIndex = stream.getInt32();if (topoIndex != -1 && topoIndexes === undefined) {topoIndexes = geoms.topoIndexes = new Int32Array(numGeoms); // Fill in the first entries to indicate
	                for (var i = 0; i < g; i++) {topoIndexes[i] = -1;}}if (topoIndexes != undefined) topoIndexes[g] = topoIndex;}}} // Convert a list of object id (dbid) to a list of integers where each integer is an index of the fragment
	// in fragment list that associated with the object id.
	function objectIds2FragmentIndices(pfr, ids) {var ret = [];if (!ids) {return ret;}var counts = pfr.getEntryCounts();var stream = pfr.stream;for (var entry = 0; entry < counts; entry++) {var tse = pfr.seekToEntry(entry);if (!tse) return;if (tse.version > 5) return; // Keep reading fragment fields as usual, but does not store anything as we only
	        // interested in the data base id / object id field at the very end.
	        if (tse.version > 4) {// Flag byte.
	            pfr.readU8();} // Material index
	        pfr.readU32V();if (tse.version > 2) {// Geometry metadata reference
	            pfr.readU32V();} else {// Pack file reference
	            pfr.readString();pfr.readU32V();} // Transform
	        pfr.readTransform(entry, null, 12 * entry); // Bounding box
	        for (var i = 0; i < 6; i++) {stream.getFloat32();}if (tse.version > 1) {var dbid = pfr.readU32V();if (ids.indexOf(dbid) >= 0) {ret.push(entry);}}}return ret;}function readFragments(pfr, frags, globalOffset, placementTransform, ids) {var filteredIndices = objectIds2FragmentIndices(pfr, ids); //Initialize all the fragments structures
	    //once we know how many fragments we have.
	    var numFrags = filteredIndices.length ? filteredIndices.length : pfr.getEntryCounts();var stream = pfr.stream;if (NUM_FRAGMENT_LIMITS && numFrags > NUM_FRAGMENT_LIMITS) {numFrags = NUM_FRAGMENT_LIMITS;} // Recored the total length of the fragments
	    frags.totalLength = pfr.getEntryCounts();frags.length = numFrags;frags.numLoaded = 0; //Allocate flat array per fragment property
	    var fragBoxes = frags.boxes = new Float32Array(6 * numFrags);var transforms = frags.transforms = new Float32Array(12 * numFrags);var materials = frags.materials = new Int32Array(numFrags);var packIds = frags.packIds = new Int32Array(numFrags);var entityIndexes = frags.entityIndexes = new Int32Array(numFrags);var geomDataIndexes = frags.geomDataIndexes = new Int32Array(numFrags);var fragId2dbId = frags.fragId2dbId = new Int32Array(numFrags); //NOTE: this potentially truncates IDs bigger than 4 billion -- can be converted to array if needed.
	    var visibilityFlags = frags.visibilityFlags = new Uint16Array(numFrags);var tmpBox;var tmpMat;var boxTranslation = [0, 0, 0];if (placementTransform) {tmpBox = new _LmvBox.LmvBox3();tmpMat = new _LmvMatrix.LmvMatrix4(true).fromArray(placementTransform.elements);} //Helper functions used by the main fragment read loop.
	    function applyPlacement(index) {if (placementTransform) {var offset = index * 6;tmpBox.setFromArray(fragBoxes, offset);tmpBox.applyMatrix4(tmpMat);tmpBox.copyToArray(fragBoxes, offset);}}function readBoundingBox(entry) {var offset = entry * 6;for (var i = 0; i < 6; i++) {fragBoxes[offset++] = stream.getFloat32();}}function readBoundingBoxOffset(entry, boxTranslation) {var offset = entry * 6;for (var i = 0; i < 6; i++) {fragBoxes[offset++] = stream.getFloat32() + boxTranslation[i % 3];}} //Spin through all the fragments now
	    for (var entry = 0, eEnd = frags.length; entry < eEnd; entry++) {var tse = filteredIndices.length ? pfr.seekToEntry(filteredIndices[entry]) : pfr.seekToEntry(entry);if (!tse) return;if (tse.version > 5) return;var isVisible = true;if (tse.version > 4) {// Fragments v5+ include a flag byte, the LSB of which denotes
	            // visibility
	            var flags = pfr.readU8();isVisible = (flags & 0x01) != 0;}visibilityFlags[entry] = isVisible ? _MeshFlags.MeshFlags.MESH_VISIBLE : 0;materials[entry] = pfr.readU32V();if (tse.version > 2) {//In case it's new style fragment that
	            //points to a geometry metadata entry
	            geomDataIndexes[entry] = pfr.readU32V();} else {//Old style fragment, pack reference is directly
	            //encoded in the fragment entry
	            packIds[entry] = parseInt(pfr.readString());entityIndexes[entry] = pfr.readU32V();}pfr.readTransform(entry, transforms, 12 * entry, placementTransform, globalOffset, boxTranslation);if (tse.version > 3) {// With this version the transform's (double precision) translation is subtracted from the BB,
	            // so we have to add it back
	            readBoundingBoxOffset(entry, boxTranslation);} else {readBoundingBox(entry);} //Apply the placement transform to the world space bbox
	        applyPlacement(entry); //Apply any global offset to the world space bbox
	        if (globalOffset) {var offset = entry * 6;fragBoxes[offset++] -= globalOffset.x;fragBoxes[offset++] -= globalOffset.y;fragBoxes[offset++] -= globalOffset.z;fragBoxes[offset++] -= globalOffset.x;fragBoxes[offset++] -= globalOffset.y;fragBoxes[offset++] -= globalOffset.z;}if (tse.version > 1) {fragId2dbId[entry] = pfr.readU32V();} // Skip reading path ID which is not in use now.
	        // pfr.readPathID();
	    }frags.finishLoading = true;} // Filter fragments based on specified object id list, by picking
	// up fragment whose id is in the specified id list, and dropping others.
	// This is used to produce a list of fragments that matches a search hit.
	function filterFragments(frags, ids) {frags.length = ids.length;frags.numLoaded = 0;var numFrags = frags.length;var bb = [Infinity, Infinity, Infinity, -Infinity, -Infinity, -Infinity];var fragBoxes = new Float32Array(6 * numFrags);var transforms = new Float32Array(12 * numFrags);var materials = new Int32Array(numFrags);var packIds = new Int32Array(numFrags);var entityIndexes = new Int32Array(numFrags);var visibilityFlags = new Uint16Array(numFrags);var mesh2frag = {};for (var i = 0; i < ids.length; ++i) {var index = ids[i];var idxOld = index * 6;var idxNew = i * 6;for (var j = 0; j < 6; ++j) {fragBoxes[idxNew++] = frags.boxes[idxOld++];}idxOld = index * 12;idxNew = i * 12;for (var j = 0; j < 12; ++j) {transforms[idxNew++] = frags.transforms[idxOld++];}materials[i] = frags.materials[index];packIds[i] = frags.packIds[index];entityIndexes[i] = frags.entityIndexes[index];visibilityFlags[i] = frags.visibilityFlags[index]; // TODO: consolidate this with addToMeshMap.
	        var meshID = frags.packIds[index] + ":" + frags.entityIndexes[index];var meshRefs = mesh2frag[meshID];if (meshRefs == undefined) {mesh2frag[meshID] = i;} else if (!Array.isArray(meshRefs)) {mesh2frag[meshID] = [meshRefs, i];} else {meshRefs.push(i);}var bbIndex = i * 6;for (var j = 0; j < 3; ++j) {if (fragBoxes[bbIndex + j] < bb[j]) bb[j] = fragBoxes[bbIndex + j];}
	        for (var j = 3; j < 6; ++j) {
	            if (fragBoxes[bbIndex + j] > bb[j])
	            bb[j] = fragBoxes[bbIndex + j];}
	    }

	    frags.boxes = fragBoxes;
	    frags.transforms = transforms;
	    frags.materials = materials;
	    frags.packIds = packIds;
	    frags.entityIndexes = entityIndexes;
	    frags.mesh2frag = mesh2frag;
	    frags.visibilityFlags = visibilityFlags;

	    return bb;
	}

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });var MeshFlags = exports.MeshFlags = {
	        // FragmentList flags
	        //visibility/highlight bitmask flags
	        //NOTE: This is confusing and it should be fixed, but when the MESH_VISIBLE bit is off, the mesh
	        //will draw in ghosted mode. To completely skip drawing a mesh, set the HIDE flag.
	        MESH_VISIBLE: 1,
	        MESH_HIGHLIGHTED: 2,
	        MESH_HIDE: 4,
	        MESH_ISLINE: 8,
	        MESH_MOVED: 16, // indicates if an animation matrix is set
	        MESH_TRAVERSED: 0x20, // only used for paging: drawn fragments are tagged and then skipped by forEach() until the flag is being reset (e.g. on scene/camera changes)
	        MESH_DRAWN: 0x40, // only used for paging: drawn fragments are tagged. At the end of all render passes flag is copied to MESH_TRAVERSED.
	        MESH_RENDERFLAG: 0x80,
	        MESH_ISPOINT: 0x100, // indicates that the mesh is vertex-only
	        MESH_ISWIDELINE: 0x200 // indicates that the mesh is wide line
	};

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.

	readInstance = readInstance;exports.





























	readInstanceTree = readInstanceTree;function readInstance(pfr, entry, placementTransform, globalOffset) {var tse = pfr.seekToEntry(entry);if (!tse) return null;if (tse.version > 2 /*Constants::InstanceVersion*/) return null;var isVisible = true;if (tse.version > 1) {// Instances v2+ include a flag byte, the LSB of which denotes visibility
	        var flags = pfr.readU8();isVisible = (flags & 0x01) != 0;}return { definition: pfr.stream.getUint32(), transform: pfr.readTransform(undefined, undefined, undefined, placementTransform, globalOffset), instanceNodePath: pfr.readPathID() };}var NodeType = { NT_Inner: 0, NT_Geometry: 1, NT_Camera: 2, NT_Light: 3 };function readInstanceTree(pfr, version) {
	    var transforms = [];
	    var dbIds = [];
	    var fragIds = [];
	    var childCounts = [];
	    var nodeIndex = 0;
	    var s = pfr.stream;

	    while (s.offset < s.byteLength - 8 - 1) {

	        pfr.readTransform(nodeIndex, transforms, nodeIndex * 12, undefined, undefined, undefined);

	        // Version 1-4 had optional "shared nodes" that were never used in practice. If found, consume and ignore.
	        if (version < 5) {
	            var hasSharedNode = s.getUint8();
	            if (hasSharedNode) {
	                s.getUint32();
	            }
	        }

	        var nodeType = s.getUint8();

	        // Version 5 introduced a flags byte and the visibility flag.
	        if (version >= 5) {
	            var flags = s.getUint8();
	            var visible = !!(flags & 1);
	        }

	        // Version 3 introduced the database ID
	        if (version >= 3) {
	            dbIds[nodeIndex] = s.getVarints();
	        }

	        if (nodeIndex) {
	            // Not a root, behavior depends on type
	            // Leaf, instantiate and add fragment references before returning
	            switch (nodeType) {

	                case NodeType.NT_Inner:
	                    break;
	                case NodeType.NT_Geometry:{
	                        if (version < 2) {
	                            var fragCount = s.getUint16();
	                            if (fragCount === 1) {
	                                fragIds[nodeIndex] = s.getUint32();
	                            } else if (fragCount > 0) {
	                                var flist = [];
	                                for (var i = 0; i < fragCount; i++) {
	                                    flist.push(s.getUint32());}
	                                fragIds[nodeIndex] = flist;
	                            }
	                        } else {
	                            var fragCount = s.getVarints();
	                            if (fragCount === 1) {
	                                fragIds[nodeIndex] = s.getVarints();
	                            } else if (fragCount > 0) {
	                                var flist = [];
	                                for (var i = 0; i < fragCount; i++) {
	                                    flist.push(s.getVarints());}
	                                fragIds[nodeIndex] = flist;
	                            }
	                        }
	                    }
	                    break;
	                case NodeType.NT_Camera:
	                case NodeType.NT_Light:{
	                        var hasInstanceEntryId = s.getUint8();
	                        if (hasInstanceEntryId) {
	                            s.getUint32();
	                        }
	                    }
	                    break;
	                default:
	                    debug("Unrecognized instance tree node type.");
	                    break;}

	        }

	        var childCount = 0;
	        if (nodeType === NodeType.NT_Inner) {
	            if (version < 2) {
	                childCount = s.getUint16();
	            } else {
	                childCount = s.getVarints();
	            }
	        }
	        childCounts[nodeIndex] = childCount;

	        nodeIndex++;
	    }

	    var dbIdBuffer = new Uint32Array(dbIds.length);
	    dbIdBuffer.set(dbIds);

	    var xformBuffer = new Float32Array(transforms.length);
	    xformBuffer.set(transforms);

	    var childCountsBuffer = new Uint32Array(childCounts.length);
	    childCountsBuffer.set(childCounts);

	    return { dbIds: dbIdBuffer, fragIds: fragIds, transforms: xformBuffer, childCounts: childCountsBuffer };
	}

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};exports.














































	derivePlacementTransform = derivePlacementTransform;exports.
























































































































































	initPlacement = initPlacement;exports.
























































	transformAnimations = transformAnimations;var _LmvVector = __webpack_require__(28);var _LmvBox = __webpack_require__(29);var _LmvMatrix = __webpack_require__(30);function getUnitScale(unit) {//Why are translators not using standard strings for those?!?!?!?
	    switch (unit) {case 'meter':case 'meters':case 'm':return 1.0;case 'feet and inches':case 'foot':case 'feet':case 'ft':return 0.3048;case 'inch':case 'inches':case 'in':return 0.0254;case 'centimeter':case 'centimeters':case 'cm':return 0.01;case 'millimeter':case 'millimeters':case 'mm':return 0.001;default:return 1.0;}}function isIdentity(mtx) {var e = mtx.elements;for (var i = 0; i < 4; i++) {for (var j = 0; j < 4; j++) {if (i === j) {if (e[i * 4 + j] !== 1) return false;} else {if (e[i * 4 + j] !== 0) return false;}}}return true;}function derivePlacementTransform(svf, loadContext) {// We now will apply overall model transforms, following the following logic:
	    //    1) placementTransform = options.placementTransform);
	    //    2) placementTransform = placementTransform.multiply(scalingTransform);
	    //    3) placementTransform = placementTransform.multiply(refPointTransform);
	    // This is for aggregation scenarios, where multiple models are loaded into the scene
	    // In such scenarios the client will most probably manually override the model units
	    //First, take the input placement transform as is (could be null).
	    svf.placementTransform = loadContext.placementTransform; // If requested in the load options, apply scaling from optional 'from' to 'to' units.
	    // If unpecified, then units will be read from the models metadata.
	    // * usage overloads
	    //      options.appyScaling: { from: 'ft', to: 'm' }
	    //      options.appyScaling: 'm'   ( equivalent to { to: 'm' })
	    // * this is aimed at multiple 3D model situations where models potentialy have different units, but
	    //   one  doesn't up-front know what these units are.It also allows overriding of such units.
	    // * Model methods: getUnitString , getUnitScale &  getDisplayUnit will be automatically return corrected values
	    //   as long as there are no additional options.placementTransform scalings applied.
	    if (loadContext.applyScaling) {// default 'from' & 'to'  units are from metadata, or 'm' not present
	        var scalingFromUnit = 'm';if (svf.metadata["distance unit"]) {scalingFromUnit = svf.metadata["distance unit"]["value"];}svf.scalingUnit = scalingFromUnit;if ('object' === _typeof(loadContext.applyScaling)) {if (loadContext.applyScaling.from) {scalingFromUnit = loadContext.applyScaling.from;}if (loadContext.applyScaling.to) {svf.scalingUnit = loadContext.applyScaling.to;}} else {svf.scalingUnit = loadContext.applyScaling;} // Work out overall desired scaling factor.
	        var scalingFactor = getUnitScale(scalingFromUnit) / getUnitScale(svf.scalingUnit);if (1 != scalingFactor) {var placementS = new _LmvMatrix.LmvMatrix4(true);var scalingTransform = new _LmvMatrix.LmvMatrix4(true);scalingTransform.elements[0] = scalingFactor;scalingTransform.elements[5] = scalingFactor;scalingTransform.elements[10] = scalingFactor;if (loadContext.placementTransform) {// There may well already be a placementTransform from previous options/operations.
	                placementS.copy(loadContext.placementTransform);}svf.placementTransform = loadContext.placementTransform = placementS.multiply(scalingTransform);}}var custom_values = svf.metadata["custom values"];if (custom_values && custom_values.refPointTransform) {svf.refPointTransform = new _LmvMatrix.LmvMatrix4(true);var e = svf.refPointTransform.elements;var src = custom_values.refPointTransform;e[0] = src[0];e[1] = src[1];e[2] = src[2];e[4] = src[3];e[5] = src[4];e[6] = src[5];e[8] = src[6];e[9] = src[7];e[10] = src[8];e[12] = src[9];e[13] = src[10];e[14] = src[11];} else {//Is there an extra offset specified in the georeference?
	        //This is important when aggregating Revit models from the same Revit
	        //project into the same scene, because Revit SVFs use RVT internal coordinates, which
	        //need extra offset to get into the world space.
	        var georeference = svf.metadata["georeference"];var refPointLMV = georeference && georeference["refPointLMV"];var angle = 0;if (custom_values && custom_values.hasOwnProperty("angleToTrueNorth")) {angle = Math.PI / 180.0 * custom_values["angleToTrueNorth"];}if (refPointLMV || angle) {//Here we convert the reference point and rotation angles
	            //to a simple 4x4 transform for easier use and application later.
	            var refPoint = new _LmvMatrix.LmvMatrix4(true);var m = refPoint.elements;m[0] = m[5] = Math.cos(angle);m[1] = -Math.sin(angle);m[4] = Math.sin(angle);if (refPointLMV) {m[12] = refPointLMV[0];m[13] = refPointLMV[1];m[14] = refPointLMV[2];}svf.refPointTransform = refPoint;}} //If request in the load options, apply the reference point transform when loading the model
	    if (loadContext.applyRefPoint && svf.refPointTransform) {var placement = new _LmvMatrix.LmvMatrix4(true); //Normally we expect the input placement transform to come in as identity in case
	        //we have it specified in the georef here, but, whatever, let's be thorough for once.
	        if (loadContext.placementTransform) placement.copy(loadContext.placementTransform);placement.multiply(svf.refPointTransform);svf.placementTransform = loadContext.placementTransform = placement;} else if (!loadContext.applyRefPoint && loadContext.placementTransform) {//In case we are given a placement transform that overrides the icoming refPointTransform
	        svf.placementTransform = new _LmvMatrix.LmvMatrix4().copy(loadContext.placementTransform);}if (svf.placementTransform && isIdentity(svf.placementTransform)) svf.placementTransform = null;return svf.placementTransform;}function initPlacement(svf, loadContext) {if (!svf.metadata) return; //Retrieve world bounding box
	    var bbox = svf.metadata["world bounding box"];var min = new _LmvVector.LmvVector3(bbox.minXYZ[0], bbox.minXYZ[1], bbox.minXYZ[2]);var max = new _LmvVector.LmvVector3(bbox.maxXYZ[0], bbox.maxXYZ[1], bbox.maxXYZ[2]);svf.bbox = new _LmvBox.LmvBox3(min, max); //Global offset is used to avoid floating point precision issues for models
	    //located enormous distances from the origin. The default is to move the model to the origin
	    //but it can be overridden in case of model aggregation scenarios, where multiple
	    //models are loaded into the scene and a common offset is needed for all.
	    svf.globalOffset = loadContext.globalOffset || { x: 0.5 * (min.x + max.x), y: 0.5 * (min.y + max.y), z: 0.5 * (min.z + max.z) };var pt = derivePlacementTransform(svf, loadContext);var go = svf.globalOffset;if (go.x || go.y || go.z) {if (!pt) {pt = new _LmvMatrix.LmvMatrix4(true);pt.makeTranslation(-go.x, -go.y, -go.z);} else {var pt2 = new _LmvMatrix.LmvMatrix4(true);pt2.copy(pt);pt = pt2;pt.elements[12] -= go.x;pt.elements[13] -= go.y;pt.elements[14] -= go.z;}svf.placementWithOffset = pt;} else {svf.placementWithOffset = pt;}if (pt) {svf.bbox.applyMatrix4(pt);}if (svf.metadata.hasOwnProperty("double sided geometry") && svf.metadata["double sided geometry"]["value"]) //TODO: do we want to check the global flag or drop that and rely on material only?
	        {svf.doubleSided = true;}}function applyOffset(a, offset) {a[0] -= offset.x;a[1] -= offset.y;a[2] -= offset.z;}function transformAnimations(svf) {if (!svf.animations) return; // apply global offset to animations
	    var animations = svf.animations["animations"];if (animations) {var globalOffset = svf.globalOffset;var t = new _LmvMatrix.LmvMatrix4().makeTranslation(globalOffset.x, globalOffset.y, globalOffset.z);var tinv = new _LmvMatrix.LmvMatrix4().makeTranslation(-globalOffset.x, -globalOffset.y, -globalOffset.z);var r = new _LmvMatrix.LmvMatrix4();var m = new _LmvMatrix.LmvMatrix4();for (var a = 0; a < animations.length; a++) {var anim = animations[a];if (anim.hierarchy) {for (var h = 0; h < anim.hierarchy.length; h++) {var keys = anim.hierarchy[h].keys;if (keys) {for (var k = 0; k < keys.length; k++) {var pos = keys[k].pos;if (pos) {var offset = globalOffset;var rot = keys[k].rot;if (rot) {r.makeRotationFromQuaternion({ x: rot[0], y: rot[1], z: rot[2], w: rot[3] });m.multiplyMatrices(t, r).multiply(tinv);offset = { x: m.elements[12], y: m.elements[13], z: m.elements[14] };}applyOffset(pos, offset);}var target = keys[k].target;if (target) {applyOffset(target, globalOffset);}var points = keys[k].points;if (points) {for (var p = 0; p < points.length; p++) {
	                                    applyOffset(points[p], globalOffset);
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }


	}

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.

	readCameraDefinition = readCameraDefinition;function readCameraDefinition(pfr, inst) {
	    var entry = inst.definition;
	    var tse = pfr.seekToEntry(entry);
	    if (!tse)
	    return null;
	    if (tse.version > 2 /*Constants::CameraDefinitionVersion*/)
	        return null;

	    var s = pfr.stream;
	    var cam = {
	        isPerspective: !s.getUint8(), /* 0 = perspective, 1 = ortho */
	        position: pfr.readVector3f(),
	        target: pfr.readVector3f(),
	        up: pfr.readVector3f(),
	        aspect: s.getFloat32(),
	        fov: s.getFloat32() * (180 / Math.PI) };

	    if (tse.version < 2) {
	        // Skip the clip planes for old files.
	        s.getFloat32();
	        s.getFloat32();
	    }

	    cam.orthoScale = s.getFloat32();

	    return cam;
	}

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.


	readLightDefinition = readLightDefinition;function readLightDefinition(pfr, entry) {
	    var tse = pfr.seekToEntry(entry);
	    if (!tse)
	    return null;
	    if (tse.version > 1 /*Constants::LightDefinitionVersion*/)
	        return null;

	    var s = pfr.stream;

	    var light = {
	        position: pfr.readVector3f(),
	        dir: pfr.readVector3f(),
	        r: s.getFloat32(),
	        g: s.getFloat32(),
	        b: s.getFloat32(),
	        intensity: s.getFloat32(),
	        spotAngle: s.getFloat32(),
	        size: s.getFloat32(),
	        type: s.getUint8() };


	    return light;
	}

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function m(a){throw a;}var p=void 0,t,aa=this;function v(a,b){var c=a.split("."),d=aa;!(c[0]in d)&&d.execScript&&d.execScript("var "+c[0]);for(var g;c.length&&(g=c.shift());)!c.length&&b!==p?d[g]=b:d=d[g]?d[g]:d[g]={}};var w="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array;new (w?Uint8Array:Array)(256);var x;for(x=0;256>x;++x)for(var y=x,ba=7,y=y>>>1;y;y>>>=1)--ba;var z=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,
	2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,
	2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,
	2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,
	3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,
	936918E3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],A=w?new Uint32Array(z):z;function B(a){var b=a.length,c=0,d=Number.POSITIVE_INFINITY,g,f,h,e,k,l,q,s,r;for(s=0;s<b;++s)a[s]>c&&(c=a[s]),a[s]<d&&(d=a[s]);g=1<<c;f=new (w?Uint32Array:Array)(g);h=1;e=0;for(k=2;h<=c;){for(s=0;s<b;++s)if(a[s]===h){l=0;q=e;for(r=0;r<h;++r)l=l<<1|q&1,q>>=1;for(r=l;r<g;r+=k)f[r]=h<<16|s;++e}++h;e<<=1;k<<=1}return[f,c,d]};var C=[],D;for(D=0;288>D;D++)switch(!0){case 143>=D:C.push([D+48,8]);break;case 255>=D:C.push([D-144+400,9]);break;case 279>=D:C.push([D-256+0,7]);break;case 287>=D:C.push([D-280+192,8]);break;default:m("invalid literal: "+D)}
	var ca=function(){function a(a){switch(!0){case 3===a:return[257,a-3,0];case 4===a:return[258,a-4,0];case 5===a:return[259,a-5,0];case 6===a:return[260,a-6,0];case 7===a:return[261,a-7,0];case 8===a:return[262,a-8,0];case 9===a:return[263,a-9,0];case 10===a:return[264,a-10,0];case 12>=a:return[265,a-11,1];case 14>=a:return[266,a-13,1];case 16>=a:return[267,a-15,1];case 18>=a:return[268,a-17,1];case 22>=a:return[269,a-19,2];case 26>=a:return[270,a-23,2];case 30>=a:return[271,a-27,2];case 34>=a:return[272,
	a-31,2];case 42>=a:return[273,a-35,3];case 50>=a:return[274,a-43,3];case 58>=a:return[275,a-51,3];case 66>=a:return[276,a-59,3];case 82>=a:return[277,a-67,4];case 98>=a:return[278,a-83,4];case 114>=a:return[279,a-99,4];case 130>=a:return[280,a-115,4];case 162>=a:return[281,a-131,5];case 194>=a:return[282,a-163,5];case 226>=a:return[283,a-195,5];case 257>=a:return[284,a-227,5];case 258===a:return[285,a-258,0];default:m("invalid length: "+a)}}var b=[],c,d;for(c=3;258>=c;c++)d=a(c),b[c]=d[2]<<24|d[1]<<
	16|d[0];return b}();w&&new Uint32Array(ca);function E(a,b){this.l=[];this.m=32768;this.d=this.f=this.c=this.t=0;this.input=w?new Uint8Array(a):a;this.u=!1;this.n=F;this.K=!1;if(b||!(b={}))b.index&&(this.c=b.index),b.bufferSize&&(this.m=b.bufferSize),b.bufferType&&(this.n=b.bufferType),b.resize&&(this.K=b.resize);switch(this.n){case G:this.a=32768;this.b=new (w?Uint8Array:Array)(32768+this.m+258);break;case F:this.a=0;this.b=new (w?Uint8Array:Array)(this.m);this.e=this.W;this.B=this.R;this.q=this.V;break;default:m(Error("invalid inflate mode"))}}
	var G=0,F=1;
	E.prototype.r=function(){for(;!this.u;){var a=H(this,3);a&1&&(this.u=!0);a>>>=1;switch(a){case 0:var b=this.input,c=this.c,d=this.b,g=this.a,f=p,h=p,e=p,k=d.length,l=p;this.d=this.f=0;f=b[c++];f===p&&m(Error("invalid uncompressed block header: LEN (first byte)"));h=f;f=b[c++];f===p&&m(Error("invalid uncompressed block header: LEN (second byte)"));h|=f<<8;f=b[c++];f===p&&m(Error("invalid uncompressed block header: NLEN (first byte)"));e=f;f=b[c++];f===p&&m(Error("invalid uncompressed block header: NLEN (second byte)"));e|=
	f<<8;h===~e&&m(Error("invalid uncompressed block header: length verify"));c+h>b.length&&m(Error("input buffer is broken"));switch(this.n){case G:for(;g+h>d.length;){l=k-g;h-=l;if(w)d.set(b.subarray(c,c+l),g),g+=l,c+=l;else for(;l--;)d[g++]=b[c++];this.a=g;d=this.e();g=this.a}break;case F:for(;g+h>d.length;)d=this.e({H:2});break;default:m(Error("invalid inflate mode"))}if(w)d.set(b.subarray(c,c+h),g),g+=h,c+=h;else for(;h--;)d[g++]=b[c++];this.c=c;this.a=g;this.b=d;break;case 1:this.q(da,ea);break;
	case 2:fa(this);break;default:m(Error("unknown BTYPE: "+a))}}return this.B()};
	var I=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],J=w?new Uint16Array(I):I,K=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],L=w?new Uint16Array(K):K,ga=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],O=w?new Uint8Array(ga):ga,ha=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],ia=w?new Uint16Array(ha):ha,ja=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,
	12,12,13,13],P=w?new Uint8Array(ja):ja,Q=new (w?Uint8Array:Array)(288),R,la;R=0;for(la=Q.length;R<la;++R)Q[R]=143>=R?8:255>=R?9:279>=R?7:8;var da=B(Q),S=new (w?Uint8Array:Array)(30),T,ma;T=0;for(ma=S.length;T<ma;++T)S[T]=5;var ea=B(S);function H(a,b){for(var c=a.f,d=a.d,g=a.input,f=a.c,h;d<b;)h=g[f++],h===p&&m(Error("input buffer is broken")),c|=h<<d,d+=8;h=c&(1<<b)-1;a.f=c>>>b;a.d=d-b;a.c=f;return h}
	function U(a,b){for(var c=a.f,d=a.d,g=a.input,f=a.c,h=b[0],e=b[1],k,l,q;d<e;){k=g[f++];if(k===p)break;c|=k<<d;d+=8}l=h[c&(1<<e)-1];q=l>>>16;a.f=c>>q;a.d=d-q;a.c=f;return l&65535}
	function fa(a){function b(a,b,c){var d,e,f,g;for(g=0;g<a;)switch(d=U(this,b),d){case 16:for(f=3+H(this,2);f--;)c[g++]=e;break;case 17:for(f=3+H(this,3);f--;)c[g++]=0;e=0;break;case 18:for(f=11+H(this,7);f--;)c[g++]=0;e=0;break;default:e=c[g++]=d}return c}var c=H(a,5)+257,d=H(a,5)+1,g=H(a,4)+4,f=new (w?Uint8Array:Array)(J.length),h,e,k,l;for(l=0;l<g;++l)f[J[l]]=H(a,3);h=B(f);e=new (w?Uint8Array:Array)(c);k=new (w?Uint8Array:Array)(d);a.q(B(b.call(a,c,h,e)),B(b.call(a,d,h,k)))}t=E.prototype;
	t.q=function(a,b){var c=this.b,d=this.a;this.C=a;for(var g=c.length-258,f,h,e,k;256!==(f=U(this,a));)if(256>f)d>=g&&(this.a=d,c=this.e(),d=this.a),c[d++]=f;else{h=f-257;k=L[h];0<O[h]&&(k+=H(this,O[h]));f=U(this,b);e=ia[f];0<P[f]&&(e+=H(this,P[f]));d>=g&&(this.a=d,c=this.e(),d=this.a);for(;k--;)c[d]=c[d++-e]}for(;8<=this.d;)this.d-=8,this.c--;this.a=d};
	t.V=function(a,b){var c=this.b,d=this.a;this.C=a;for(var g=c.length,f,h,e,k;256!==(f=U(this,a));)if(256>f)d>=g&&(c=this.e(),g=c.length),c[d++]=f;else{h=f-257;k=L[h];0<O[h]&&(k+=H(this,O[h]));f=U(this,b);e=ia[f];0<P[f]&&(e+=H(this,P[f]));d+k>g&&(c=this.e(),g=c.length);for(;k--;)c[d]=c[d++-e]}for(;8<=this.d;)this.d-=8,this.c--;this.a=d};
	t.e=function(){var a=new (w?Uint8Array:Array)(this.a-32768),b=this.a-32768,c,d,g=this.b;if(w)a.set(g.subarray(32768,a.length));else{c=0;for(d=a.length;c<d;++c)a[c]=g[c+32768]}this.l.push(a);this.t+=a.length;if(w)g.set(g.subarray(b,b+32768));else for(c=0;32768>c;++c)g[c]=g[b+c];this.a=32768;return g};
	t.W=function(a){var b,c=this.input.length/this.c+1|0,d,g,f,h=this.input,e=this.b;a&&("number"===typeof a.H&&(c=a.H),"number"===typeof a.P&&(c+=a.P));2>c?(d=(h.length-this.c)/this.C[2],f=258*(d/2)|0,g=f<e.length?e.length+f:e.length<<1):g=e.length*c;w?(b=new Uint8Array(g),b.set(e)):b=e;return this.b=b};
	t.B=function(){var a=0,b=this.b,c=this.l,d,g=new (w?Uint8Array:Array)(this.t+(this.a-32768)),f,h,e,k;if(0===c.length)return w?this.b.subarray(32768,this.a):this.b.slice(32768,this.a);f=0;for(h=c.length;f<h;++f){d=c[f];e=0;for(k=d.length;e<k;++e)g[a++]=d[e]}f=32768;for(h=this.a;f<h;++f)g[a++]=b[f];this.l=[];return this.buffer=g};
	t.R=function(){var a,b=this.a;w?this.K?(a=new Uint8Array(b),a.set(this.b.subarray(0,b))):a=this.b.subarray(0,b):(this.b.length>b&&(this.b.length=b),a=this.b);return this.buffer=a};function V(a){a=a||{};this.files=[];this.v=a.comment}V.prototype.L=function(a){this.j=a};V.prototype.s=function(a){var b=a[2]&65535|2;return b*(b^1)>>8&255};V.prototype.k=function(a,b){a[0]=(A[(a[0]^b)&255]^a[0]>>>8)>>>0;a[1]=(6681*(20173*(a[1]+(a[0]&255))>>>0)>>>0)+1>>>0;a[2]=(A[(a[2]^a[1]>>>24)&255]^a[2]>>>8)>>>0};V.prototype.T=function(a){var b=[305419896,591751049,878082192],c,d;w&&(b=new Uint32Array(b));c=0;for(d=a.length;c<d;++c)this.k(b,a[c]&255);return b};function W(a,b){b=b||{};this.input=w&&a instanceof Array?new Uint8Array(a):a;this.c=0;this.ba=b.verify||!1;this.j=b.password}var na={O:0,M:8},X=[80,75,1,2],Y=[80,75,3,4],Z=[80,75,5,6];function oa(a,b){this.input=a;this.offset=b}
	oa.prototype.parse=function(){var a=this.input,b=this.offset;(a[b++]!==X[0]||a[b++]!==X[1]||a[b++]!==X[2]||a[b++]!==X[3])&&m(Error("invalid file header signature"));this.version=a[b++];this.ia=a[b++];this.Z=a[b++]|a[b++]<<8;this.I=a[b++]|a[b++]<<8;this.A=a[b++]|a[b++]<<8;this.time=a[b++]|a[b++]<<8;this.U=a[b++]|a[b++]<<8;this.p=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.z=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.J=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.h=a[b++]|a[b++]<<
	8;this.g=a[b++]|a[b++]<<8;this.F=a[b++]|a[b++]<<8;this.ea=a[b++]|a[b++]<<8;this.ga=a[b++]|a[b++]<<8;this.fa=a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24;this.$=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.filename=String.fromCharCode.apply(null,w?a.subarray(b,b+=this.h):a.slice(b,b+=this.h));this.X=w?a.subarray(b,b+=this.g):a.slice(b,b+=this.g);this.v=w?a.subarray(b,b+this.F):a.slice(b,b+this.F);this.length=b-this.offset};function pa(a,b){this.input=a;this.offset=b}var qa={N:1,ca:8,da:2048};
	pa.prototype.parse=function(){var a=this.input,b=this.offset;(a[b++]!==Y[0]||a[b++]!==Y[1]||a[b++]!==Y[2]||a[b++]!==Y[3])&&m(Error("invalid local file header signature"));this.Z=a[b++]|a[b++]<<8;this.I=a[b++]|a[b++]<<8;this.A=a[b++]|a[b++]<<8;this.time=a[b++]|a[b++]<<8;this.U=a[b++]|a[b++]<<8;this.p=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.z=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.J=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.h=a[b++]|a[b++]<<8;this.g=a[b++]|a[b++]<<8;this.filename=
	String.fromCharCode.apply(null,w?a.subarray(b,b+=this.h):a.slice(b,b+=this.h));this.X=w?a.subarray(b,b+=this.g):a.slice(b,b+=this.g);this.length=b-this.offset};
	function $(a){var b=[],c={},d,g,f,h;if(!a.i){if(a.o===p){var e=a.input,k;if(!a.D)a:{var l=a.input,q;for(q=l.length-12;0<q;--q)if(l[q]===Z[0]&&l[q+1]===Z[1]&&l[q+2]===Z[2]&&l[q+3]===Z[3]){a.D=q;break a}m(Error("End of Central Directory Record not found"))}k=a.D;(e[k++]!==Z[0]||e[k++]!==Z[1]||e[k++]!==Z[2]||e[k++]!==Z[3])&&m(Error("invalid signature"));a.ha=e[k++]|e[k++]<<8;a.ja=e[k++]|e[k++]<<8;a.ka=e[k++]|e[k++]<<8;a.aa=e[k++]|e[k++]<<8;a.Q=(e[k++]|e[k++]<<8|e[k++]<<16|e[k++]<<24)>>>0;a.o=(e[k++]|
	e[k++]<<8|e[k++]<<16|e[k++]<<24)>>>0;a.w=e[k++]|e[k++]<<8;a.v=w?e.subarray(k,k+a.w):e.slice(k,k+a.w)}d=a.o;f=0;for(h=a.aa;f<h;++f)g=new oa(a.input,d),g.parse(),d+=g.length,b[f]=g,c[g.filename]=f;a.Q<d-a.o&&m(Error("invalid file header size"));a.i=b;a.G=c}}t=W.prototype;t.Y=function(){var a=[],b,c,d;this.i||$(this);d=this.i;b=0;for(c=d.length;b<c;++b)a[b]=d[b].filename;return a};
	t.r=function(a,b){var c;this.G||$(this);c=this.G[a];c===p&&m(Error(a+" not found"));var d;d=b||{};var g=this.input,f=this.i,h,e,k,l,q,s,r,M;f||$(this);f[c]===p&&m(Error("wrong index"));e=f[c].$;h=new pa(this.input,e);h.parse();e+=h.length;k=h.z;if(0!==(h.I&qa.N)){!d.password&&!this.j&&m(Error("please set password"));s=this.S(d.password||this.j);r=e;for(M=e+12;r<M;++r)ra(this,s,g[r]);e+=12;k-=12;r=e;for(M=e+k;r<M;++r)g[r]=ra(this,s,g[r])}switch(h.A){case na.O:l=w?this.input.subarray(e,e+k):this.input.slice(e,
	e+k);break;case na.M:l=(new E(this.input,{index:e,bufferSize:h.J})).r();break;default:m(Error("unknown compression type"))}if(this.ba){var u=p,n,N="number"===typeof u?u:u=0,ka=l.length;n=-1;for(N=ka&7;N--;++u)n=n>>>8^A[(n^l[u])&255];for(N=ka>>3;N--;u+=8)n=n>>>8^A[(n^l[u])&255],n=n>>>8^A[(n^l[u+1])&255],n=n>>>8^A[(n^l[u+2])&255],n=n>>>8^A[(n^l[u+3])&255],n=n>>>8^A[(n^l[u+4])&255],n=n>>>8^A[(n^l[u+5])&255],n=n>>>8^A[(n^l[u+6])&255],n=n>>>8^A[(n^l[u+7])&255];q=(n^4294967295)>>>0;h.p!==q&&m(Error("wrong crc: file=0x"+
	h.p.toString(16)+", data=0x"+q.toString(16)))}return l};t.L=function(a){this.j=a};function ra(a,b,c){c^=a.s(b);a.k(b,c);return c}t.k=V.prototype.k;t.S=V.prototype.T;t.s=V.prototype.s;v("Zlib.Unzip",W);v("Zlib.Unzip.prototype.decompress",W.prototype.r);v("Zlib.Unzip.prototype.getFilenames",W.prototype.Y);v("Zlib.Unzip.prototype.setPassword",W.prototype.L);}).call(this);


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.













	PackageLess = PackageLess;var _compat = __webpack_require__(4);var _Xhr = __webpack_require__(2);var _BVHBuilder = __webpack_require__(32);var _Package = __webpack_require__(31);var _PackReaderLess = __webpack_require__(43);var _Fragments = __webpack_require__(35); // Threshold to enable loading/handling fragments and geometry metadata in a memory optimized way.
	// 6 Mb for weak device, 32 Mb for others. And the size is the compressed size.
	// TODO: adjust threshold according to different devices.
	var MAX_FRAGMENT_PACK_SIZE = (0, _compat.isMobileDevice)() ? 6 * 1024 * 1024 : 32 * 1024 * 1024;function PackageLess(zipPack) {_Package.Package.call(this, zipPack); // This is the flag to represent whether an aggresive memory constrained mode is in use
	    // to read/parse fragment and geometry metadata and how to post process. 
	    this.memoryOptimizedMode = false;

	    // This is the object that will be used for pending geometry metadata load until fragment is ready,
	    // so that can process the most memory hunger process one by one.
	    this.pendingGeometryMetadataLoad = {};
	};

	PackageLess.prototype = Object.create(_Package.Package.prototype);
	PackageLess.prototype.constructor = PackageLess;

	PackageLess.prototype.loadAsyncResource = function (loadContext, resourcePath, contents, callback, skipDecompress) {
	    // [BIM customize] by passing an additional paramter - skipDecompress, to control
	    //                 whether request to decompress right after getting the data or 
	    //                 decompress it later (for memory consumption concern)

	    //Data is immediately available from the SVF zip
	    if (contents) {
	        callback(contents);
	        return;
	    }

	    //Launch an XHR to load the data from external file
	    var svf = this;

	    this.pendingRequests++;

	    function xhrCB(responseData) {
	        svf.pendingRequests--;

	        callback(responseData);

	        if (svf.pendingRequests == 0)
	        svf.postLoad(loadContext);
	    }

	    _Xhr.ViewingService.getItem(loadContext, loadContext.basePath + resourcePath,
	    xhrCB,
	    loadContext.onFailureCallback,
	    {
	        asynchronous: true,
	        skipDecompress: skipDecompress });

	};

	PackageLess.prototype.parseFragmentList = function (asset, loadContext, path, contents) {
	    // [BIM customize] The main change for parsing the fragment list is that,
	    // 1. If the uncompressed size is larger than the threshold of current allowed size,
	    //    then go with below process,
	    //    1.1 pending geometry metadata loading if it comes first.
	    //    1.2 load fragment list and specify 'skipDecompress' to be true.
	    //    1.3 read and parse fragments, as the data is still gzipped so it will choose a 
	    //        different stream reader to read the data chunk by chunk.
	    //    1.4 load geometry metadata and also specify 'skipDecompress' to be true.
	    //    1.5 parse geometry metadata and read it into fragment data directly. 
	    //        (this can also reduce some temporary memory used in post load processing.)
	    // 2. Otherwise, go with the normal workflow, which is almost the same as its parent implementation,
	    //    

	    // Enable the memory optimized handling when fragment pack file is too big.
	    this.memoryOptimizedMode = loadContext.perfOpt.forceMemoryOptimizedMode || asset["size"] > MAX_FRAGMENT_PACK_SIZE;

	    debug("PackageLess: memory optimized mode: " + this.memoryOptimizedMode);

	    var self = this;
	    this.loadAsyncResource(loadContext, path, contents, function (data) {

	        var usize = asset["usize"];
	        var pfr = new _PackReaderLess.PackFileReaderLess(data, usize);

	        var frags = self.fragments = new _Fragments.FragList();
	        (0, _Fragments.readFragments)(pfr, frags, self.globalOffset, loadContext.placementTransform, loadContext.objectIds);

	        pfr = null;

	        // If there is pending geometry metadata load request (as a result of enabled optimization
	        // code path to read geometry metadata directly into fragments instead of read separately then
	        // combine with fragments), then start to load it now after fragment list is ready.
	        if (self.memoryOptimizedMode && self.pendingGeometryMetadataLoad.path) {
	            self.loadAsyncResource(loadContext, self.pendingGeometryMetadataLoad.path, self.pendingGeometryMetadataLoad.contents, function (data) {

	                var pfr = new _PackReaderLess.PackFileReaderLess(data, self.pendingGeometryMetadataLoad.usize);
	                debug("PackageLess: read geometry metadata into fragment directly.");
	                self.primitiveCount = (0, _Fragments.readGeometryMetadataIntoFragments)(pfr, self.fragments);
	                self.numGeoms = pfr.getEntryCounts();
	                pfr = null;
	                self.pendingGeometryMetadataLoad.contents = null;
	            }, self.memoryOptimizedMode);
	        }
	    }, self.memoryOptimizedMode);

	    // If fragment reading optimization not enabled and there is a pending geometry metadata load request, 
	    // then load geometry data right away as usual.
	    if (!this.memoryOptimizedMode && this.pendingGeometryMetadataLoad.path) {
	        var path = this.pendingGeometryMetadataLoad.path;
	        var contents = this.pendingGeometryMetadataLoad.contents;
	        this.pendingGeometryMetadataLoad = {};

	        // Then fallback to the normal way of parsing geometry metadata.
	        debug("PackageLess: read geometry metadata as usual.");
	        _Package.Package.prototype.parseGeometryMetadata.call(this, null, loadContext, path, contents);
	    }
	};

	PackageLess.prototype.parseGeometryMetadata = function (asset, loadContext, path, contents) {
	    // [BIM customize] the sequence of reading fragment and geometry metadata is not fixed. So, 
	    // 1. If fragments is ready first, then load geometry metadata and read into fragment directly,
	    //    no matter memory optimized mode is true or not.
	    // 2. If fragments is not ready yet, pending geometry metadata loading, and decide when to
	    //    load it after memory optimized mode is set.

	    var usize = asset["usize"];

	    if (this.fragments) {
	        var self = this;
	        this.loadAsyncResource(loadContext, path, contents, function (data) {

	            var pfr = new _PackReaderLess.PackFileReaderLess(data, usize);
	            self.primitiveCount = (0, _Fragments.readGeometryMetadataIntoFragments)(pfr, self.fragments);
	            self.numGeoms = pfr.getEntryCounts();
	            pfr = null;
	        }, self.memoryOptimizedMode);
	    } else
	    {
	        this.pendingGeometryMetadataLoad.path = path;
	        this.pendingGeometryMetadataLoad.contents = contents;
	        this.pendingGeometryMetadataLoad.usize = usize;
	    }

	};

	PackageLess.prototype.postLoadOfFragments = function (loadContext) {
	    // [BIM customize] If memory optimized mode is not set, then go with 
	    // the normal workflow.
	    if (!this.memoryOptimizedMode) {
	        _Package.Package.prototype.postLoadOfFragments.call(this, loadContext);
	    } else
	    {
	        // Otherwise, only calculate mesh2frag, which may be missing if
	        // this file is old and hasn't got any geometry metadata. Because, 
	        // * Geometry metadata has already been read into fragments list.
	        if (!this.fragments.mesh2frag)
	        this.calculateMesh2Frag(this.fragments);
	    }
	};

	PackageLess.prototype.postLoadOfObjectIds = function (loadContext) {
	    // [BIM customize] If memory optimized mode is not set, then go with 
	    // the normal workflow.
	    if (!this.memoryOptimizedMode) {
	        _Package.Package.prototype.postLoadOfObjectIds.call(this, loadContext);
	    } else
	    {
	        // Otherwise, clean up unused pack files.
	        // The implementation is different from its parent, because the fragments are
	        // filtered right away after reading it so that the pack ids only represents
	        // the used ones, so can direct remove the geompacks which are not used any more.
	        if (loadContext.objectIds && loadContext.objectIds.length > 0) {
	            // Find out how many pack files are really used.
	            var len = this.geompacks.length,
	            frags = this.fragments,
	            i = 0;
	            var usedPackFile = new Int8Array(len);

	            for (i = 0; i < frags.packIds.length; i++) {
	                // Set 0xF to the index which the pack id is used.
	                usedPackFile[frags.packIds[i]] = 0xF;
	            }

	            var pt = 0;
	            for (i = 0; i < usedPackFile.length; i++) {
	                if (usedPackFile[i] === 0xF) {
	                    this.geompacks[pt] = this.geompacks[i];
	                    pt++;
	                }
	            }

	            // Cut unused one.
	            if (pt < len) {
	                this.geompacks.splice(pt, len - pt);
	            }

	        }
	    }
	};

	PackageLess.prototype.postLoadComplete = function (loadContext) {
	    // [BIM customize] If memory optimized mode is on, then 
	    // Delay posting SVF by waiting until BVH build finishes;
	    // then post both BVH and SVF to main thread together.
	    if (!this.memoryOptimizedMode) {
	        _Package.Package.prototype.postLoadComplete.call(this, loadContext);
	    } else
	    {

	        if (this.fragments.polygonCounts) {
	            //Build the R-Tree
	            var t0 = performance.now();
	            var mats = this.materials ? this.materials["materials"] : null;
	            if (mats)
	            this.addTransparencyFlagsToMaterials(mats);
	            this.bvh = new _BVHBuilder.BVHBuilder(this.fragments, mats);
	            this.bvh.build(loadContext.bvhOptions);
	            var t1 = performance.now();
	            loadContext.worker.debug("BVH build time (worker thread):" + (t1 - t0));

	        }

	        loadContext.loadDoneCB("svf");

	        loadContext.loadDoneCB("done");
	    }
	};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.






	PackFileReaderLess = PackFileReaderLess;var _PackReader = __webpack_require__(34);var _InputStream = __webpack_require__(33);var _InputStreamLess = __webpack_require__(44);var pako = __webpack_require__(8); // [BIM customize] Construct a different pack file reader, that use a different input stream
	// implementation that use much less memory.
	function PackFileReaderLess(data, usize) {// When server side (S3 and viewing service) is configured properly,
	    // browser can decompress the pack file for us.
	    // Here the check is for backward compatibility purpose.
	    // ??? we actually rely on the server doesn't configure to let browser do the compress automatically.
	    // ??? Luckily at the moment, seems this is the case.
	    // ??? TODO: if we can't control the decompress on our own, then we have to
	    // ???       chunk fragment list to a reasonable size.
	    var stream;
	    var chunckStreamEnabled = false;
	    if (data[0] == 31 && data[1] == 139) {

	        // If usize is specified, we assume it is going to read pack file in a steaming style.
	        if (usize) {
	            // Decompress in a streaming style.

	            // Ok, let's use input steam less to decompress data chunck by chunck,
	            // so as to reduce the overall memory footprint.
	            // In theory, to read all the data there are 2 more times decompress needed.
	            // Round 1, decompress and get the first few values and then all the way to the end,
	            //          and get toc/types offset, then throw all.
	            // Round 2, decompress to read content of toc and types only, then throw all.
	            // Round 3, decompress to each offset of fragment, and throw unused decompressed chunck.
	            // However, we could combine 1 and 2 together.
	            chunckStreamEnabled = true;
	            stream = new _InputStreamLess.InputStreamLess(data, usize);

	            var len = stream.getInt32();
	            this.type = stream.getString(len);
	            this.version = stream.getInt32();

	            // To reduce the times for re-decompress the data, let's prepare the data
	            // for both round 1 and 2 cases.
	            var off = Math.floor(stream.byteLength * 0.9);
	            stream.seek(off, stream.byteLength - off);
	        } else
	        {
	            // Decompress all at once, and use InputStream to read.
	            data = pako.ungzip(data);

	            stream = new _InputStream.InputStream(data);

	            var len = stream.getInt32();
	            this.type = stream.getString(len);
	            this.version = stream.getInt32();

	        }
	    } else

	    {
	        // Already decopressed, so use InputStream.
	        // Input stream read data from the source that is alreay decompressed.
	        stream = new _InputStream.InputStream(data);
	    }

	    this.stream = stream;
	    this.types = null;
	    this.entryOffsets = [];

	    //read the table of contents
	    {
	        // Jump to file footer.
	        stream.seek(stream.byteLength - 8, 8, chunckStreamEnabled);

	        // Jump to toc.
	        var tocOffset = stream.getUint32();
	        this.typesOffset = stream.getUint32();

	        // Populate type sets.
	        stream.seek(this.typesOffset, 1, chunckStreamEnabled);
	        var typesCount = this.readU32V();
	        this.types = [];
	        for (var i = 0; i < typesCount; ++i) {
	            this.types.push({
	                "entryClass": this.readString(),
	                "entryType": this.readString(),
	                "version": this.readU32V() });}


	        // Populate data offset list.
	        stream.seek(tocOffset, 1, chunckStreamEnabled);
	        var entryCount = this.readU32V();
	        var dso = this.entryOffsets;
	        for (var i = 0; i < entryCount; ++i) {
	            dso.push(stream.getUint32());}

	        // Restore sanity of the world.
	        stream.seek(0);
	    }
	};

	PackFileReaderLess.prototype = Object.create(_PackReader.PackFileReader.prototype);

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.







	InputStreamLess = InputStreamLess;var pako = __webpack_require__(8);"use strict"; /** @constructor */ // This class will read value from compressed data,
	// decopress only necessary data and throw away unused.
	function InputStreamLess(buf, usize) {// Offset is the offset to decompressed data.
	    // byteLength is the total size of decompressed data.
	    this.offset = 0;
	    this.byteLength = usize;
	    this.range = 0;
	    // Assume the buffer is compressed.
	    this.compressedBuffer = buf;
	    this.compressedByteLength = buf.length;
	    this.compressedOffset = 0;
	    this.decompressEnd = false;
	    // This is to record how many times decompress from scratch. for debug purpose.
	    this.resetCount = 0;

	    //We will use these shared memory arrays to
	    //convert from bytes to the desired data type.
	    this.convBuf = new ArrayBuffer(8);
	    this.convUint8 = new Uint8Array(this.convBuf);
	    this.convUint16 = new Uint16Array(this.convBuf);
	    this.convInt32 = new Int32Array(this.convBuf);
	    this.convUint32 = new Uint32Array(this.convBuf);
	    this.convFloat32 = new Float32Array(this.convBuf);
	    this.convFloat64 = new Float64Array(this.convBuf);

	    // Compressed chunk size is the size for decompressing each time.
	    // Decompressed chunk size is the buffer to hold decompressed data.
	    this.COMPRESSED_chunk_SIZE = 512 * 1024;
	    this.DECOMPRESSED_chunk_SIZE = 256 * 1024;

	    // chunks for decompressed data.
	    this.chunks = [];
	    this.chunksByteLengthMax = 0;
	    this.chunksByteLengthMin = 0;

	    // Maintain chunk and chunk offset for reading current data.
	    this.chunkPointer = null;
	    this.chunkOffset = 0;
	    // temp chunk is for reading data that stride over multiple chunks.
	    this.tempchunk = {
	        startIdx: 0,
	        endIdx: 0,
	        buffer: null };


	    // Infalte for decompressing incremantally. The lib we used is pako_inflate.min.js
	    this.inflate = this.getInflate();

	    // Prepare first 1K data for quick access.
	    this.prepare(0, 1024);
	}

	InputStreamLess.prototype.getInflate = function () {
	    if (!this.inflate) {
	        this.inflate = new pako.Inflate({ level: 3, chunkSize: this.DECOMPRESSED_chunk_SIZE });

	        var self = this;
	        this.inflate.onData = function (chunk) {

	            // Remove unused chunk for current decompressing.
	            self.chunksByteLengthMax += chunk.byteLength;
	            if (self.chunksByteLengthMax < self.offset) {
	                chunk = null;
	                self.chunksByteLengthMin = self.chunksByteLengthMax;
	            }

	            self.chunks.push(chunk);
	        };

	        this.inflate.onEnd = function () {
	            self.decompressEnd = true;
	            self.inflate = null;
	            // Check decompressed size is expected.
	            if (self.chunksByteLengthMax != self.byteLength)
	            throw "Decompress error, unexpected size.";
	        };
	    }

	    return this.inflate;
	};

	InputStreamLess.prototype.prepare = function (off, range, donotclear) {
	    // If required data hasn't decompressed yet, let's do it.
	    if (this.chunksByteLengthMin > off) {
	        // In this case, need to reset stream and decompress from scratch again.
	        this.reset();
	        this.offset = off;
	        this.range = range;
	    }

	    // Remove unused chunks if no longer used for subsequent reading.
	    if (!donotclear) {
	        var idx = Math.floor(off / this.DECOMPRESSED_chunk_SIZE);
	        var startIdx = Math.floor(this.chunksByteLengthMin / this.DECOMPRESSED_chunk_SIZE);
	        var endIdx = this.chunks.length < idx ? this.chunks.length : idx;
	        for (var i = startIdx; i < endIdx; i++) {
	            this.chunks[i] = null;
	        }
	        this.chunksByteLengthMin = endIdx * this.DECOMPRESSED_chunk_SIZE;
	    }

	    // Prepare further decompressed data.
	    var range = range || 1;
	    var expectEnd = off + range;
	    expectEnd = expectEnd > this.byteLength ? this.byteLength : expectEnd;
	    var reachEnd = false;
	    while (expectEnd > this.chunksByteLengthMax)
	    {
	        var len = this.COMPRESSED_chunk_SIZE;
	        if (this.compressedOffset + len >= this.compressedByteLength) {
	            len = this.compressedByteLength - this.compressedOffset;
	            reachEnd = true;
	        }

	        // Push another compressed data chunk to decompress.
	        var data = new Uint8Array(this.compressedBuffer.buffer, this.compressedOffset, len);
	        this.getInflate().push(data, reachEnd);

	        // Move offset forward as decompress processing.
	        this.compressedOffset += len;

	        if (reachEnd) {
	            break;
	        }
	    }

	};

	InputStreamLess.prototype.ensurechunkData = function (len) {
	    // ensure the data is ready for immediate reading.
	    len = len || 1;
	    var chunkLen = this.chunks.length;

	    var chunkIdx = Math.floor(this.offset / this.DECOMPRESSED_chunk_SIZE);
	    var endIdx = Math.floor((this.offset + len - 1) / this.DECOMPRESSED_chunk_SIZE);
	    if (endIdx >= chunkLen) {
	        var length = (endIdx - chunkLen + 1) * this.DECOMPRESSED_chunk_SIZE;
	        // When do another prepare in the middle of ensuring data,
	        // do not clear any chunk yet, as it may be still in use.
	        this.prepare(this.DECOMPRESSED_chunk_SIZE * chunkLen, length, true);
	    }

	    if (chunkIdx < endIdx) {
	        if (this.tempchunk.startIdx > chunkIdx || this.tempchunk.endIdx < endIdx) {
	            var size = (endIdx - chunkIdx + 1) * this.DECOMPRESSED_chunk_SIZE;
	            this.tempchunk.buffer = new Uint8Array(size);
	            var pos = 0;
	            for (var i = chunkIdx; i <= endIdx; i++) {
	                this.tempchunk.buffer.set(this.chunks[i], pos);
	                pos += this.DECOMPRESSED_chunk_SIZE;
	            }
	            this.tempchunk.startIdx = chunkIdx;
	            this.tempchunk.endIdx = endIdx;
	        }
	        this.chunkPointer = this.tempchunk.buffer;
	    } else
	    {
	        this.chunkPointer = this.chunks[chunkIdx];
	    }

	    this.chunkOffset = this.offset - chunkIdx * this.DECOMPRESSED_chunk_SIZE;
	    this.offset += len;
	};

	InputStreamLess.prototype.seek = function (off, range, donotclear) {
	    this.offset = off;
	    this.range = range;
	    this.prepare(off, range, donotclear);
	};

	InputStreamLess.prototype.getBytes = function (len) {
	    this.ensurechunkData(len);
	    var ret = new Uint8Array(this.chunkPointer.buffer, this.chunkOffset, len);

	    return ret;
	};

	InputStreamLess.prototype.getVarints = function () {
	    var b;
	    var value = 0;
	    var shiftBy = 0;
	    do {
	        this.ensurechunkData();
	        b = this.chunkPointer[this.chunkOffset];
	        value |= (b & 0x7f) << shiftBy;
	        shiftBy += 7;
	    } while (b & 0x80);
	    return value;
	};

	InputStreamLess.prototype.getUint8 = function () {
	    this.ensurechunkData();
	    return this.chunkPointer[this.chunkOffset];
	};

	InputStreamLess.prototype.getUint16 = function () {

	    this.ensurechunkData();
	    this.convUint8[0] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    this.convUint8[1] = this.chunkPointer[this.chunkOffset];
	    return this.convUint16[0];
	};

	InputStreamLess.prototype.getInt16 = function () {
	    var tmp = this.getUint16();
	    //make negative integer if the ushort is negative
	    if (tmp > 0x7fff)
	    tmp = tmp | 0xffff0000;
	    return tmp;
	};

	InputStreamLess.prototype.getInt32 = function () {

	    var dst = this.convUint8;

	    this.ensurechunkData();
	    dst[0] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[1] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[2] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[3] = this.chunkPointer[this.chunkOffset];

	    return this.convInt32[0];
	};

	InputStreamLess.prototype.getUint32 = function () {

	    var dst = this.convUint8;

	    this.ensurechunkData();
	    dst[0] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[1] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[2] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[3] = this.chunkPointer[this.chunkOffset];

	    return this.convUint32[0];
	};

	InputStreamLess.prototype.getFloat32 = function () {

	    var dst = this.convUint8;

	    this.ensurechunkData();
	    dst[0] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[1] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[2] = this.chunkPointer[this.chunkOffset];
	    this.ensurechunkData();
	    dst[3] = this.chunkPointer[this.chunkOffset];

	    return this.convFloat32[0];
	};

	InputStreamLess.prototype.getFloat64 = function () {

	    var dst = this.convUint8;
	    for (var i = 0; i < 8; i++) {
	        this.ensurechunkData();
	        dst[i] = this.chunkPointer[this.chunkOffset];
	    }

	    return this.convFloat64[0];
	};

	InputStreamLess.prototype.getString = function (len) {
	    var dst = "";
	    this.ensurechunkData(len);
	    var src = this.chunkPointer;

	    for (var i = this.chunkOffset, iEnd = this.chunkOffset + len; i < iEnd; i++) {
	        dst += String.fromCharCode(src[i]);
	    }

	    var res;
	    try {
	        res = decodeURIComponent(escape(dst));
	    } catch (e) {
	        res = dst;
	        debug("Failed to decode string " + res);
	    }

	    return res;
	};

	InputStreamLess.prototype.reset = function (buf) {
	    this.resetCount++;
	    debug("InputStream Less Reset: " + this.resetCount);

	    if (buf) {
	        this.compressedBuffer = buf;
	        this.compressedByteLength = buf.length;
	    }

	    this.offset = 0;
	    this.chunks = [];
	    this.chunksByteLengthMax = 0;
	    this.chunksByteLengthMin = 0;
	    this.compressedOffset = 0;
	    this.decompressEnd = false;
	    this.chunkPointer = null;
	    this.chunkOffset = 0;
	    this.inflate = null;

	    this.tempchunk.startIdx = 0;
	    this.tempchunk.endIdx = 0;
	    this.tempchunk.buffer = null;
	};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	
	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.

















































































































































































































































































































































































































































	register = register;var _F2dOnDemand = __webpack_require__(46);var _F2d = __webpack_require__(47);var _ErrorCodes = __webpack_require__(6);var MAX_BUFFER_COUNT = 1e20; // Large number
	function tryCatch(_this, f) {try {f();} catch (exc) {_this.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "", { "exception": exc.toString(), "stack": exc.stack });_this.postMessage(null);}}function restart(worker, initialLoadContext) {var parser = initialLoadContext.f2dLoadOptions.onDemandLoading ? _F2dOnDemand.F2DOnDemand : _F2d.F2D;var f2d = worker.f2d = new parser(initialLoadContext.metadata, initialLoadContext.manifest, initialLoadContext.basePath, initialLoadContext.f2dLoadOptions);f2d.F2D_MESH_COUNT_OLD = 0;if (worker.onDemandLoading) {worker.nextFrame = 0;worker.queuedMeshes = [];if (!worker.useFrames) f2d.load(initialLoadContext, worker.frames[0]);}return f2d;}function reset(worker, initialLoadContext) {if (worker.onDemandLoading) {// Clear unpromised buffers from request queue
	        for (var i = 0; i < worker.requestQueue.length; ++i) {if (worker.requestQueue[i]) {if (worker.requestQueue[i].promised) worker.requestQueue[i].rendered = false;else worker.requestQueue[i] = null;}}worker.nextRequest = 0;}return restart(worker, initialLoadContext);}function doParseF2D(loadContext) {var _this = loadContext.worker;_this.postMessage({ progress: 0.01 }); //Tell the main thread we are alive
	    if (loadContext.data) {_this.postMessage({ progress: 0.5 }); //rough progress reporting -- can do better
	        if (loadContext.f2dLoadOptions.onDemandLoading) {var data = loadContext.data;if (!(data instanceof Uint8Array)) data = new Uint8Array(data);_this.frames = [data];_this.nextFrame = 1;_this.finalFrame = true;_this.initialLoadContext = loadContext;_this.onDemandLoading = true;_this.streamStates = []; // setup the stream state array
	            _this.requestQueue = [];_this.promisedBuffers = [];_this.parsePromiseRequest = false;}_this.totalBufferCount = MAX_BUFFER_COUNT;_this.useFrames = false;var f2d = reset(_this, loadContext);if (_this.onDemandLoading) {// First post needs to post entire F2D so we can set up bounding boxes, etc.
	            var msg = { "f2dframe": f2d };_this.postMessage(msg);} else {loadContext.loadDoneCB = function (success) {if (success) {var msg = { "f2d": f2d };_this.postMessage(msg);} else {_this.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "", {});_this.postMessage(null);}};tryCatch(_this, function () {f2d.load(loadContext, loadContext.data);});}} else {_this.postMessage(null);}}function doParseF2DFrame(loadContext) {var _this = loadContext.worker;var f2d = _this.f2d;if (!f2d && loadContext.data) {_this.postMessage({ progress: 0.5 }); //rough progress reporting -- can do better
	        if (loadContext.f2dLoadOptions.onDemandLoading) {_this.frames = [];_this.finalFrame = false;_this.initialLoadContext = loadContext;_this.onDemandLoading = true;_this.streamStates = []; // setup the stream state array
	            _this.requestQueue = [];_this.promisedBuffers = [];_this.parsePromiseRequest = false;}_this.totalBufferCount = MAX_BUFFER_COUNT;_this.useFrames = true;f2d = reset(_this, loadContext); // First post needs to post entire F2D so we can set up bounding boxes, etc.
	        var msg = { "f2dframe": f2d };_this.postMessage(msg);}function noLoadDoneCallback() {} // Save the stream state for a buffer.
	    // dataBuffer is the index of the data buffer in this.frames.
	    function saveStreamState(bufferId, dataBuffer) {var streamState = f2d.saveState(); // Be careful with partial buffers
	        _this.streamStates[bufferId + (streamState.vbbCount != 0)] = streamState;streamState.dataBuffer = dataBuffer;} // Restore the stream state
	    function restoreStreamState(bufferId) {// Need to reposition the stream. If the buffer id is
	        // past all states, then start at the last state entered.
	        if (bufferId >= _this.streamStates.length) bufferId = _this.streamStates.length - 1; // Search for the first saved state before the requested id
	        var state;for (var id = bufferId; !(state = _this.streamStates[id]); --id) {if (id <= 0) {f2d = restart(_this, _this.initialLoadContext);return;}} // Restore the state
	        var dataBuffer = _this.frames[state.dataBuffer];if (f2d.stream && f2d.stream.buffer == dataBuffer) dataBuffer = null;if (f2d.restoreState(state, dataBuffer)) {// OK. it worked, clear the queued meshes, reset the mesh count and data buffer
	            _this.queuedMeshes.length = 0; // If there was a partial buffer, when we saved the state, then we
	            // decrement the buffer count so the partial buffer is discarded. 
	            f2d.F2D_MESH_COUNT_OLD = id - (state.vbbCount != 0);_this.nextFrame = state.dataBuffer + 1;} else {// Restore failed, restart the stream and the beginning.
	            f2d = restart(_this, _this.initialLoadContext);}}function acceptMeshCallback(mesh) {if (f2d.F2D_MESH_COUNT_OLD < loadContext.bufferId) {++f2d.F2D_MESH_COUNT_OLD;return false;}return true;}function nextRequest() {var next = _this.nextRequest; // Look for the next buffer requested for rendering
	        while (next < _this.requestQueue.length) {var request = _this.requestQueue[next];if (request && request.rendered) {_this.nextRequest = next;return request;}++next;}return null;}function loadFrames() {// Get next request
	        loadContext = nextRequest(); // We will process a promised buffer out of order, if there are any
	        // and it is their turn or we don't have any other buffer to process
	        var doPromise = _this.parsePromiseRequest;_this.parsePromiseRequest = true;if (doPromise || !loadContext) {var next; // Find the next promised load context
	            while (_this.promisedBuffers.length > 0) {next = _this.requestQueue[_this.promisedBuffers.shift()];if (next && next.promised) {loadContext = next;_this.parsePromiseRequest = false;break;}}}if (!loadContext) return; // Set up the load context for parsing
	        loadContext.loadDoneCB = noLoadDoneCallback;loadContext.acceptMeshCB = acceptMeshCallback; // Save the state for buffer 0.
	        if (_this.streamStates.length == 0) saveStreamState(0, 0); // Restore the stream state, if needed
	        if (f2d && (loadContext.bufferId < f2d.F2D_MESH_COUNT_OLD || loadContext.bufferId > f2d.F2D_MESH_COUNT_OLD + _this.queuedMeshes.length)) {restoreStreamState(loadContext.bufferId);} // Remove skipped buffers from queuedMeshes
	        f2d.F2D_MESH_COUNT_OLD += _this.queuedMeshes.splice(0, loadContext.bufferId - f2d.F2D_MESH_COUNT_OLD).length;if (loadContext.bufferId < f2d.F2D_MESH_COUNT_OLD + _this.queuedMeshes.length) {// Extract meshes for this message
	            f2d.meshes = _this.queuedMeshes.splice(0, 1); // Mark the final frame when we get to the end of the F2D the first time
	            loadContext.finalFrame = _this.finalFrame && _this.nextFrame == _this.frames.length && _this.queuedMeshes.length == 0 && f2d.stream == null && _this.totalBufferCount == MAX_BUFFER_COUNT;loadDoneCallback(true, true);} else {var startId = loadContext.bufferId;while (startId <= loadContext.bufferId) {if (f2d.stream == null) {// If we loaded a single frame
	                    // Need another frame
	                    if (_this.nextFrame < _this.frames.length) {// Got more frames, so get the next one
	                        loadContext.data = _this.frames[_this.nextFrame++];} else if (_this.finalFrame && _this.queuedMeshes.length == 0) {// No more data. remove request
	                        break;} else {// Need more data from the stream worker
	                        return;}} // Mark the last frame we process
	                if (_this.nextFrame >= _this.frames.length) loadContext.finalFrame = _this.finalFrame;tryCatch(_this, function () {f2d.loadFrames(loadContext);}); // Concatenate meshes with meshes from earlier parse
	                _this.queuedMeshes = _this.queuedMeshes.concat(f2d.meshes); // Remove meshes before start buffer id
	                f2d.F2D_MESH_COUNT_OLD += _this.queuedMeshes.splice(0, loadContext.bufferId - f2d.F2D_MESH_COUNT_OLD).length; // Extract meshes for this message
	                f2d.meshes = _this.queuedMeshes.splice(0, 1); // Set the start of the current meshes
	                if (f2d.meshes.length) {// Mark the final frame when we get to the end of the F2D the first time
	                    loadContext.finalFrame = _this.finalFrame && _this.nextFrame == _this.frames.length && _this.queuedMeshes.length == 0 && f2d.stream == null && _this.totalBufferCount == MAX_BUFFER_COUNT;loadDoneCallback(true, true);startId = f2d.F2D_MESH_COUNT_OLD; // Save stream state so we can seek to it later
	                    if (!_this.streamStates[f2d.F2D_MESH_COUNT_OLD + _this.queuedMeshes.length]) saveStreamState(f2d.F2D_MESH_COUNT_OLD + _this.queuedMeshes.length, _this.nextFrame - 1);}}} // Bump to the next render request, if we are parsing the current one.
	        if (loadContext.bufferId == _this.nextRequest) ++_this.nextRequest;_this.requestQueue[loadContext.bufferId] = null;if (loadContext.promised) {var index = _this.promisedBuffers.indexOf(loadContext.bufferId);if (index >= 0) _this.promisedBuffers.splice(index, 1);}_this.timer = setTimeout(loadFrames, 2);}function loadDoneCallback(success, finalFlush) {if (success) {if (!f2d.meshes.length && !finalFlush) {// No new data coming in.
	                // debug("F2D streaming : no new data coming in.");
	                return;} else {var msg = { "f2dframe": true, "meshes": f2d.meshes, "baseIndex": f2d.F2D_MESH_COUNT_OLD, "bbox": f2d.bbox };f2d.F2D_MESH_COUNT_OLD += f2d.meshes.length; // Are we at the end of the file? finalFrame means we have received
	                // the last frame from the file. nextFrame == frame.length means
	                // we have or are parsing it. f2d.stream == null means the parsing is done
	                if (loadContext.finalFrame) {//Add f2d properties which are cumulative and their
	                    //final values are not known until the end
	                    msg.cumulativeProps = { maxObjectNumber: f2d.maxObjectNumber, viewports: f2d.viewports, clips: f2d.clips, strings: f2d.strings, stringDbIds: f2d.stringDbIds, stringBoxes: f2d.stringBoxes };msg.finalFrame = finalFlush;_this.totalBufferCount = f2d.F2D_MESH_COUNT_OLD;if (_this.onDemandLoading) {// Before we know what the final buffer count is we can
	                        // queue up requests outside of the buffer count.
	                        // Remove any entries that are invalid and modify the restart
	                        _this.requestQueue.splice(_this.totalBufferCount);}} // User transferable objects to pass the array buffers used by mesh without deep copying.
	                var transferList = [];for (var i = 0, e = f2d.meshes.length; i < e; ++i) {transferList.push(f2d.meshes[i].vb.buffer);transferList.push(f2d.meshes[i].indices.buffer);}_this.postMessage(msg, transferList);f2d.meshes = [];}} else {_this.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "", {});_this.postMessage(null);}}if (_this.onDemandLoading) {// Data just gets put on the frame list
	        if (loadContext.data) {var data = loadContext.data;if (!(data instanceof Uint8Array)) data = new Uint8Array(data);_this.frames.push(data);if (loadContext.finalFrame) _this.finalFrame = true;} else if (loadContext.finalFrame) {_this.finalFrame = true;} else if (loadContext.cancel) {// restart the stream
	            if (f2d) f2d = reset(_this, _this.initialLoadContext);_this.postMessage({ canceled: true });} else if (loadContext.cancelPromise) {// Cancel a promised buffer
	            var request = _this.requestQueue[loadContext.cancelPromise]; // Make sure it is still requested
	            if (request) {// Clear the promise from the request queue
	                if (!request.rendered) _this.requestQueue[loadContext.cancelPromise] = null;else request.promise = false;} // Clear the buffer from the promised buffers
	            var index = _this.promisedBuffers.indexOf(loadContext.cancelPromise);if (index >= 0) _this.promisedBuffers.splice(index, 1);} else if (loadContext.bufferId >= 0 && loadContext.bufferId < _this.totalBufferCount) {// This should be a request for a buffer
	            var request = _this.requestQueue[loadContext.bufferId]; // Conditional requests, mean queue it only if it is already queued.
	            // This is used to reorder requests that were already requested by the loader,
	            // but haven't been received. For example, if a buffer was requested for render,
	            // and then by a promise before it is received, this will put it in the promise
	            // queue, if it hasn't been sent. If it was sent, the the loader will process
	            // it when it gets it. The idea is that it will never add another request,
	            // just reorder an existing request.
	            if (!loadContext.conditional || request) {if (loadContext.promised) _this.promisedBuffers.push(loadContext.bufferId);if (request) {loadContext.promised |= request.promised;loadContext.rendered |= request.rendered;} // Keep track of the request
	                _this.requestQueue[loadContext.bufferId] = loadContext;}}if (f2d) {if (_this.timer) clearTimeout(_this.timer);_this.timer = setTimeout(loadFrames, 2);}} else {loadContext.loadDoneCB = loadDoneCallback;tryCatch(_this, function () {f2d.loadFrames(loadContext);});}}function register(workerMain) {workerMain.register("PARSE_F2D", { doOperation: doParseF2D });workerMain.register("PARSE_F2D_FRAME", { doOperation: doParseF2DFrame });}

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	
	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.





	F2DOnDemand = F2DOnDemand;var _F2d = __webpack_require__(47);var _Logger = __webpack_require__(3);var _InputStream = __webpack_require__(33);function F2DOnDemand(metadata, manifest, basePath, options) {
	    _F2d.F2D.call(this, metadata, manifest, basePath, options);
	}

	F2DOnDemand.prototype = Object.create(_F2d.F2D.prototype);
	F2DOnDemand.prototype.constructor = F2DOnDemand;

	F2DOnDemand.prototype.load = function (loadContext, fydoPack) {

	    if (!(fydoPack instanceof Uint8Array))
	    fydoPack = new Uint8Array(fydoPack);
	    this.data = fydoPack;
	    this.readHeader();
	};

	F2DOnDemand.prototype.loadFrames = function (loadContext) {

	    this.loadContext = loadContext;
	    this.acceptMeshCB = loadContext.acceptMeshCB;

	    // If there was data left from previous parse, the do it
	    if (this.stream == null) {
	        // If there is data left, then we stopped before ending
	        var data = loadContext.data;

	        if (data) {
	            if (!(data instanceof Uint8Array))
	            data = new Uint8Array(data);
	            this.data = data;
	        } else if (loadContext.finalFrame) {
	            this.data = null;

	            if (this.stringBoxes.length) {
	                var fbuf = new Float32Array(this.stringBoxes.length);
	                fbuf.set(this.stringBoxes);
	                this.stringBoxes = fbuf;
	            }
	        }
	    }

	    this.parseFrames(loadContext.finalFrame);

	    loadContext.loadDoneCB(true);
	};


	F2DOnDemand.prototype.pushMesh = function (mesh) {
	    if (!this.acceptMeshCB || this.acceptMeshCB(mesh)) {
	        _F2d.F2D.prototype.pushMesh.call(this, mesh);
	    }
	};

	F2DOnDemand.prototype.parseFrames = function (flush) {

	    if (this.data || this.stream) {
	        if (!this.stream)
	        this.stream = new _InputStream.InputStream(this.data);
	        var stream = this.stream;
	        while (stream.offset < stream.byteLength) {
	            if (this.meshes.length > 0)
	            return;
	            this.parseDataType();
	            if (this.error)
	            break;
	            this.opCount++;
	        }
	    } else if (!flush) {
	        _Logger.logger.warn("Unexpected F2D parse state: If there is no data, we only expect a flush command, but flush was false.");
	    }

	    if (flush) {
	        this.flushBuffer(0, true);
	    }

	    this.stream = null;
	    this.data = null;
	};

	/**
	     * Save the state of the F2D stream.
	     * @returns {stateObject} the saved state
	     */
	F2DOnDemand.prototype.saveState = function () {
	    var state = {};
	    state.fontCount = this.fontCount;
	    state.fontId = this.fontId;
	    state.objectMemberQueue = [].concat(this.objectMemberQueue); // Clone array of parse data
	    state.viewportCount = this.viewports.length; // Array is only appended to, so just need length
	    state.currentVpId = this.currentVpId;
	    state.clipsCount = this.clips.length; // Array is only appended to, so just need length
	    state.stringsCount = this.strings.length; // Array is only appended to, so just need length
	    state.currentStringNumber = this.currentStringNumber;
	    state.currentStringBox = this.currentStringBox.clone(); // Clone bounding box
	    state.objectNumber = this.objectNumber;
	    state.currentFakeId = this.currentFakeId;
	    state.maxObjectNumber = this.maxObjectNumber;
	    state.objectStack = [].concat(this.objectStack); // Clone arrays of parse data
	    state.objectNameStack = [].concat(this.objectNameStack); // Clone array of parse data

	    // Clone the parseObjState. We just clone the known members, mostly because I read
	    // that that was the fastest way to do it. We could use JSON or loops to do it.
	    // The members of each subobject are named when added to the objectNameStack.
	    var pstate = state.parseObjState = {};
	    var polyTri = pstate.polyTriangle = {};
	    polyTri.points = this.parseObjState.polyTriangle.points;
	    polyTri.indices = this.parseObjState.polyTriangle.indices;
	    polyTri.colors = this.parseObjState.polyTriangle.colors;
	    var viewport = pstate.viewport = {};
	    viewport.units = this.parseObjState.viewport.units;
	    viewport.transform = this.parseObjState.viewport.transform;
	    var clip = pstate.clip = {};
	    clip.contourCounts = this.parseObjState.clip.contourCounts;
	    clip.points = this.parseObjState.clip.points;
	    clip.indices = this.parseObjState.clip.indices;
	    var raster = pstate.raster = {};
	    raster.position = this.parseObjState.raster.position;
	    raster.width = this.parseObjState.raster.width;
	    raster.height = this.parseObjState.raster.height;
	    raster.imageId = this.parseObjState.raster.imageId;
	    var text = pstate.text = {};
	    text.string = this.parseObjState.text.string;
	    text.position = this.parseObjState.text.position;
	    text.height = this.parseObjState.text.height;
	    text.widthScale = this.parseObjState.text.widthScale;
	    text.rotation = this.parseObjState.text.rotation;
	    text.oblique = this.parseObjState.text.oblique;
	    text.charWidths = this.parseObjState.text.charWidths;
	    var fontDef = pstate.fontDef = {};
	    fontDef.name = this.parseObjState.fontDef.name;
	    fontDef.fullName = this.parseObjState.fontDef.fullName;
	    fontDef.flags = this.parseObjState.fontDef.flags;
	    fontDef.spacing = this.parseObjState.fontDef.spacing;
	    fontDef.panose = this.parseObjState.fontDef.panose;
	    pstate.uknown = {};

	    state.lineWeight = this.lineWeight;
	    state.color = this.color;
	    state.layer = this.layer;
	    state.bgColor = this.bgColor;
	    state.vbbCount = this.currentVbb.vcount; // Need to keep track of whether partial buffer exists
	    state.numCircles = this.numCircles; // reset these to make sure they are consistent
	    state.numEllipses = this.numEllipses;
	    state.numPolylines = this.numPolylines;
	    state.numLineSegs = this.numLineSegs;
	    state.numPolytriangles = this.numPolytriangles;
	    state.numTriangles = this.numTriangles;
	    state.error = this.error;
	    state.offsetX = this.offsetX;
	    state.offsetY = this.offsetY;
	    state.streamPosition = this.stream == null ? 0 : this.stream.offset; // Save stream seek position
	    return state;
	};

	/**
	     * Restore the state of the F2D stream previously saved
	     *
	     * The restore assumes that we are keeping the same data buffers
	     * all of the time. If we need to read data from the file again,
	     * then we should keep track of the real position in the file, i.e.
	     * the position in the stream plus the position at the start
	     * of the data buffer and reverse that when restoring.
	     *
	     * @param {stateObject} state - the previously saved state
	     * @param {Uint8Array} data - If data is not null, then an InputStream is created
	     *                     data and the stream is position to the saved position. If data
	     *                     is null and this.stream is not null, the this.stream's position
	     *                     is set to the saved stream position. If both data and this.stream
	     *                     are null, the the state cannot be restored.
	     * @returns {boolean} True if the state was restored, or was already correct. false
	     *                    if the state couldn't be restored.  
	     */
	F2DOnDemand.prototype.restoreState = function (state, data) {
	    if (data || !this.stream || state.streamPosition != this.stream.offset) {
	        if (data)
	        this.stream = new _InputStream.InputStream(data);else
	        if (!this.stream)
	        return false;
	        this.stream.seek(state.streamPosition);
	        // We will toss the start buffer if state.vbbCount > 0, so don't worry
	        // about initializing the other vbb values.
	        this.currentVbb.reset(state.vbbCount);

	        this.fontCount = state.fontCount;
	        this.fontId = state.fontId;
	        this.objectMemberQueue = [].concat(state.objectMemberQueue);
	        this.viewports.length = state.viewportCount;
	        this.currentVpId = state.currentVpId;
	        this.clips.length = state.clipsCount;
	        this.strings.length = state.stringsCount;
	        this.currentStringNumber = state.currentStringNumber;
	        this.currentStringBox = state.currentStringBox;
	        this.objectNumber = state.objectNumber;
	        this.currentFakeId = state.currentFakeId;
	        this.maxObjectNumber = state.maxObjectNumber;
	        this.objectStack = [].concat(state.objectStack);
	        this.objectNameStack = [].concat(state.objectNameStack);

	        // copy the saved parseObjState object back to the F2D stream
	        // Again only the known members are copied for performance reasons
	        // and the sub-object member names are pushed on the objectNameStack
	        var pstate = this.parseObjState;
	        var polyTri = pstate.polyTriangle;
	        polyTri.points = state.parseObjState.polyTriangle.points;
	        polyTri.indices = state.parseObjState.polyTriangle.indices;
	        polyTri.colors = state.parseObjState.polyTriangle.colors;
	        var viewport = pstate.viewport;
	        viewport.units = state.parseObjState.viewport.units;
	        viewport.transform = state.parseObjState.viewport.transform;
	        var clip = pstate.clip;
	        clip.contourCounts = state.parseObjState.clip.contourCounts;
	        clip.points = state.parseObjState.clip.points;
	        clip.indices = state.parseObjState.clip.indices;
	        var raster = pstate.raster;
	        raster.position = state.parseObjState.raster.position;
	        raster.width = state.parseObjState.raster.width;
	        raster.height = state.parseObjState.raster.height;
	        raster.imageId = state.parseObjState.raster.imageId;
	        var text = pstate.text;
	        text.string = state.parseObjState.text.string;
	        text.position = state.parseObjState.text.position;
	        text.height = state.parseObjState.text.height;
	        text.widthScale = state.parseObjState.text.widthScale;
	        text.rotation = state.parseObjState.text.rotation;
	        text.oblique = state.parseObjState.text.oblique;
	        text.charWidths = state.parseObjState.text.charWidths;
	        var fontDef = pstate.fontDef;
	        fontDef.name = state.parseObjState.fontDef.name;
	        fontDef.fullName = state.parseObjState.fontDef.fullName;
	        fontDef.flags = state.parseObjState.fontDef.flags;
	        fontDef.spacing = state.parseObjState.fontDef.spacing;
	        fontDef.panose = state.parseObjState.fontDef.panose;

	        this.lineWeight = state.lineWeight;
	        this.color = state.color;
	        this.layer = state.layer;
	        this.bgColor = state.bgColor;
	        this.numCircles = state.numCircles;
	        this.numEllipses = state.numEllipses;
	        this.numPolylines = state.numPolylines;
	        this.numLineSegs = state.numLineSegs;
	        this.numPolytriangles = state.numPolytriangles;
	        this.numTriangles = state.numTriangles;
	        this.error = state.error;
	        this.offsetX = state.offsetX;
	        this.offsetY = state.offsetY;
	    }
	    return true;
	};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.F2dSemanticType = exports.F2dDataType = undefined;exports.




































































































































	F2D = F2D;var _VertexBufferBuilder = __webpack_require__(48);var _LmvBox = __webpack_require__(29);var _LmvVector = __webpack_require__(28);var _VbUtils = __webpack_require__(27);var _InputStream = __webpack_require__(33);var _Logger = __webpack_require__(3);var _ErrorCodes = __webpack_require__(6);var MOBILE_MAX_VCOUNT = 16383;var F2dDataType = exports.F2dDataType = { //Fixed size types
	    dt_object: 0, dt_void: 1, dt_byte: 2, dt_int: 3, dt_float: 4, dt_double: 5, dt_varint: 6, dt_point_varint: 7, //Variable size types
	    //Data bytes are prefixed by an integer
	    //representing the number of elements in the array.
	    dt_byte_array: 32, dt_int_array: 33, dt_float_array: 34, dt_double_array: 35, dt_varint_array: 36, //Special variable int encoding for point data
	    dt_point_varint_array: 37, //Well-known data types that help reduce output size for commonly
	    //encountered simple geometries
	    dt_arc: 38, dt_circle: 39, dt_circular_arc: 40, dt_string: 63, //do not want to go into varint range
	    dt_last_data_type: 127 };var F2dSemanticType = exports.F2dSemanticType = { //For objects with fixed serialization (arc, raster) we don't bother having dedicated semantic for each member
	    //and assume the parsing application knows the order they appear. There is still an end-object tag of course
	    //which shows where the object ends.
	    st_object_member: 0, //Simple / fixed size attributes
	    st_fill: 1, st_fill_off: 2, st_clip_off: 3, st_layer: 4, st_link: 5, st_line_weight: 6, st_miter_angle: 7, st_miter_length: 8, st_line_pattern_ref: 9, st_back_color: 10, st_color: 11, st_markup: 12, st_object_id: 13, st_markup_id: 14, st_reset_rel_offset: 15, st_font_ref: 16, //Compound object opcodes
	    //Begin a generic object opcode
	    st_begin_object: 32, //Style attribute related opcodes. Those are compound objects
	    st_clip: 33, st_line_caps: 34, st_line_join: 35, st_line_pattern_def: 36, st_font_def: 37, st_viewport: 38, //Drawables are all objects-typed bounded by begin/end object opcodes
	    //Root level document begin
	    st_sheet: 42, //Circle, Ellipse, Arcs
	    st_arc: 43, //The grandfather of them all
	    st_polyline: 44, st_raster: 45, st_text: 46, st_polytriangle: 47, st_dot: 48, //end object -- could be ending a generic object or drawable, etc.
	    st_end_object: 63, st_last_semantic_type: 127 }; //Initializes a structure of counters used for statistical purposes and sheet content hash
	function initGeomMetrics() {return { "arcs": 0, "circles": 0, "circ_arcs": 0, "viewports": 0, "clips": 0, "colors": 0, "db_ids": 0, "dots": 0, "fills": 0, "layers": 0, "line_caps": 0, "line_joins": 0, "line_patterns": 0, "line_pat_refs": 0, "plines": 0, "pline_points": 0, "line_weights": 0, "links": 0, "miters": 0, "ptris": 0, "ptri_indices": 0, "ptri_points": 0, "rasters": 0, "texts": 0, "strings": [] };}function F2D(metadata, manifest, basePath, options) {this.metadata = metadata;this.scaleX = 1;this.scaleY = 1;this.bbox = { min: { x: 0, y: 0, z: 0 }, max: { x: 0, y: 0, z: 0 } };this.is2d = true;this.layersMap = {};this.fontDefs = {};this.fontCount = 0;this.fontId = 0;this.manifestAvailable = false;this.objectMemberQueue = [];this.propertydb = { attrs: [], avs: [], ids: [], values: [], offsets: [], rcv_offsets: [], rcvs: [],
	        viewables: [] };


	    if (metadata) {

	        var dims = metadata.page_dimensions;

	        this.paperWidth = dims.page_width;
	        this.paperHeight = dims.page_height;

	        // TODO: scale parsing.
	        this.scaleX = this.paperWidth / dims.plot_width;
	        this.scaleY = this.paperHeight / dims.plot_height;

	        this.hidePaper = dims.hide_paper;

	        this.bbox.max.x = this.paperWidth;
	        this.bbox.max.y = this.paperHeight;

	        //Initialize mapping between layer index -> layer number to be used for rendering
	        var count = 0;
	        //Some geometry comes on null layer, and we reserve a spot for that one.
	        //For example, Revit plots have no layers at all.
	        this.layersMap[0] = count++;

	        for (var l in metadata.layers) {

	            var index = parseInt(l);

	            //We store in a map in order to allow non-consecutive layer numbers,
	            //which does happen.
	            this.layersMap[index] = count++;
	        }

	        this.layerCount = count;

	        //Create a layers tree to be used by the UI -- this splits AutoCAD style
	        //layer groups (specified using | character) into a tree of layers.
	        this.createLayerGroups(metadata.layers);
	    }

	    this.hidePaper = this.hidePaper || options && options.modelSpace;

	    // For debugging only. Could be removed.
	    this.opCount = 0;


	    this.fontFaces = [];
	    this.fontFamilies = [];

	    this.viewports = [{}]; // make viewport index start at 1, 0 as paper is used in LineShader
	    this.currentVpId = 0; // current viewport index
	    this.viewports[0].geom_metrics = this.currentGeomMetrics = initGeomMetrics();

	    this.clips = [0]; // make clip index start at 1, matched with viewport index

	    this.strings = [];
	    this.stringDbIds = [];
	    this.stringBoxes = [];
	    this.currentStringNumber = -1;
	    this.currentStringBox = new _LmvBox.LmvBox3();

	    this.linkBoxes = [];
	    this.currentLinkBox = new _LmvBox.LmvBox3();

	    this.objectNumber = 0;
	    this.currentFakeId = -2; //We tag certain objects that we care about (like strings) that have no ID with fake negative IDs instead of giving them default ID of 0.
	    this.imageNumber = 0;
	    this.linkNumber = 0;
	    this.maxObjectNumber = 0;

	    this.objectStack = [];
	    this.objectNameStack = [];
	    this.parseObjState = {
	        polyTriangle: {},
	        viewport: {},
	        clip: {},
	        raster: {},
	        text: {},
	        fontDef: {},
	        uknown: {} };


	    this.layer = 0;

	    this.bgColor = typeof options.bgColor === "number" ? options.bgColor : 0xffffffff;

	    //NOTE: Use of contrast color is turned off in mapColor() until UX makes up their mind
	    //one way or another.
	    this.contrastColor = this.color = this.fillColor = 0xff000000;
	    if (this.hidePaper)
	    this.contrastColor = 0xffffff00;

	    this.useInstancing = options && !!options.useInstancing;
	    this.isMobile = options && !!options.isMobile;
	    this.max_vcount = this.isMobile ? MOBILE_MAX_VCOUNT : undefined;
	    this.currentVbb = new _VertexBufferBuilder.VertexBufferBuilder(this.useInstancing, undefined, this.max_vcount);
	    this.meshes = [];

	    this.numCircles = this.numEllipses = this.numPolylines = this.numLineSegs = 0;
	    this.numPolytriangles = this.numTriangles = 0;

	    // Newly added f2d pasing stuff.
	    this.error = false;

	    // Last absolute positions of point parsed so far.
	    // Used to decode relative positions parsed from points array.
	    this.offsetX = 0;
	    this.offsetY = 0;

	    // Parse manifest, do stuff.
	    // 1. Build image id to raster URI map used to assign values to texture path.
	    // 2. Acquire names of property database json streams.
	    if (manifest) {
	        this.manifestAvailable = true;
	        this.imageId2URI = {};
	        var assets = manifest.assets;
	        for (var i = 0, e = assets.length; i < e; ++i) {
	            var entry = assets[i];
	            var mime = entry.mime;
	            if (mime.indexOf('image/') != -1) {
	                var id = entry.id;
	                id = id.substr(0, id.indexOf('.'));
	                this.imageId2URI[id] = basePath + entry.URI;
	            }

	            if (entry.type == "Autodesk.CloudPlatform.PropertyAttributes")
	            this.propertydb.attrs.push(entry.URI);
	            if (entry.type == "Autodesk.CloudPlatform.PropertyValues")
	            this.propertydb.values.push(entry.URI);
	            if (entry.type == "Autodesk.CloudPlatform.PropertyIDs")
	            this.propertydb.ids.push(entry.URI);
	            if (entry.type == "Autodesk.CloudPlatform.PropertyViewables")
	            this.propertydb.viewables.push(entry.URI);
	            if (entry.type == "Autodesk.CloudPlatform.PropertyOffsets") {
	                if (entry.id.indexOf('rcv') != -1)
	                this.propertydb.rcv_offsets.push(entry.URI);else

	                this.propertydb.offsets.push(entry.URI);
	            }
	            if (entry.type == "Autodesk.CloudPlatform.PropertyAVs")
	            this.propertydb.avs.push(entry.URI);
	            if (entry.type == "Autodesk.CloudPlatform.PropertyRCVs")
	            this.propertydb.rcvs.push(entry.URI);
	        }

	    }
	}

	F2D.prototype.load = function (loadContext, fydoPack) {

	    if (!(fydoPack instanceof Uint8Array))
	    fydoPack = new Uint8Array(fydoPack);
	    this.data = fydoPack;
	    this.parse();

	    if (this.stringBoxes.length) {
	        var fbuf = new Float32Array(this.stringBoxes.length);
	        fbuf.set(this.stringBoxes);
	        this.stringBoxes = fbuf;
	    }

	    loadContext.loadDoneCB(true);
	};

	F2D.prototype.loadFrames = function (loadContext) {

	    this.loadContext = loadContext;

	    var data = loadContext.data;

	    if (data) {
	        if (!(data instanceof Uint8Array))
	        data = new Uint8Array(data);
	        this.data = data;
	    } else if (loadContext.finalFrame) {
	        this.data = null;

	        if (this.stringBoxes.length) {
	            var fbuf = new Float32Array(this.stringBoxes.length);
	            fbuf.set(this.stringBoxes);
	            this.stringBoxes = fbuf;
	        }
	    }

	    this.parseFrames(loadContext.finalFrame);

	    loadContext.loadDoneCB(true);
	};


	F2D.prototype.pushMesh = function (mesh) {
	    this.meshes.push(mesh);


	    mesh.material = {
	        skipEllipticals: !this.currentVbb.numEllipticals,
	        skipCircles: !this.currentVbb.numCirculars,
	        skipTriangleGeoms: !this.currentVbb.numTriangleGeoms,
	        useInstancing: this.currentVbb.useInstancing };


	    if (this.currentImage) {
	        mesh.material.image = this.currentImage;
	        mesh.material.image.name = this.imageNumber++;
	        this.currentImage = null;
	    }
	};

	F2D.prototype.flushBuffer = function (addCount, finalFlush)
	{
	    if (!this.currentVbb.vcount && !finalFlush)
	    {
	        return;
	    }

	    var flush = finalFlush;
	    flush = flush || this.currentVbb.isFull(addCount);

	    if (flush) {
	        if (this.currentVbb.vcount) {
	            var mesh = this.currentVbb.toMesh();
	            _VbUtils.VBUtils.bboxUnion(this.bbox, mesh.boundingBox);

	            this.pushMesh(mesh);
	            this.currentVbb = new _VertexBufferBuilder.VertexBufferBuilder(this.useInstancing, undefined, this.max_vcount);
	        }

	        if (this.loadContext)
	        this.loadContext.loadDoneCB(true, finalFlush);
	    }


	};

	F2D.prototype.tx = function (x) {
	    return this.sx(x);
	};

	F2D.prototype.ty = function (y) {
	    return this.sy(y);
	};

	F2D.prototype.sx = function (x) {
	    //TODO: The hardcoded scale is used to get the integer coords from FYDO
	    //into something normal and close to page coordinates
	    return x * this.scaleX;
	};

	F2D.prototype.sy = function (y) {
	    //TODO: The hardcoded scale is used to get the integer coords from FYDO
	    //into something normal and close to page coordinates
	    return y * this.scaleY;
	};

	F2D.prototype.invertColor = function (c) {
	    var a = c >> 24 & 0xff;
	    var b = c >> 16 & 0xff;
	    var g = c >> 8 & 0xff;
	    var r = c & 0xff;

	    b = 255 - b;
	    g = 255 - g;
	    r = 255 - r;

	    return a << 24 | b << 16 | g << 8 | r;
	};

	F2D.prototype.mapColor = function (c, isFill) {

	    if (!this.hidePaper)
	    return c;

	    if (this.bgColor !== 0)
	    return c;

	    //Color substitution in cases when we want to interleave the 2D drawing
	    //into a 3D scene (when bgColor is explicitly specified as transparent black (0)
	    //and hidePaper is set to true.

	    var r = c & 0xff;
	    var g = (c & 0xff00) >> 8;
	    var b = (c & 0xff0000) >> 16;

	    var isGrey = r === g && r === b;

	    if (r < 0x7f) {
	        //c = this.contrastColor;
	    } else if (isGrey && isFill) {
	        c = c & 0x55ffffff;
	    }

	    return c;
	};

	// ====================== F2D Parser ================================= //

	// Restore sign bit from LSB of an encoded integer which has the sign bit
	// moved from MSB to LSB.
	// The decoding process is the reverse by restoring the sign bit from LSB to MSB.
	F2D.prototype.restoreSignBitFromLSB = function (integer) {
	    return integer & 1 ? -(integer >>> 1) : integer >>> 1;
	};

	// Convert relative positions to absolute positions, and update global offsets.
	F2D.prototype.parsePointPositions = function () {
	    var x = this.stream.getVarints();
	    var y = this.stream.getVarints();

	    x = this.restoreSignBitFromLSB(x);
	    y = this.restoreSignBitFromLSB(y);

	    x += this.offsetX;
	    y += this.offsetY;

	    this.offsetX = x;
	    this.offsetY = y;

	    return [this.tx(x), this.ty(y)];
	};

	F2D.prototype.parserAssert = function (actualType, expectedType, functionName) {
	    if (actualType != expectedType) {
	        _Logger.logger.warn("Expect " + expectedType + "; actual type is " +
	        actualType + "; in function " + functionName);
	        this.error = true;
	        return true;
	    } else {
	        return false;
	    }
	};

	F2D.prototype.unhandledTypeWarning = function (inFunction, semanticType) {
	    _Logger.logger.warn("Unhandled semantic type : " + semanticType + " in function " + inFunction);
	};

	F2D.prototype.parseObject = function () {
	    var semantic_type = this.stream.getVarints();
	    this.objectStack.push(semantic_type);
	    //debug(semantic_type);
	    switch (semantic_type) {
	        case F2dSemanticType.st_sheet:
	            this.objectNameStack.push("sheet");
	            this.objectMemberQueue.unshift("paperColor");
	            break;
	        case F2dSemanticType.st_viewport:
	            this.objectNameStack.push("viewport");
	            this.objectMemberQueue.unshift("units", "transform");
	            break;
	        case F2dSemanticType.st_clip:
	            this.objectNameStack.push("clip");
	            this.objectMemberQueue.unshift("contourCounts", "points", "indices");
	            break;
	        case F2dSemanticType.st_polytriangle:
	            this.objectNameStack.push("polyTriangle");
	            this.objectMemberQueue.unshift("points", "indices", "colors");
	            break;
	        case F2dSemanticType.st_raster:
	            this.objectNameStack.push("raster");
	            this.objectMemberQueue.unshift("position", "width", "height", "imageId");
	            break;
	        case F2dSemanticType.st_text:
	            this.currentStringNumber = this.strings.length;
	            if (this.objectNumber === 0)
	            this.objectNumber = this.currentFakeId--;
	            this.currentStringBox.makeEmpty();
	            this.objectNameStack.push("text");
	            this.objectMemberQueue.unshift("string", "position", "height", "widthScale", "rotation", "oblique", "charWidths");
	            break;
	        case F2dSemanticType.st_font_def:
	            this.objectNameStack.push("fontDef");
	            this.objectMemberQueue.unshift("name", "fullName", "flags", "spacing", "panose");
	            break;
	        case F2dSemanticType.st_end_object:{
	                this.objectStack.pop(); //pop the end_object we pushed at the beginning of the function

	                if (!this.objectStack.length)
	                this.parserAssert(0, 1, "parseEndObject (Stack Empty)");else
	                {
	                    //Do any end-of-object post processing depending on object type
	                    var objType = this.objectStack.pop(); //pop the start object

	                    switch (objType) {
	                        case F2dSemanticType.st_polytriangle:this.actOnPolyTriangle();break;
	                        case F2dSemanticType.st_viewport:this.actOnViewport();break;
	                        case F2dSemanticType.st_clip:this.actOnClip();break;
	                        case F2dSemanticType.st_raster:this.actOnRaster();break;
	                        case F2dSemanticType.st_text:this.actOnText();break;
	                        case F2dSemanticType.st_font_def:this.actOnFontDef();break;}


	                    //Zero out the state of the object we just finished processing
	                    var name = this.objectNameStack.pop();
	                    var state = this.parseObjState[name];
	                    for (var p in state) {
	                        state[p] = null;}
	                }

	                this.objectMemberQueue.length = 0;
	            }
	            break;
	        default:
	            this.objectNameStack.push("unknown");
	            this.error = true;
	            this.unhandledTypeWarning('parseObject', semantic_type);
	            break;}

	};


	F2D.prototype.initSheet = function (paperColor) {

	    this.bgColor = paperColor;

	    if (this.hidePaper)
	    return;

	    if (this.metadata) {

	        var pw = this.paperWidth;
	        var ph = this.paperHeight;

	        var vbb = this.currentVbb;

	        var ss = pw * 0.0075;
	        var shadowColor = 0xff555555;

	        var points = [0, 0, pw, 0, pw, ph, 0, ph,
	        ss, -ss, pw + ss, -ss, pw + ss, 0, ss, 0,
	        pw, 0, pw + ss, 0, pw + ss, ph - ss, pw, ph - ss];
	        var colors = [paperColor, paperColor, paperColor, paperColor,
	        shadowColor, shadowColor, shadowColor, shadowColor,
	        shadowColor, shadowColor, shadowColor, shadowColor];

	        var indices = [0, 1, 2, 0, 2, 3,
	        4, 5, 6, 4, 6, 7,
	        8, 9, 10, 8, 10, 11];

	        var paperLayer = 0; //Put the paper the null layer so it won't get turned off.
	        var paperDbId = -1;

	        this.addPolyTriangle(points, colors, indices, 0xffffffff, paperDbId, paperLayer, false);

	        //Page outline
	        vbb.addSegment(0, 0, pw, 0, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);
	        vbb.addSegment(pw, 0, pw, ph, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);
	        vbb.addSegment(pw, ph, 0, ph, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);
	        vbb.addSegment(0, ph, 0, 0, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);


	        //Test pattern for line styles.
	        //for (var i=0; i<39; i++) {
	        //    vbb.addSegment(0, ph + i * 0.25 + 1, 12, 12 + ph + i * 0.25 + 1, 0, -1 /* device space pixel width */, 0xff000000, 0xffffffff, 0, 0, i);
	        //}

	        //Test pattern for line styles.
	        //for (var i=0; i<39; i++) {
	        //    vbb.addSegment(0, ph + (i+39) * 0.25 + 1, 12, 12 + ph + (i+39) * 0.25 + 1, 0, (1.0 / 25.4) /*1mm width*/, 0xff000000, 0xffffffff, 0, 0, i);
	        //}

	    }
	};

	F2D.prototype.setObjectMember = function (val) {
	    if (!this.objectMemberQueue.length) {
	        _Logger.logger.warn("Unexpected object member. " + val + " on object " + this.objectNameStack[this.objectNameStack.length - 1]);
	        return false;
	    }

	    var propName = this.objectMemberQueue.shift();
	    var curObjName = this.objectNameStack[this.objectNameStack.length - 1];

	    //The paper color needs to be processed as soon as it comes in
	    //because we want to initialize the page geometry first, before
	    //adding any other geometry
	    if (curObjName == "sheet" && propName == "paperColor") {
	        this.initSheet(val);
	        return true;
	    } else
	    if (curObjName) {
	        this.parseObjState[curObjName][propName] = val;
	        return true;
	    }

	    return false;
	};


	F2D.prototype.parseString = function () {
	    var s = this.stream;
	    var sema = s.getVarints();

	    var len = s.getVarints();
	    var ret = s.getString(len);

	    switch (sema) {
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(ret))
	            return;
	            break;
	        default:_Logger.logger.info("Unexpected opcode semantic type for string.");break;}


	    return ret;
	};


	F2D.prototype.actOnFontDef = function () {
	    var fontDef = this.parseObjState.fontDef;
	    this.fontDefs[++this.fontCount] = fontDef;
	    this.fontId = this.fontCount;
	};


	F2D.prototype.parsePoint = function () {
	    var s = this.stream;
	    var sema = s.getVarints(); //skip past the semantics
	    var ret = this.parsePointPositions();

	    switch (sema) {
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(ret))
	            return;
	            break;
	        default:_Logger.logger.info("Unexpected opcode semantic type for point.");break;}


	    return ret;
	};


	F2D.prototype.parsePointsArray = function () {

	    var s = this.stream;

	    var sema = s.getVarints();

	    var count = s.getVarints(); // number of coordinates * 2
	    if (!count) return;
	    count = count / 2;

	    var ret = [];
	    var position;

	    for (var i = 0; i < count; ++i) {
	        position = this.parsePointPositions();
	        ret.push(position[0]);
	        ret.push(position[1]);
	    }

	    switch (sema) {
	        case F2dSemanticType.st_polyline:
	            this.actOnPolylinePointsArray(ret);
	            return;
	        case F2dSemanticType.st_dot:
	            this.actOnDot(ret);
	            return;
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(ret))
	            return;
	            break;
	        default:_Logger.logger.info("Unexpected opcode semantic type for points array.");break;}


	    return ret;
	};

	F2D.prototype.parseIntArray = function () {
	    var s = this.stream;
	    var sema = s.getVarints();
	    var count = s.getVarints(); // total number of elements in integer array.
	    var retVal = [];
	    for (var i = 0; i < count; ++i) {
	        retVal.push(s.getUint32());
	    }

	    switch (sema) {
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(retVal))
	            return;
	            break;
	        default:
	            this.unhandledTypeWarning('parseIntArray', sema);
	            break;}


	    return retVal;
	};

	F2D.prototype.parseDoubleArray = function () {
	    var s = this.stream;
	    var sema = s.getVarints();
	    var count = s.getVarints(); // total number of elements in integer array.
	    var retVal = [];
	    for (var i = 0; i < count; ++i) {
	        retVal.push(s.getFloat64());
	    }

	    switch (sema) {
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(retVal))
	            return;
	            break;
	        default:
	            this.unhandledTypeWarning('parseDoubleArray', sema);
	            break;}


	    return retVal;
	};

	F2D.prototype.parseByteArray = function () {
	    var s = this.stream;
	    var sema = s.getVarints();
	    var count = s.getVarints(); // total number of elements in byte array.
	    var retVal = [];
	    for (var i = 0; i < count; ++i) {
	        retVal.push(s.getUint8());
	    }

	    switch (sema) {
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(retVal))
	            return;
	            break;
	        default:
	            this.unhandledTypeWarning('parseByteArray', sema);
	            break;}


	    return retVal;
	};


	F2D.prototype.parseVarintArray = function () {
	    var s = this.stream;
	    var sema = s.getVarints();

	    var ret = [];

	    // Total number of integers in array, not the total number of bytes.
	    var count = s.getVarints();

	    for (var i = 0; i < count; ++i) {
	        ret.push(s.getVarints());
	    }

	    switch (sema) {
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(ret))
	            return;
	            break;
	        default:
	            this.unhandledTypeWarning('parseVarIntArray', sema);
	            break;}


	    return ret;
	};


	F2D.prototype.parseInt = function () {
	    var s = this.stream;
	    var sema = s.getVarints();
	    var val = s.getUint32();

	    switch (sema) {
	        case F2dSemanticType.st_color:
	            this.color = this.mapColor(val, false);
	            this.currentGeomMetrics.colors++;
	            break;
	        case F2dSemanticType.st_fill:
	            this.fill = true;
	            this.fillColor = this.mapColor(val, true);
	            this.currentGeomMetrics.fills++;
	            break;
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(val))
	            return;
	        default:
	            this.unhandledTypeWarning('parseInt', sema);
	            break;}


	    return val;
	};

	F2D.prototype.parseVoid = function () {
	    var sema = this.stream.getVarints();
	    switch (sema) {
	        case F2dSemanticType.st_fill_off:
	            this.fill = false;
	            this.currentGeomMetrics.fills++;
	            break;
	        default:
	            this.unhandledTypeWarning('parseVoid', sema);
	            break;}

	};

	F2D.prototype.parseVarint = function () {
	    var s = this.stream;
	    var semantic_type = s.getVarints();
	    var val = s.getVarints();

	    switch (semantic_type) {
	        case F2dSemanticType.st_line_weight:
	            this.lineWeight = this.tx(val);
	            this.currentGeomMetrics.line_weights++;
	            break;
	        case F2dSemanticType.st_line_caps:
	            this.currentGeomMetrics.line_caps++;
	            break;
	        case F2dSemanticType.st_line_join:
	            this.currentGeomMetrics.line_joins++;
	            break;
	        case F2dSemanticType.st_object_id:
	        case F2dSemanticType.st_markup_id:
	            this.objectNumber = val;
	            this.maxObjectNumber = Math.max(this.maxObjectNumber, val);
	            this.currentGeomMetrics.db_ids++;
	            break;
	        case F2dSemanticType.st_link:
	            if (this.linkNumber) {
	                this.linkBoxes[this.linkNumber] = this.currentLinkBox.clone();
	                this.currentLinkBox.makeEmpty();
	            }
	            this.linkNumber = val;
	            break;
	        case F2dSemanticType.st_layer:
	            this.currentGeomMetrics.layers++;
	            this.layer = this.layersMap[val];
	            break;
	        case F2dSemanticType.st_font_ref:
	            this.fontId = val;
	            break;
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(val))
	            return;
	            break;
	        default:
	            break;}


	    return val;
	};

	F2D.prototype.parseFloat = function () {
	    var s = this.stream;
	    var semantic_type = s.getVarints();
	    var val = s.getFloat32();

	    switch (semantic_type) {
	        case F2dSemanticType.st_miter_angle:
	            break;
	        case F2dSemanticType.st_miter_length:
	            break;
	        case F2dSemanticType.st_object_member:
	            if (this.setObjectMember(val)) {
	                return;
	            }
	            break;
	        default:
	            break;}


	    return val;
	};

	F2D.prototype.parseCircularArc = function () {
	    var s = this.stream;
	    var sema = s.getVarints();
	    if (this.parserAssert(sema, F2dSemanticType.st_arc, 'parseCircularArc')) return;

	    var point = this.parsePointPositions();
	    var major = s.getVarints(), /*rotation = s.getFloat32(),*/start = s.getFloat32(),end = s.getFloat32();

	    this.actOnCircularArc(point[0], point[1], start, end, this.sx(major));
	};

	F2D.prototype.parseCircle = function () {
	    var s = this.stream;
	    var sema = s.getVarints();
	    if (this.parserAssert(sema, F2dSemanticType.st_arc, 'parseCircle')) return;

	    var point = this.parsePointPositions();
	    var major = s.getVarints();

	    this.actOnCompleteCircle(point[0], point[1], this.sx(major));
	};

	F2D.prototype.parseArc = function () {
	    var s = this.stream;
	    var sema = s.getVarints();
	    if (this.parserAssert(sema, F2dSemanticType.st_arc, 'parseArc')) return;

	    // Relative positions.
	    var point = this.parsePointPositions();

	    var major = s.getVarints();
	    var minor = s.getVarints();

	    var rotation = s.getFloat32();
	    var start = s.getFloat32();
	    var end = s.getFloat32();

	    this.actOnArc(point[0], point[1], start, end, this.sx(major), this.sy(minor), rotation);
	};

	F2D.prototype.parseDataType = function () {
	    var data_type = this.stream.getVarints();

	    switch (data_type) {
	        case F2dDataType.dt_void:
	            this.parseVoid();
	            break;
	        case F2dDataType.dt_int:
	            this.parseInt();
	            break;
	        case F2dDataType.dt_object:
	            this.parseObject();
	            break;
	        case F2dDataType.dt_varint:
	            this.parseVarint();
	            break;
	        case F2dDataType.dt_point_varint:
	            this.parsePoint();
	            break;
	        case F2dDataType.dt_float:
	            this.parseFloat();
	            break;
	        case F2dDataType.dt_point_varint_array:
	            this.parsePointsArray();
	            break;
	        case F2dDataType.dt_circular_arc:
	            this.parseCircularArc();
	            break;
	        case F2dDataType.dt_circle:
	            this.parseCircle();
	            break;
	        case F2dDataType.dt_arc:
	            this.parseArc();
	            break;
	        case F2dDataType.dt_int_array:
	            this.parseIntArray();
	            break;
	        case F2dDataType.dt_varint_array:
	            this.parseVarintArray();
	            break;
	        case F2dDataType.dt_byte_array:
	            this.parseByteArray();
	            break;
	        case F2dDataType.dt_string:
	            this.parseString();
	            break;
	        case F2dDataType.dt_double_array:
	            this.parseDoubleArray();
	            break;
	        default:
	            this.error = true;
	            _Logger.logger.info("Data type not supported yet: " + data_type);
	            break;}

	};

	F2D.prototype.readHeader = function () {
	    var stream = this.stream = new _InputStream.InputStream(this.data);

	    // "F2D"
	    var header = stream.getString(3);

	    if (header !== "F2D") {
	        _Logger.logger.error("Invalid F2D header : " + header, (0, _ErrorCodes.errorCodeString)(_ErrorCodes.ErrorCodes.BAD_DATA));
	        return false;
	    }

	    var versionMajor = stream.getString(2);
	    if (versionMajor !== "01") {
	        _Logger.logger.error("Only support f2d major version 1; actual version is : " + versionMajor, (0, _ErrorCodes.errorCodeString)(_ErrorCodes.ErrorCodes.BAD_DATA));
	        return false;
	    }

	    var dot = stream.getString(1);
	    if (dot !== ".") {
	        _Logger.logger.error("Invalid version delimiter.", (0, _ErrorCodes.errorCodeString)(_ErrorCodes.ErrorCodes.BAD_DATA));
	        return false;
	    }

	    var versionMinor = stream.getString(2);
	    return true;
	};

	F2D.prototype.parse = function () {
	    // Read and check header
	    if (!this.readHeader())
	    return;

	    var stream = this.stream;
	    while (stream.offset < stream.byteLength) {
	        this.parseDataType();
	        if (this.error)
	        break;
	        this.opCount++;
	    }

	    if (this.linkNumber) {
	        this.linkBoxes[this.linkNumber] = this.currentLinkBox.clone();
	        this.currentLinkBox.makeEmpty();
	    }

	    this.flushBuffer(0, true);
	    this.currentVbb = null;

	    this.stream = null;
	    this.data = null;

	    _Logger.logger.info("F2d parse: data types count : " + this.opCount);
	};

	F2D.prototype.parseFrames = function (flush) {

	    if (this.data) {
	        var stream = this.stream = new _InputStream.InputStream(this.data);
	        while (stream.offset < stream.byteLength) {
	            this.parseDataType();
	            if (this.error)
	            break;
	            this.opCount++;
	        }
	    } else if (!flush) {
	        _Logger.logger.warn("Unexpected F2D parse state: If there is no data, we only expect a flush command, but flush was false.");
	    }

	    if (flush) {
	        this.flushBuffer(0, true);
	    }

	    this.stream = null;
	    this.data = null;
	};

	// ================= Semantic Analysis Pass ======================//

	F2D.prototype.actOnPolylinePointsArray = function (points) {

	    this.flushBuffer();

	    // For now only consider this.fill == false case.
	    // TODO: handle fill case.

	    var count = points.length / 2;

	    var totalLen = 0;
	    var x0 = points[0];
	    var y0 = points[1];
	    for (var i = 1; i < count; ++i) {
	        var x1 = points[2 * i];
	        var y1 = points[2 * i + 1];

	        // TODO: make sure this function can be reused as is.
	        this.currentVbb.addSegment(x0, y0, x1, y1, totalLen, this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);

	        totalLen += Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));

	        x0 = x1;
	        y0 = y1;
	    }

	    this.numPolylines++;
	    this.numLineSegs += count - 1;

	    this.currentGeomMetrics.plines++;
	    this.currentGeomMetrics.pline_points += count - 1;
	};

	F2D.prototype.actOnDot = function (points) {

	    this.currentGeomMetrics.dots++;

	    var x0 = points[0];
	    var y0 = points[1];

	    this.actOnCompleteCircle(x0, y0, this.sx(1), true);
	};


	F2D.prototype.actOnCompleteCircle = function (cx, cy, radius, skipCount) {
	    // Relative positions.
	    this.flushBuffer();
	    this.numCircles++;

	    if (!skipCount)
	    this.currentGeomMetrics.circles++;

	    if (this.fill) {
	        //A simple filled circle can be handled
	        //as degenerate thick line segment -- lots of these
	        //in line style grass clippings
	        this.currentVbb.addSegment(cx, cy, cx, cy, 0, 2 * radius, this.color, this.objectNumber,
	        this.layer, this.currentVpId, true, false, true);
	    } else {
	        this.currentVbb.addArc(cx, cy, 0, 2 * Math.PI, /*major*/radius, /*minor*/radius, /*tilt*/0.0,
	        this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);
	    }
	};

	F2D.prototype.actOnCircularArc = function (cx, cy, start, end, radius) {
	    this.numCircles++;
	    this.currentGeomMetrics.circ_arcs++;
	    this.flushBuffer();

	    //    debug("circle " + start + " " + end + " c " + this.color.toString(16));

	    this.currentVbb.addArc(cx, cy, start, end, /*major*/radius, /*minor*/radius, /*tilt*/0.0,
	    this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);
	};

	F2D.prototype.actOnArc = function (cx, cy, start, end, major, minor, rotation) {
	    this.numEllipses++;
	    this.currentGeomMetrics.arcs++;
	    // TODO: need this?
	    this.flushBuffer();
	    this.currentVbb.addArc(cx, cy, start, end, major, minor, rotation,
	    this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);
	};

	F2D.prototype.actOnRaster = function () {

	    if (!this.manifestAvailable)
	    return;

	    this.flushBuffer(4, true);

	    var ps = this.parseObjState.raster;

	    var position = ps.position,
	    imageId = ps.imageId,
	    imageUri = this.imageId2URI[imageId];

	    var width = this.sx(ps.width),
	    height = this.sy(ps.height);

	    var centerX = position[0] + 0.5 * width,
	    centerY = position[1] - 0.5 * height;

	    this.currentVbb.addTexturedQuad(centerX, centerY, width, height, /*rotation*/0, 0xff00ffff, this.objectNumber, this.layer, this.currentVpId);
	    this.currentImage = { dataURI: imageUri };

	    //We can do one image per Vertex Buffer, so flush the quad
	    this.flushBuffer(0, true);

	    //TODO: we need to compare the contents of the raster also.
	    this.currentGeomMetrics.rasters++;
	};

	F2D.prototype.actOnClip = function () {

	    var v = this.parseObjState.clip;
	    this.parseObjState.clip = {};

	    this.clips.push(v);

	    this.currentGeomMetrics.clips++;
	};

	F2D.prototype.actOnText = function () {
	    //TODO: text not currently used for rendering,
	    //but we collect the strings for search/lookup purposes
	    this.strings[this.currentStringNumber] = this.parseObjState.text.string;

	    this.currentGeomMetrics.texts++;
	    this.currentGeomMetrics.strings.push(this.parseObjState.text.string);

	    this.stringDbIds[this.currentStringNumber] = this.objectNumber;
	    this.stringBoxes.push(this.currentStringBox.min.x, this.currentStringBox.min.y, this.currentStringBox.max.x, this.currentStringBox.max.y);
	    this.currentStringBox.makeEmpty();
	    this.currentStringNumber = -1;
	    if (this.objectNumber < -1)
	    this.objectNumber = 0; //reset the current object ID in case we were using a fake one for the text object
	};


	var _tmpVector = new _LmvVector.LmvVector3();

	//Polytriangle processing differs depending on whether
	//we want edge antialiasing and whether the renderer is using
	//hardware instancing or not, so it require a lot more
	//work than other geometries before sending raw primitives to the
	//vertex buffer.
	F2D.prototype.addPolyTriangle = function (points, colors, inds, color, dbId, layer, antialiasEdges) {
	    var me = this;
	    var edgeMap = null;

	    //For non-text geometry we get good looking results with
	    //1 pixel outlines. For text, which is generally small and highly detailed,
	    //a 0.5 pixel AA outline does better.
	    var aaLineWeight = -1.0; //negative = in pixel units
	    if (this.objectStack[this.objectStack.length - 1] == F2dSemanticType.st_text)
	    aaLineWeight = -0.5;


	    function processEdge(iFrom, iTo) {
	        if (iFrom > iTo) {
	            var tmp = iFrom;
	            iFrom = iTo;
	            iTo = tmp;
	        }

	        if (!edgeMap[iFrom])
	        edgeMap[iFrom] = [iTo];else
	        {
	            var adjacentVerts = edgeMap[iFrom];
	            var idx = adjacentVerts.lastIndexOf(iTo);
	            if (idx == -1)
	            adjacentVerts.push(iTo); //first time we see this edge, so remember it as exterior edge
	            else
	                adjacentVerts[idx] = -1; //the second time we see an edge mark it as interior edge
	        }
	    }


	    function addAllAntialiasEdges() {

	        for (var i = 0, iEnd = edgeMap.length; i < iEnd; i++) {

	            var adjacentVerts = edgeMap[i];
	            if (!adjacentVerts)
	            continue;

	            for (var j = 0; j < adjacentVerts.length; j++) {
	                var iTo = adjacentVerts[j];
	                if (iTo == -1)
	                continue; //an interior edge was here -- skip
	                else {
	                        //exterior edge -- add an antialiasing line for it
	                        me.flushBuffer(4);
	                        me.currentVbb.addSegment(points[2 * i], points[2 * i + 1],
	                        points[2 * iTo], points[2 * iTo + 1],
	                        0,
	                        aaLineWeight,
	                        me.mapColor(colors ? colors[i] : color, true),
	                        dbId, layer, me.currentVpId);
	                        {
	                            if (colors && colors[i] != colors[iTo])
	                            _Logger.logger.warn("Gouraud triangle encountered. Will have incorrect antialiasing.");}
	                    }
	            }
	        }
	    }

	    function antialiasOneEdge(iFrom, iTo) {
	        if (iFrom > iTo) {
	            var tmp = iFrom;
	            iFrom = iTo;
	            iTo = tmp;
	        }

	        var adjacentVerts = edgeMap[iFrom];
	        if (!adjacentVerts)
	        return;

	        var idx = adjacentVerts.indexOf(iTo);
	        if (idx != -1) {
	            //exterior edge -- add an antialiasing line for it
	            me.flushBuffer(4);
	            me.currentVbb.addSegment(points[2 * iFrom], points[2 * iFrom + 1],
	            points[2 * iTo], points[2 * iTo + 1],
	            0,
	            aaLineWeight,
	            me.mapColor(colors ? colors[iFrom] : color, true),
	            dbId, layer, me.currentVpId);

	            if (colors && colors[iFrom] != colors[iTo])
	            _Logger.logger.warn("Gouraud triangle encountered. Will have incorrect antialiasing.");
	        }
	    }

	    if (antialiasEdges) {
	        edgeMap = new Array(points.length / 2);

	        for (var i = 0, iEnd = inds.length; i < iEnd; i += 3) {
	            var i0 = inds[i];
	            var i1 = inds[i + 1];
	            var i2 = inds[i + 2];

	            processEdge(i0, i1);
	            processEdge(i1, i2);
	            processEdge(i2, i0);
	        }
	    }

	    //If the polytriangle is part of tesselated text or hyperlink, add it to the current
	    //text object bounding box
	    if (this.currentStringNumber !== -1 || this.linkNumber) {
	        var count = points.length / 2; // number of vertices
	        for (var i = 0; i < count; ++i) {
	            _tmpVector.set(points[2 * i], points[2 * i + 1], 0);

	            if (this.currentStringNumber !== -1)
	            this.currentStringBox.expandByPoint(_tmpVector);

	            if (this.linkNumber)
	            this.currentLinkBox.expandByPoint(_tmpVector);
	        }
	    }

	    if (this.currentVbb.useInstancing) {
	        var count = inds.length;
	        for (var i = 0; i < count; i += 3) {
	            var i0 = inds[i];
	            var i1 = inds[i + 1];
	            var i2 = inds[i + 2];

	            this.flushBuffer(4);

	            this.currentVbb.addTriangleGeom(points[2 * i0], points[2 * i0 + 1],
	            points[2 * i1], points[2 * i1 + 1],
	            points[2 * i2], points[2 * i2 + 1],
	            this.mapColor(colors ? colors[i0] : color, true), dbId, layer, this.currentVpId);

	            if (antialiasEdges) {
	                antialiasOneEdge(i0, i1);
	                antialiasOneEdge(i1, i2);
	                antialiasOneEdge(i2, i0);
	            }
	        }
	    } else
	    {
	        var count = points.length / 2; // number of vertices

	        this.flushBuffer(count);
	        var vbb = this.currentVbb;
	        var vbase = vbb.vcount;

	        for (var i = 0; i < count; ++i) {
	            var x = points[2 * i];
	            var y = points[2 * i + 1];
	            vbb.addVertexPolytriangle(x, y, this.mapColor(colors ? colors[i] : color, true), dbId, layer, this.currentVpId);
	        }

	        vbb.addIndices(inds, vbase);

	        if (antialiasEdges) {
	            addAllAntialiasEdges();
	        }

	    }
	};

	F2D.prototype.actOnPolyTriangle = function () {

	    var ptri = this.parseObjState.polyTriangle;
	    this.parseObjState.polyTriangle = {};

	    var points = ptri.points;
	    var inds = ptri.indices;
	    var colors = ptri.colors;

	    if (!points || !inds) {
	        _Logger.logger.warn("Malformed polytriangle.");
	        return;
	    }

	    //Skip polytriangles that belong to text strings from the geometry stats
	    //as they are not relevant to the sheet signature computation
	    if (this.objectStack[this.objectStack.length - 1] == F2dSemanticType.st_text) {
	    } else {
	        this.currentGeomMetrics.ptris++;
	        this.currentGeomMetrics.ptri_points += points.length / 2;
	        this.currentGeomMetrics.ptri_indices += inds.length;
	    }

	    this.numPolytriangles++;
	    this.numTriangles += inds.length / 3;

	    this.addPolyTriangle(points, colors, inds, this.color, this.objectNumber, this.layer, true);
	};

	F2D.prototype.actOnViewport = function () {

	    var v = this.parseObjState.viewport;
	    this.parseObjState.viewport = {};

	    v.geom_metrics = this.currentGeomMetrics = initGeomMetrics();

	    this.viewports.push(v);
	    this.currentVpId = this.viewports.length - 1;
	};

	F2D.prototype.createLayerGroups = function (layers) {

	    // Temporary: build the layers tree. Eventually the extractor
	    // should be the one doing this; we're incompletely faking it
	    // by looking at the layer names.
	    //
	    var layersRoot = this.layersRoot = { name: 'root', id: 'root', childrenByName: {}, isLayer: false };
	    var groupId = 0,layerId = 0;

	    for (var l in layers) {

	        var index = parseInt(l);
	        var layerDef = layers[l];

	        var name = typeof layerDef === "string" ? layerDef : layerDef.name;

	        if (!name)
	        name = l; //won't get here...

	        var path = name.split('|');
	        var parent = layersRoot;

	        if (path.length > 1) {
	            for (var i = 0; i < path.length - 1; ++i) {
	                var pathComponent = path[i];
	                var item = parent.childrenByName[pathComponent];
	                if (!item) {
	                    item = {
	                        name: pathComponent,
	                        id: 'group-' + groupId++,
	                        childrenByName: {},
	                        isLayer: false };

	                    parent.childrenByName[pathComponent] = item;
	                }
	                parent = item;
	            }
	        }

	        parent.childrenByName[name] = {
	            name: name,
	            index: index,
	            id: layerId++,
	            childrenByName: {},
	            isLayer: true };

	    }

	    function sortLayers(parent) {
	        var children = Object.keys(parent.childrenByName).map(function (k) {return parent.childrenByName[k];});
	        delete parent.childrenByName;

	        if (children.length) {
	            parent.children = children;

	            parent.childCount = 0;

	            for (var i = 0; i < children.length; ++i) {
	                parent.childCount += sortLayers(children[i]);
	            }

	            children.sort(function (a, b) {
	                if (a.isLayer && !b.isLayer) {
	                    return -1; // Layers before groups
	                } else if (!a.isLayer && b.isLayer) {
	                    return 1;
	                }
	                return a.name.localeCompare(b.name, undefined, { sensitivity: 'base', numeric: true }); // Sort layers and groups by name
	            });
	        }

	        return parent.isLayer ? 1 : parent.childCount;
	    }
	    sortLayers(this.layersRoot);
	};

/***/ }),
/* 48 */
/***/ (function(module, exports) {

	
	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.























	VertexBufferBuilder = VertexBufferBuilder;var TAU = Math.PI * 2;var VBB_GT_TRIANGLE_INDEXED = 0,VBB_GT_LINE_SEGMENT = 1,VBB_GT_ARC_CIRCULAR = 2,VBB_GT_ARC_ELLIPTICAL = 3,VBB_GT_TEX_QUAD = 4,VBB_GT_ONE_TRIANGLE = 5;var VBB_INSTANCED_FLAG = 0, // this is intentionally 0 for the instancing case!
	VBB_SEG_START_RIGHT = 0, // this starts intentionally at 0!
	VBB_SEG_START_LEFT = 1,VBB_SEG_END_RIGHT = 2,VBB_SEG_END_LEFT = 3;var VBB_COLOR_OFFSET = 6,VBB_DBID_OFFSET = 7,VBB_FLAGS_OFFSET = 8,VBB_LAYER_VP_OFFSET = 9;var QUAD_TRIANGLE_INDICES = [0, 1, 3, 0, 3, 2];function VertexBufferBuilder(useInstancing, allocSize, fullCount) {var MAX_VCOUNT = allocSize || 65536;
	    this.FULL_COUNT = (fullCount || 32767) | 0;

	    this.useInstancing = useInstancing;

	    //TODO: Temporarily expand the stride to the full one, in order to work around new
	    //more strict WebGL validation which complains when a shader addresses attributes outside
	    //the vertex buffer, even when it does not actually access them. We would need separate shader
	    //configurations for each of the two possible vertex strides for the selection shader, which is
	    //currently shared between all 2d geometries.
	    //this.stride = 10;
	    this.stride = 12;

	    this.vb = new ArrayBuffer(this.stride * 4 * (this.useInstancing ? MAX_VCOUNT / 4 : MAX_VCOUNT));
	    this.vbf = new Float32Array(this.vb);
	    this.vbi = new Int32Array(this.vb);
	    this.ib = this.useInstancing ? null : new Uint16Array(MAX_VCOUNT);
	    this.reset(0);
	}

	VertexBufferBuilder.prototype.reset = function (vcount) {
	    // This is used to restore the vcount when restoring stream state as well as at init time.
	    this.vcount = vcount;

	    this.icount = 0;

	    this.minx = this.miny = Infinity;
	    this.maxx = this.maxy = -Infinity;

	    //Keeps track of objectIds referenced by geometry in the VB
	    this.dbIds = {};

	    this.numEllipticals = 0;
	    this.numCirculars = 0;
	    this.numTriangleGeoms = 0;
	};

	VertexBufferBuilder.prototype.expandStride = function ()
	{
	    // since we already set the stride to the current max value of 12 in the
	    // constructor above, we don't need to do anything here right now...
	    return;

	    /*
	                //Currently hardcoded to expand by 4 floats.
	                var expandBy = 2;
	            
	                var stride = this.stride;
	            
	                if (stride >= 12)
	                    return;
	            
	                var nstride = this.stride + expandBy;
	            
	                var nvb = new ArrayBuffer(nstride * (this.vb.byteLength / stride));
	            
	                var src = new Uint8Array(this.vb);
	                var dst = new Uint8Array(nvb);
	            
	                for (var i = 0, iEnd = this.vcount; i<iEnd; i++) {
	                    var os = i * stride * 4;
	                    var od = i * nstride * 4;
	            
	                    for (var j=0; j<stride * 4; j++)
	                        dst[od+j] = src[os+j];
	                }
	            
	                this.vb = nvb;
	                this.vbf = new Float32Array(nvb);
	                this.vbi = new Int32Array(nvb);
	                this.stride = nstride;
	            */
	};

	VertexBufferBuilder.prototype.addToBounds = function (x, y)
	{
	    if (x < this.minx) this.minx = x;
	    if (x > this.maxx) this.maxx = x;
	    if (y < this.miny) this.miny = y;
	    if (y > this.maxy) this.maxy = y;
	};

	VertexBufferBuilder.prototype.setCommonVertexAttribs = function (offset, vertexId, geomType, color, dbId, layerId, vpId, linePattern)
	{
	    // align changes here with the "decodeCommonAttribs()" function in LineShader.js and VertexBufferReader.js!!!
	    vertexId = vertexId & 0xff; //  8 bit
	    geomType = geomType & 0xff; //  8 bit
	    linePattern = linePattern & 0xff; //  8 bit
	    layerId = layerId & 0xffff; // 16 bit
	    vpId = vpId & 0xffff; // 16 bit

	    this.vbi[offset + VBB_FLAGS_OFFSET] = vertexId | geomType << 8 | linePattern << 16; // vertexId: int8; geomType: int8; linePattern: int8; ghostingFlag: int8
	    this.vbi[offset + VBB_COLOR_OFFSET] = color;
	    this.vbi[offset + VBB_DBID_OFFSET] = dbId;
	    this.vbi[offset + VBB_LAYER_VP_OFFSET] = layerId | vpId << 16; // layerId: int16; vpId: int16

	    this.dbIds[dbId] = 1; // mark this feature as used
	};

	//Creates a non-indexed triangle geometry vertex (triangle vertex coords stored in single vertex structure)
	VertexBufferBuilder.prototype.addVertexTriangleGeom = function (x1, y1, x2, y2, x3, y3, color, dbId, layerId, vpId)
	{
	    var vi = this.vcount;
	    var vbf = this.vbf;

	    var repeat = this.useInstancing ? 1 : 4;
	    for (var i = 0; i < repeat; i++) {
	        var offset = (vi + i) * this.stride;

	        // align changes here with the "decodeTriangleData()" function in LineShader.js!!!
	        vbf[offset] = x1;
	        vbf[offset + 1] = y1;
	        vbf[offset + 2] = x2;

	        vbf[offset + 3] = y2;
	        vbf[offset + 4] = x3;
	        vbf[offset + 5] = y3;

	        this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, VBB_GT_ONE_TRIANGLE, color, dbId, layerId, vpId, /*linePattern*/0);
	        this.vcount++;
	    }

	    return vi;
	};


	VertexBufferBuilder.prototype.addVertexLine = function (x, y, angle, distanceAlong, totalDistance, lineWidth, color, dbId, layerId, vpId, lineType)
	{
	    var vi = this.vcount;
	    var vbf = this.vbf;

	    var repeat = this.useInstancing ? 1 : 4;
	    for (var i = 0; i < repeat; i++) {
	        var offset = (vi + i) * this.stride;

	        // align changes here with the "decodeSegmentData()" function in LineShader.js!!!
	        vbf[offset] = x;
	        vbf[offset + 1] = y;
	        vbf[offset + 2] = angle;

	        vbf[offset + 3] = distanceAlong;
	        vbf[offset + 4] = lineWidth * 0.5; // we are storing only the half width (i.e., the radius)
	        vbf[offset + 5] = totalDistance;

	        this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, VBB_GT_LINE_SEGMENT, color, dbId, layerId, vpId, lineType);
	        this.vcount++;
	    }

	    return vi;
	};

	VertexBufferBuilder.prototype.addVertexTexQuad = function (centerX, centerY, width, height, rotation, color, dbId, layerId, vpId)
	{
	    var vi = this.vcount;
	    var vbf = this.vbf;

	    var repeat = this.useInstancing ? 1 : 4;
	    for (var i = 0; i < repeat; i++) {
	        var offset = (vi + i) * this.stride;

	        // align changes here with the "decodeTexQuadData()" function in LineShader.js!!!
	        vbf[offset] = centerX;
	        vbf[offset + 1] = centerY;
	        vbf[offset + 2] = rotation;

	        vbf[offset + 3] = width;
	        vbf[offset + 4] = height;

	        this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, VBB_GT_TEX_QUAD, color, dbId, layerId, vpId, /*linePattern*/0);
	        this.vcount++;
	    }

	    return vi;
	};


	VertexBufferBuilder.prototype.addVertexArc = function (x, y, startAngle, endAngle, major, minor, tilt, lineWidth, color, dbId, layerId, vpId)
	{
	    var vi = this.vcount;
	    var vbf = this.vbf;

	    var geomType = major == minor ? VBB_GT_ARC_CIRCULAR : VBB_GT_ARC_ELLIPTICAL;

	    var repeat = this.useInstancing ? 1 : 4;
	    for (var i = 0; i < repeat; i++) {
	        var offset = (vi + i) * this.stride;

	        // align changes here with the "decodeArcData()" function in LineShader.js!!!
	        vbf[offset] = x;
	        vbf[offset + 1] = y;
	        vbf[offset + 2] = startAngle;

	        vbf[offset + 3] = endAngle;
	        vbf[offset + 4] = lineWidth * 0.5; // we are storing only the half width (i.e., the radius)
	        vbf[offset + 5] = major; // = radius for circular arcs

	        if (geomType === VBB_GT_ARC_ELLIPTICAL) {
	            vbf[offset + 10] = minor;
	            vbf[offset + 11] = tilt;
	        }

	        this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, geomType, color, dbId, layerId, vpId, /*linePattern*/0);
	        this.vcount++;
	    }

	    return vi;
	};




	//====================================================================================================
	//====================================================================================================
	// Indexed triangle code path can only be used when hardware instancing is not in use.
	// Otherwise, the addTriangleGeom operation should be used to add simple triangles to the buffer.
	//====================================================================================================
	//====================================================================================================

	VertexBufferBuilder.prototype.addVertex = function (x, y, color, dbId, layerId, vpId)
	{
	    if (this.useInstancing)
	    return; //not supported if instancing is used.

	    var vi = this.vcount;
	    var offset = this.stride * vi;
	    var vbf = this.vbf;

	    // align changes here with the "decodeTriangleData()" function in LineShader.js!!!
	    vbf[offset] = x;
	    vbf[offset + 1] = y;

	    this.setCommonVertexAttribs(offset, /*vertexId*/0, VBB_GT_TRIANGLE_INDEXED, color, dbId, layerId, vpId, /*linePattern*/0);
	    this.vcount++;

	    return vi;
	};


	VertexBufferBuilder.prototype.addVertexPolytriangle = function (x, y, color, dbId, layerId, vpId)
	{
	    if (this.useInstancing)
	    return; //not supported if instancing is used.

	    this.addVertex(x, y, color, dbId, layerId, vpId);

	    this.addToBounds(x, y);
	};

	VertexBufferBuilder.prototype.addIndices = function (indices, vindex) {

	    if (this.useInstancing)
	    return; //not supported if instancing is used.

	    var ib = this.ib;
	    var ii = this.icount;

	    if (ii + indices.length >= ib.length) {
	        var ibnew = new Uint16Array(Math.max(indices.length, ib.length) * 2);
	        for (var i = 0; i < ii; ++i) {
	            ibnew[i] = ib[i];
	        }
	        this.ib = ib = ibnew;
	    }

	    for (var i = 0; i < indices.length; ++i) {
	        ib[ii + i] = vindex + indices[i];
	    }

	    this.icount += indices.length;
	};

	//====================================================================================================
	//====================================================================================================
	// End indexed triangle code path.
	//====================================================================================================
	//====================================================================================================


	VertexBufferBuilder.prototype.finalizeQuad = function (vindex)
	{
	    if (!this.useInstancing) {
	        this.addIndices(QUAD_TRIANGLE_INDICES, vindex);
	    }
	};


	VertexBufferBuilder.prototype.addSegment = function (x1, y1, x2, y2, totalDistance, lineWidth, color, dbId, layerId, vpId, lineType)
	{
	    var dx = x2 - x1;
	    var dy = y2 - y1;
	    var angle = dx || dy ? Math.atan2(dy, dx) : 0.0;
	    var segLen = dx || dy ? Math.sqrt(dx * dx + dy * dy) : 0.0;

	    //Add four vertices for the bbox of this line segment
	    //This call sets the stuff that's common for all four
	    var v = this.addVertexLine(x1, y1, angle, segLen, totalDistance, lineWidth, color, dbId, layerId, vpId, lineType);

	    this.finalizeQuad(v);
	    this.addToBounds(x1, y1);
	    this.addToBounds(x2, y2);
	};


	//Creates a non-indexed triangle geometry (triangle vertex coords stored in single vertex structure)
	VertexBufferBuilder.prototype.addTriangleGeom = function (x1, y1, x2, y2, x3, y3, color, dbId, layerId, vpId)
	{
	    this.numTriangleGeoms++;

	    var v = this.addVertexTriangleGeom(x1, y1, x2, y2, x3, y3, color, dbId, layerId, vpId);

	    this.finalizeQuad(v);
	    this.addToBounds(x1, y1);
	    this.addToBounds(x2, y2);
	    this.addToBounds(x3, y3);
	};

	VertexBufferBuilder.prototype.addArc = function (cx, cy, start, end, major, minor, tilt, lineWidth, color, dbId, layerId, vpId)
	{
	    if (major == minor) {
	        this.numCirculars++;
	    } else {
	        this.numEllipticals++;
	    }

	    // This is a workaround, when the circular arc has rotation, the extractor cannot handle it.
	    // After the fix is deployed in extractor, this can be removed.
	    var result = fixUglyArc(start, end);
	    start = result.start;
	    end = result.end;

	    //If both start and end angles are exactly 0, it's a complete ellipse/circle
	    //This is working around a bug in the F2D writer, where an fmod operation will potentially.
	    //convert 2pi to 0.
	    if (start == 0 && end == 0)
	    end = TAU;

	    //Add two zero length segments as round caps at the end points
	    {
	        //If it's a full ellipse, then we don't need caps
	        var range = Math.abs(start - end);
	        if (range > 0.0001 && Math.abs(range - TAU) > 0.0001)
	        {
	            var sx = cx + major * Math.cos(start);
	            var sy = cy + minor * Math.sin(start);
	            this.addSegment(sx, sy, sx, sy, 0, lineWidth, color, dbId, layerId, vpId);

	            var ex = cx + major * Math.cos(end);
	            var ey = cy + minor * Math.sin(end);
	            this.addSegment(ex, ey, ex, ey, 0, lineWidth, color, dbId, layerId, vpId);

	            //TODO: also must add all the vertices at all multiples of PI/2 in the start-end range to get exact bounds
	        } else

	        {
	            this.addToBounds(cx - major, cy - minor);
	            this.addToBounds(cx + major, cy + minor);
	        }

	        // Add the center of the circle / ellipse as a single transparent dot - So it wil be snappable.
	        var c = this.addVertexLine(cx, cy, 0, 0.0001, 0, 0, 1, dbId, layerId, vpId);
	        this.finalizeQuad(c);
	    }

	    var v = this.addVertexArc(cx, cy, start, end, major, minor, tilt, lineWidth, color, dbId, layerId, vpId);

	    this.finalizeQuad(v);

	    //Testing caps
	    if (false) {
	        //If it's a full ellipse, then we don't need caps
	        var range = Math.abs(start - end);
	        if (Math.abs(range - TAU) > 0.0001)
	        {
	            var sx = cx + major * Math.cos(start);
	            var sy = cy + minor * Math.sin(start);
	            this.addSegment(sx, sy, sx, sy, 0, lineWidth, 0xff00ffff, dbId, layerId, vpId);

	            var ex = cx + major * Math.cos(end);
	            var ey = cy + minor * Math.sin(end);
	            this.addSegment(ex, ey, ex, ey, 0, lineWidth, 0xff00ffff, dbId, layerId, vpId);
	        }
	    }
	};


	VertexBufferBuilder.prototype.addTexturedQuad = function (centerX, centerY, width, height, rotation, color, dbId, layerId, vpId)
	{
	    //Height is specified using the line weight field.
	    //This will result in height being clamped to at least one pixel
	    //but that's ok (zero height for an image would be rare).
	    var v = this.addVertexTexQuad(centerX, centerY, width, height, rotation, color, dbId, layerId, vpId);

	    this.finalizeQuad(v);

	    var cos = 0.5 * Math.cos(rotation);
	    var sin = 0.5 * Math.sin(rotation);
	    var w = Math.abs(width * cos) + Math.abs(height * sin);
	    var h = Math.abs(width * sin) + Math.abs(height * cos);
	    this.addToBounds(centerX - w, centerY - h);
	    this.addToBounds(centerX + w, centerY + h);
	};

	VertexBufferBuilder.prototype.isFull = function (addCount)
	{
	    addCount = addCount || 3;
	    var mult = this.useInstancing ? 4 : 1;

	    return this.vcount * mult + addCount > this.FULL_COUNT;
	};

	VertexBufferBuilder.prototype.toMesh = function ()
	{
	    var mesh = {};

	    mesh.vb = new Float32Array(this.vb.slice(0, this.vcount * this.stride * 4));
	    mesh.vbstride = this.stride;

	    var d = this.useInstancing ? 1 : 0;

	    mesh.vblayout = {
	        "fields1": { offset: 0, itemSize: 3, bytesPerItem: 4, divisor: d, normalize: false },
	        "fields2": { offset: 3, itemSize: 3, bytesPerItem: 4, divisor: d, normalize: false },
	        "color4b": { offset: VBB_COLOR_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: true },
	        "dbId4b": { offset: VBB_DBID_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false },
	        "flags4b": { offset: VBB_FLAGS_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false },
	        "layerVp4b": { offset: VBB_LAYER_VP_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false } };


	    //Are we using an expanded vertex layout -- then add the extra attribute to the layout
	    if (this.stride > 10) {
	        mesh.vblayout["extraParams"] = { offset: 10, itemSize: 2, bytesPerItem: 4, divisor: d, normalize: false };
	    }

	    if (this.useInstancing) {
	        mesh.numInstances = this.vcount;

	        //Set up trivial vertexId and index attributes

	        var instFlags = new Int32Array([VBB_SEG_START_RIGHT, VBB_SEG_START_LEFT, VBB_SEG_END_RIGHT, VBB_SEG_END_LEFT]);
	        mesh.vblayout.instFlags4b = { offset: 0, itemSize: 4, bytesPerItem: 1, divisor: 0, normalize: false };
	        mesh.vblayout.instFlags4b.array = instFlags.buffer;

	        var idx = mesh.indices = new Uint16Array(QUAD_TRIANGLE_INDICES);
	    } else {
	        mesh.indices = new Uint16Array(this.ib.buffer.slice(0, 2 * this.icount));
	    }

	    mesh.dbIds = this.dbIds;

	    var w = this.maxx - this.minx;
	    var h = this.maxy - this.miny;
	    var sz = Math.max(w, h);

	    mesh.boundingBox = {
	        min: { x: this.minx, y: this.miny, z: -sz * 1e-3 },
	        max: { x: this.maxx, y: this.maxy, z: sz * 1e-3 } };


	    //Also compute a rough bounding sphere
	    var bs = mesh.boundingSphere = {
	        center: {
	            x: 0.5 * (this.minx + this.maxx),
	            y: 0.5 * (this.miny + this.maxy),
	            z: 0.0 },

	        radius: 0.5 * Math.sqrt(w * w + h * h) };


	    return mesh;
	};

	// The following logic attempts to "fix" imprecisions in arc definitions introduced
	// by Heidi's fixed point math, in case that the extractor doesn't handle it correctly.

	var fixUglyArc = function fixUglyArc(start, end)
	{
	    //Snap critical angles exactly
	    function snapCritical() {
	        function fuzzyEquals(a, b) {return Math.abs(a - b) < 1e-3;}

	        if (fuzzyEquals(start, 0)) start = 0.0;
	        if (fuzzyEquals(end, 0)) end = 0.0;
	        if (fuzzyEquals(start, TAU)) start = TAU;
	        if (fuzzyEquals(end, TAU)) end = TAU;
	    }

	    snapCritical();

	    //OK, in some cases the angles are both over-rotated...
	    if (start > end) {
	        while (start > TAU) {
	            start -= TAU;
	            end -= TAU;
	        }
	    } else {
	        while (end > TAU) {
	            start -= TAU;
	            end -= TAU;
	        }
	    }

	    //Snap critical angles exactly -- again
	    snapCritical();

	    //If the arc crosses the x axis, we have to make it clockwise...
	    //This is a side effect of bringing over-rotated arcs in range above.
	    //For example start = 5.0, end = 7.0 will result in start < 0 and end > 0,
	    //so we have to make start > end in order to indicate we are crossing angle = 0.
	    if (start < 0 && end > 0) {
	        start += TAU;
	    }

	    return { start: start, end: end };
	};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.




























































































































































































































































	register = register;var _Xhr = __webpack_require__(2);var _F2dProbe = __webpack_require__(50);var _Logger = __webpack_require__(3);var _StringUtils = __webpack_require__(7);var _ErrorCodes = __webpack_require__(6);var pako = __webpack_require__(8);var ENABLE_F2D_STREAMING_MODE = true;function requestFileF2D(loadContext, filename, onSuccess) {var url = loadContext.basePath + filename;_Xhr.ViewingService.getItem(loadContext, url, onSuccess, null);} // Stream loading f2d data and prepare parseable data frames.
	function doStreamF2D(loadContext) {var _this = loadContext.worker;_this.postMessage({ progress: 0.01 }); //Tell the main thread we are alive
	    //Get the metadata and manifest first.
	    var metadata;var manifest;var doneFiles = 0;var accumulatedStream = new Uint8Array(65536);var accumulatedBytes = 0;var responseData = null;function accumulateData(partial) {//Add the new bytes to the accumulation buffer
	        if (accumulatedStream.length < partial.length + accumulatedBytes) {var newlen = Math.max(accumulatedStream.length * 2, partial.length + accumulatedBytes);var ns = new Uint8Array(newlen);ns.set(accumulatedStream);accumulatedStream = ns;}accumulatedStream.set(partial, accumulatedBytes);accumulatedBytes += partial.length;}function markSucceeded(response) {responseData = response;}var dataReceived = accumulateData;var requestSucceeded = markSucceeded; // Start the request for the primary graphics
	    // Just accumulate data as it comes in, and remember response
	    // when it succeeds. The dataReceived and requestSucceeded
	    // variables are changed to other functions once the manifest
	    // and metadata are read.
	    _Xhr.ViewingService.getItem(loadContext, loadContext.url, function (responseData) {requestSucceeded(responseData);}, loadContext.onFailureCallback, { ondata: function ondata(partial) {dataReceived(partial);}, responseType: "" });requestFileF2D(loadContext, "metadata.json.gz", function (data) {try {metadata = JSON.parse((0, _StringUtils.utf8ArrayToString)(data));doneFiles++;} catch (e) {self.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "" /* does not matter what strings we put here since the final user facing error message is solely decided
	                                                                                                                                                                                                                                                                                                                                                                                                                                                             by ErrorCodes. Invent another code if we want a specific error message for this error. */);}if (doneFiles === 2) doStreamF2D_Continued(loadContext, manifest, metadata);});requestFileF2D(loadContext, "manifest.json.gz", function (data) {try {if (data) manifest = JSON.parse((0, _StringUtils.utf8ArrayToString)(data)); //The F2D does not necessarily need a manifest file to load (some old F2Ds don't have that)
	            doneFiles++;} catch (e) {}if (doneFiles === 2) doStreamF2D_Continued(loadContext, manifest, metadata);}); //Loads the F2D stream once the metadata and manifest files are fetched
	    function doStreamF2D_Continued(loadContext, manifest, metadata) {var _this = loadContext.worker;var url = loadContext.url; // Collect asset urls that to be send to main thread for mobile usage.
	        var assets = [];var f2dSize = 0;var altSize = 0;if (manifest && manifest.assets) {var a = manifest.assets;for (var i = 0; i < a.length; i++) {if (url.indexOf(a[i].URI) != -1) {f2dSize = a[i].usize || 0;break;} else if (a[i].type == "Autodesk.CloudPlatform.F2D") altSize = a[i].usize || 0;}}if (f2dSize == 0 && altSize > 0) f2dSize = altSize;var probe = new _F2dProbe.F2DProbe();var first = true;var streamOffset = 0;var sentMetadata = false;function onSuccess(responseData) {// Send collected f2d resource urls to main thread.
	            _this.postMessage({ "type": "F2DAssetURL", "urls": assets });assets = null;if (ENABLE_F2D_STREAMING_MODE) {var msg = { "type": "F2DSTREAM", "finalFrame": true, "finished": true, "progress": 1 };if (!sentMetadata) {msg.manifest = manifest;msg.metadata = metadata;msg.basePath = loadContext.basePath;msg.f2dSize = f2dSize;sentMetadata = true;}_this.debug("Total text bytes count : " + responseData.length);_this.postMessage(msg); //Streaming code path ends here -- we have already sent
	                //the data back from the progress callback
	                return;} //Non-streaming code path here
	            if (accumulatedStream.length > accumulatedBytes) accumulatedStream = new Uint8Array(accumulatedStream.buffer.slice(0, accumulatedBytes));var view;if (accumulatedStream[0] == 31 && accumulatedStream[1] == 139) {try {view = new Uint8Array(accumulatedStream.buffer, 0, accumulatedBytes);view = pako.ungzip(view);} catch (e) {console.error(e);}}var msg = { "type": "F2DBLOB", "metadata": metadata, "manifest": manifest, "f2dSize": f2dSize, "basePath": loadContext.basePath, // TODO: we might be able to infer this elsewhere.
	                "progress": 1, "buffer": view.buffer };var transferList = [];transferList.push(view.buffer);_this.postMessage(msg, transferList);}function processData() {if (!ENABLE_F2D_STREAMING_MODE) return;if (first) {first = false; // If the very first two bytes of the entire stream is GZIP magic number,
	                // then we fall back on none streaming mode, because streaming mode only
	                // work with browser decompression, and the presence of such magic number
	                // implies browser decompression fails, for whatever reasons.
	                if (accumulatedStream[0] == 31 && accumulatedStream[1] == 139) {_Logger.logger.error("F2D streaming broken by non-streaming unzip!", (0, _ErrorCodes.errorCodeString)(_ErrorCodes.ErrorCodes.BAD_DATA));ENABLE_F2D_STREAMING_MODE = false;return;}}var view = new Uint8Array(accumulatedStream.buffer, streamOffset, accumulatedBytes - streamOffset);try {var marker = probe.load(view);if (marker.frameEnd > marker.frameStart) {var frames = accumulatedStream.buffer.slice(streamOffset + marker.frameStart, streamOffset + marker.frameEnd);streamOffset += marker.frameEnd;var transferList = [];transferList.push(frames);var msg = { "type": "F2DSTREAM", "frames": frames, "finalFrame": false };if (f2dSize) msg.progress = streamOffset / f2dSize;if (!sentMetadata) {msg.manifest = manifest;msg.metadata = metadata;msg.f2dSize = f2dSize;msg.basePath = loadContext.basePath;sentMetadata = true;}_this.postMessage(msg, transferList);}} catch (e) {_this.debug(e);}}function onData(partial) {accumulateData(partial);processData();}requestSucceeded = onSuccess;dataReceived = onData; // check to see if the primary graphics request has received any data
	        if (accumulatedBytes > 0) processData(); // check to see if primary graphics request succeeded
	        if (responseData != null) onSuccess(responseData);}}function register(workerMain) {workerMain.register("STREAM_F2D", { doOperation: doStreamF2D });}

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	
	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.






	F2DProbe = F2DProbe;var _CheckedInputStream = __webpack_require__(51);var _F2d = __webpack_require__(47);var _ErrorCodes = __webpack_require__(6);var _Logger = __webpack_require__(3);function F2DProbe() {
	    this.data = null;
	    this.frameStart = 0;
	    this.frameEnd = 0;
	    this.stream = null;
	    this.opCount = 0;
	    this.marker = { frameStart: this.frameStart,
	        frameEnd: this.frameEnd };
	}

	F2DProbe.prototype.load = function (data) {
	    this.data = data;
	    this.frameStart = 0;

	    if (!this.stream) {
	        this.stream = new _CheckedInputStream.CheckedInputStream(this.data);
	        // Skip headers.
	        this.stream.seek(8);
	        this.frameStart = 8;
	        this.frameEnd = 8;
	    } else
	    {
	        this.stream.reset(this.data);
	        this.stream.seek(0);
	        this.frameEnd = 0;
	    }

	    this.probe();
	    this.marker.frameStart = this.frameStart;
	    this.marker.frameEnd = this.frameEnd;
	    return this.marker;
	};

	var F2dProbeDataType = _F2d.F2dDataType;
	var F2dProbeSemanticType = _F2d.F2dSemanticType;

	F2DProbe.prototype.readColor = function () {
	    var s = this.stream;
	    s.getVarints(); // data type : dt_int 3
	    s.getVarints(); // semantic type : st_object_member 0
	    s.skipUint32(); // color
	};

	F2DProbe.prototype.parsePointPositions = function () {
	    this.stream.getVarints();
	    this.stream.getVarints();
	};

	F2DProbe.prototype.unhandledTypeWarning = function (inFunction, semanticType) {
	    _Logger.logger.warn("Unhandled semantic type when probing F2d : " + semanticType + " in function " + inFunction);
	};

	F2DProbe.prototype.parseObject = function () {
	    /*var semantic_type =*/this.stream.getVarints();
	    //debug("object parsing : type" + semantic_type);
	};


	F2DProbe.prototype.parseString = function () {
	    var s = this.stream;
	    s.getVarints();
	    var len = s.getVarints();
	    s.skipBytes(len);
	};

	F2DProbe.prototype.parsePoint = function () {
	    this.stream.getVarints();
	    this.parsePointPositions();
	};

	F2DProbe.prototype.parseVarintArray = function () {
	    var s = this.stream;
	    s.getVarints();

	    var count = s.getVarints();
	    for (var i = 0; i < count; ++i) {
	        s.getVarints();}
	};

	F2DProbe.prototype.parseByteArray = function () {
	    var s = this.stream;
	    s.getVarints();
	    var count = s.getVarints();
	    s.skipBytes(count);
	};

	F2DProbe.prototype.parseEndOfObject = function () {
	    var s = this.stream;
	    s.getVarints();
	    s.getVarints();
	};

	F2DProbe.prototype.parsePointsArray = function (context) {
	    var s = this.stream;
	    var sema = s.getVarints();
	    var count = s.getVarints(); // number of coordinates * 2
	    if (!count) return;
	    count = count / 2;
	    for (var i = 0; i < count; ++i) {
	        this.parsePointPositions();}
	};

	F2DProbe.prototype.parsePoint = function (context) {
	    var s = this.stream;
	    var sema = s.getVarints();
	    this.parsePointPositions();
	};

	F2DProbe.prototype.parseInt = function () {
	    var s = this.stream;
	    var sema = s.getVarints();

	    switch (sema) {
	        case F2dProbeSemanticType.st_color:
	            s.skipUint32();
	            break;
	        case F2dProbeSemanticType.st_fill:{
	                s.skipUint32();
	                break;
	            }
	        default:
	            s.skipUint32();
	            this.unhandledTypeWarning('parseInt', sema);
	            break;}

	};

	F2DProbe.prototype.parseVoid = function () {
	    var sema = this.stream.getVarints();
	    switch (sema) {
	        case F2dProbeSemanticType.st_fill_off:
	            break;
	        default:
	            this.unhandledTypeWarning('parseVoid', sema);
	            break;}

	};

	F2DProbe.prototype.parseVarint = function () {
	    this.stream.getVarints();
	    this.stream.getVarints();
	};

	F2DProbe.prototype.parseIntArray = function () {
	    var s = this.stream;
	    s.getVarints();
	    var count = s.getVarints();
	    for (var i = 0; i < count; ++i) {
	        s.skipUint32();}
	};

	F2DProbe.prototype.parseFloat = function () {
	    var s = this.stream;
	    s.getVarints();
	    s.getFloat32();
	};

	F2DProbe.prototype.parseDoubleArray = function () {
	    var s = this.stream;
	    s.getVarints();
	    var count = s.getVarints();
	    for (var i = 0; i < count; ++i) {
	        s.skipFloat64();}
	};

	F2DProbe.prototype.parseCircularArc = function () {
	    var s = this.stream;
	    s.getVarints();
	    this.parsePointPositions();
	    s.getVarints();
	    s.getFloat32();
	    s.getFloat32();
	};

	F2DProbe.prototype.parseCircle = function () {
	    var s = this.stream;
	    s.getVarints();
	    this.parsePointPositions();
	    s.getVarints();
	};

	F2DProbe.prototype.parseArc = function () {
	    var s = this.stream;
	    s.getVarints();
	    this.parsePointPositions();
	    s.getVarints();
	    s.getVarints();
	    s.getFloat32();
	    s.getFloat32();
	    s.getFloat32();
	};

	F2DProbe.prototype.parseDataType = function () {
	    var data_type = this.stream.getVarints();

	    switch (data_type) {
	        case F2dProbeDataType.dt_void:
	            this.parseVoid();
	            break;
	        case F2dProbeDataType.dt_int:
	            this.parseInt();
	            break;
	        case F2dProbeDataType.dt_object:
	            this.parseObject();
	            break;
	        case F2dProbeDataType.dt_varint:
	            this.parseVarint();
	            break;
	        case F2dProbeDataType.dt_float:
	            this.parseFloat();
	            break;
	        case F2dProbeDataType.dt_point_varint:
	            this.parsePoint();
	            break;
	        case F2dProbeDataType.dt_point_varint_array:
	            this.parsePointsArray();
	            break;
	        case F2dProbeDataType.dt_circular_arc:
	            this.parseCircularArc();
	            break;
	        case F2dProbeDataType.dt_circle:
	            this.parseCircle();
	            break;
	        case F2dProbeDataType.dt_arc:
	            this.parseArc();
	            break;
	        case F2dProbeDataType.dt_varint_array:
	            this.parseVarintArray();
	            break;
	        case F2dProbeDataType.dt_int_array:
	            this.parseIntArray();
	            break;
	        case F2dProbeDataType.dt_byte_array:
	            this.parseByteArray();
	            break;
	        case F2dProbeDataType.dt_string:
	            this.parseString();
	            break;
	        case F2dProbeDataType.dt_double_array:
	            this.parseDoubleArray();
	            break;
	        default:
	            this.error = true;
	            _Logger.logger.error("Bad op code encountered : " + data_type + " , bail out.", (0, _ErrorCodes.errorCodeString)(_ErrorCodes.ErrorCodes.BAD_DATA));
	            break;}


	    if (!this.error)
	    this.frameEnd = this.stream.offset;
	};

	F2DProbe.prototype.probe = function () {
	    var stream = this.stream;
	    var error = false;

	    try {
	        while (stream.offset < stream.byteLength) {
	            this.parseDataType();
	            if (this.error) {
	                break;
	            }
	            this.opCount++;
	        }
	    } catch (exc) {
	        // Typically caused by out of bounds access of data.
	        var message = exc.toString();
	        var stack = exc.stack ? exc.stack.toString() : "...";

	        // Don't panic with this - we are supposed to hit out of bounds a couple of times when probing.
	        //debug("Error in F2DProbe.prototype.probe : " + message + " with stack : " + stack);
	    }
	};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	
	"use strict";

	// Similar as InputStream but with bounds checking.
	// Throw exception when out of bounds access is / to be made.
	Object.defineProperty(exports, "__esModule", { value: true });exports.CheckedInputStream = CheckedInputStream;function CheckedInputStream(buf) {
	    this.buffer = buf;
	    this.offset = 0;
	    this.byteLength = buf.length;

	    //We will use these shared memory arrays to
	    //convert from bytes to the desired data type.
	    this.convBuf = new ArrayBuffer(8);
	    this.convUint8 = new Uint8Array(this.convBuf);
	    this.convUint16 = new Uint16Array(this.convBuf);
	    this.convInt32 = new Int32Array(this.convBuf);
	    this.convUint32 = new Uint32Array(this.convBuf);
	}

	function OutOfBoundsBufferAccessException(offset) {
	    this.offset = offset;
	    this.message = "try to access an offset that is out of bounds: " + this.offset;
	    this.toString = function () {
	        return this.message;
	    };
	}

	CheckedInputStream.prototype.boundsCheck = function (offset) {
	    if (offset >= this.byteLength) {
	        throw new OutOfBoundsBufferAccessException(offset);
	    }
	};

	CheckedInputStream.prototype.seek = function (off) {
	    this.boundsCheck(off);
	    this.offset = off;
	};

	CheckedInputStream.prototype.getBytes = function (len) {
	    this.boundsCheck(this.offset + len);
	    var ret = new Uint8Array(this.buffer.buffer, this.offset, len);
	    this.offset += len;
	    return ret;
	};

	CheckedInputStream.prototype.skipBytes = function (len) {
	    this.boundsCheck(this.offset + len);
	    this.offset += len;
	};


	CheckedInputStream.prototype.getVarints = function () {
	    var b;
	    var value = 0;
	    var shiftBy = 0;
	    do {
	        this.boundsCheck(this.offset);
	        b = this.buffer[this.offset++];
	        value |= (b & 0x7f) << shiftBy;
	        shiftBy += 7;
	    } while (b & 0x80);
	    return value;
	};

	CheckedInputStream.prototype.getUint8 = function () {
	    this.boundsCheck(this.offset + 1);
	    return this.buffer[this.offset++];
	};

	CheckedInputStream.prototype.getUint16 = function () {
	    this.boundsCheck(this.offset + 2);
	    this.convUint8[0] = this.buffer[this.offset++];
	    this.convUint8[1] = this.buffer[this.offset++];
	    return this.convUint16[0];
	};

	CheckedInputStream.prototype.getInt16 = function () {
	    var tmp = this.getUint16();
	    //make negative integer if the ushort is negative
	    if (tmp > 0x7fff)
	    tmp = tmp | 0xffff0000;
	    return tmp;
	};

	CheckedInputStream.prototype.getInt32 = function () {
	    this.boundsCheck(this.offset + 4);
	    var src = this.buffer;
	    var dst = this.convUint8;
	    var off = this.offset;
	    dst[0] = src[off];
	    dst[1] = src[off + 1];
	    dst[2] = src[off + 2];
	    dst[3] = src[off + 3];
	    this.offset += 4;
	    return this.convInt32[0];
	};

	CheckedInputStream.prototype.getUint32 = function () {
	    this.boundsCheck(this.offset + 4);
	    var src = this.buffer;
	    var dst = this.convUint8;
	    var off = this.offset;
	    dst[0] = src[off];
	    dst[1] = src[off + 1];
	    dst[2] = src[off + 2];
	    dst[3] = src[off + 3];
	    this.offset += 4;
	    return this.convUint32[0];
	};

	CheckedInputStream.prototype.skipUint32 = function () {
	    this.boundsCheck(this.offset + 4);
	    this.offset += 4;
	};

	CheckedInputStream.prototype.getFloat32 = function () {
	    this.boundsCheck(this.offset + 4);
	    this.offset += 4;
	    return 0;
	};

	CheckedInputStream.prototype.getFloat64 = function () {
	    this.boundsCheck(this.offset + 8);
	    this.offset += 8;
	    return 0;
	};

	CheckedInputStream.prototype.skipFloat64 = function () {
	    this.boundsCheck(this.offset + 8);
	    this.offset += 8;
	};

	CheckedInputStream.prototype.reset = function (buf) {
	    this.buffer = buf;
	    this.offset = 0;
	    this.byteLength = buf.length;
	};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.































































































































	register = register;var _PackReader = __webpack_require__(34);var _Geoms = __webpack_require__(53);var _ErrorCodes = __webpack_require__(6);var _Xhr = __webpack_require__(2);var _DeriveTopology = __webpack_require__(54);function guardFunction(loadContext, f) {try {f();} catch (exc) {loadContext.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "Unhandled exception while reading pack file", { "url": loadContext.url, "exception": exc.toString(), "stack": exc.stack });}}function doGeomLoad(loadContext) {var _this = loadContext.worker; //Make a blocking request -- it's ok, because
	    //we are in a worker thread.
	    function onSuccess(arrayBuffer) {_this.postMessage({ url: loadContext.url, workerId: loadContext.workerId, progress: 0.5 }); //rough progress reporting -- can do better
	        guardFunction(loadContext, function () {var pfr = new _PackReader.PackFileReader(arrayBuffer);var raisedError = false;var options = { estimateSizeOnly: true, packNormals: typeof loadContext.packNormals !== "undefined" ? loadContext.packNormals : true };var i,iEnd = pfr.getEntryCounts(),mesh;var skip = loadContext.inMemory || [];var estLength = 0;var shouldReadNext = function shouldReadNext(i) {var v = skip[i >> 5];return !v || !(v & 1 << (i & 31));};for (i = 0; i < iEnd; i++) {if (shouldReadNext(i)) {mesh = (0, _Geoms.readGeometry)(pfr, i, options);estLength += mesh && mesh.sharedBufferBytes || 0;}}var sharedBuffer = estLength ? new ArrayBuffer(estLength) : null;var currentOffset = 0;var msg = { "packId": loadContext.packId, "workerId": loadContext.workerId, "progress": 1, "meshes": [], "sharedBuffer": sharedBuffer };var transferList = sharedBuffer ? [sharedBuffer] : [];options = { dstBuffer: sharedBuffer, startOffset: 0, estimateSizeOnly: false, packNormals: typeof loadContext.packNormals !== "undefined" ? loadContext.packNormals : true };for (i = 0; i < iEnd; i++) {options.startOffset = currentOffset;if (shouldReadNext(i)) {mesh = (0, _Geoms.readGeometry)(pfr, i, options);if (mesh) {currentOffset += mesh.sharedBufferBytes || 0;msg.meshes[i] = mesh;if (loadContext.createWireframe) {(0, _DeriveTopology.createWireframe)(mesh); //TODO: optimize the storage of the lines index buffer to use
	                            //a single shared buffer for all meshes in the pack
	                            if (mesh.iblines) transferList.push(mesh.iblines.buffer);}} else {// it doesn't make much sense to raise an error for each entry that can't
	                        // be read, because chances are they will all be unreadable after the
	                        // first bad one.
	                        if (!raisedError) {_this.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "Unable to load geometry", { "url": loadContext.url });raisedError = true;} // in this case, we still post the full message instead of just null;
	                        // the mesh itself will be null, of course.
	                        _this.postMessage(msg);}}}_this.postMessage(msg, transferList);});} // With this option to control whether want to record assets request.
	    // Skip it when on demand loading enabled.
	    var options = { skipAssetCallback: loadContext.skipAssetCallback };_Xhr.ViewingService.getItem(loadContext, loadContext.url, onSuccess, loadContext.onFailureCallback, options);}function register(workerMain) {workerMain.register("LOAD_GEOMETRY", { doOperation: doGeomLoad });}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.

















































































































































































































































































































































































































































































































































































































	readGeometry = readGeometry;var _compat = __webpack_require__(4);var _VbUtils = __webpack_require__(27); //import { readOpenCTM_MG2 } from './OctmMG2';
	"use strict"; //=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	var ntmp = new Float32Array(3);var INV_PI = 1.0 / Math.PI;var atan2 = Math.atan2;if (!(0, _compat.isNodeJS)()) {//Faster approximation to atan2
	    //http://math.stackexchange.com/questions/1098487/atan2-faster-approximation
	    //The algorithm does not deal with special cases such as x=0,y=0x=0,y=0,
	    //nor does it consider special IEEE-754 floating-point operands such as infinities and NaN.
	    atan2 = function atan2(y, x) {var ax = Math.abs(x);var ay = Math.abs(y); //var a = (ax > ay) ? ay / ax : ax / ay;
	        var a = Math.min(ax, ay) / Math.max(ax, ay);var s = a * a;var r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a;if (ay > ax) r = 1.57079637 - r;if (x < 0) r = 3.14159274 - r;if (y < 0) r = -r;return r;};}function readOpenCTM_RAW(stream, mesh, dstBuffer, startOffset, estimateSizeOnly) {var readOpenCTMString = function readOpenCTMString() {return stream.getString(stream.getInt32());}; //Now do the data reads
	    var name = stream.getString(4);if (name != "INDX") return null;var vcount = mesh.vertexCount;var tcount = mesh.triangleCount;var stride = mesh.vbstride; //We will create a single ArrayBuffer to back both the vertex and index buffers
	    //The indices will be places after the vertex information, because we need alignment
	    //of 4 bytes
	    var vbSizeFloat = vcount * stride;var totalSizeInFloats = vbSizeFloat + (tcount * 3 * 2 + 3) / 4 | 0;mesh.sharedBufferBytes = totalSizeInFloats * 4;if (estimateSizeOnly) {return;}var vbf;if (!dstBuffer) {dstBuffer = new ArrayBuffer(totalSizeInFloats * 4);startOffset = 0;}vbf = mesh.vb = new Float32Array(dstBuffer, startOffset, vbSizeFloat);mesh.indices = new Uint16Array(dstBuffer, startOffset + vbSizeFloat * 4, tcount * 3);stream.getIndicesArray(vbf.buffer, startOffset + vbSizeFloat * 4, tcount * 3);name = stream.getString(4);if (name != "VERT") return null;var vbi; //See if we want to pack the normals into two shorts
	    if (mesh.vblayout.normal && mesh.vblayout.normal.itemSize === 2) vbi = new Uint16Array(vbf.buffer, vbf.byteOffset, vbf.byteLength / 2); //Read positions
	    stream.getVector3Array(vbf, vcount, mesh.vblayout['position'].offset, stride); //Read normals
	    var i, t, offset;if (mesh.flags & 1) {name = stream.getString(4);if (name != "NORM") return null;if (vbi) {if (ntmp.length < vcount * 3) ntmp = new Float32Array(vcount * 3);stream.getVector3Array(ntmp, vcount, 0, 3);for (i = 0, offset = mesh.vblayout['normal'].offset; i < vcount; i++, offset += stride) {var pnx = (atan2(ntmp[i * 3 + 1], ntmp[i * 3]) * INV_PI + 1.0) * 0.5;var pny = (ntmp[i * 3 + 2] + 1.0) * 0.5;vbi[offset * 2] = pnx * 65535 | 0;vbi[offset * 2 + 1] = pny * 65535 | 0;}} else {stream.getVector3Array(vbf, vcount, mesh.vblayout['normal'].offset, stride);}} //Read uv layers
	    for (t = 0; t < mesh.texMapCount; t++) {name = stream.getString(4);if (name != "TEXC") return null;var uv = { name: readOpenCTMString(), file: readOpenCTMString() };mesh.uvs.push(uv);var uvname = "uv";if (t) uvname += (t + 1).toString();stream.getVector2Array(vbf, vcount, mesh.vblayout[uvname].offset, stride);}var attributeOffset = stride - (mesh.attribMapCount || 0) * 3; //Read vertex colors and uvw (and skip any other attributes that we don't know)
	    for (t = 0; t < mesh.attribMapCount; t++) {name = stream.getString(4);if (name != "ATTR") return null;var attr = { name: readOpenCTMString() }; // console.log("attribute", attr.name);
	        var attrname;if (attr.name.indexOf("Color") != -1) //Special case of vertex colors
	            attrname = 'color';else if (attr.name.indexOf("UVW") != -1) //Only used by prism 3d wood.
	            attrname = 'uvw';else {//Other attributes, though we don't know what to do with those
	            mesh.attrs.push(attr);stream.getBytes(vcount * 16); //skip past
	            continue;}mesh.vblayout[attrname] = { offset: attributeOffset, itemSize: 3 };var v4 = [0, 0, 0, 0];for (i = 0, offset = attributeOffset; i < vcount; i++, offset += stride) {stream.getVector4(v4, 0);vbf[offset] = v4[0];vbf[offset + 1] = v4[1];vbf[offset + 2] = v4[2]; //Ignoring the alpha term. For color attribute, we can actually pack it in a 4-byte attribute,
	            //but we do not know in advance (when we allocate the target buffer) if the OCTM attribute is UVW or color
	        }attributeOffset += 3;}} // Helper function for calculating new vertex for wide lines
	var getLineSplitVertex = function getLineSplitVertex(stride, vbf, neighbourhoods, a, b) {// New vertex position
	    var pos = { x: vbf[stride * a], y: vbf[stride * a + 1], z: vbf[stride * a + 2] }; // Direction to the next vertex for segment (must be valid always)
	    var next = { x: pos.x - vbf[stride * b], y: pos.y - vbf[stride * b + 1], z: pos.z - vbf[stride * b + 2] }; // Index of previous point
	    var prev_ind = neighbourhoods[a].next == b ? neighbourhoods[a].prev : neighbourhoods[a].next; // Direction to previous point
	    var prev; // If does not exist
	    if (prev_ind < 0) {// mirror next direction
	        prev = { x: next.x, y: next.y, z: next.z };} else {// else - set directly
	        prev = { x: vbf[stride * prev_ind] - pos.x, y: vbf[stride * prev_ind + 1] - pos.y, z: vbf[stride * prev_ind + 2] - pos.z };}return { pos: pos, next: next, prev: prev };}; // convert a line mesh into specially organised triangles, which will be drawn
	// as lines with a specific width
	var convertToWideLines = function convertToWideLines(mesh, stride, vbf, indexPairs, offset) {var numCoords = 3; // add some extra vertex data to the mesh
	    // prev & next are directions specific vertex positions, which are used to specify
	    // the offset direction in the shader
	    // side is the directed line width used for the magnitude of the offset in the shader
	    offset = mesh.vbstride;mesh.vblayout['prev'] = { offset: offset, itemSize: numCoords };offset += numCoords;mesh.vblayout['next'] = { offset: offset, itemSize: numCoords };offset += numCoords;mesh.vblayout['side'] = { offset: offset, itemSize: 1 };mesh.vbstride += 7;var lineWidth = mesh.lineWidth; // Count of shared vertexes
	    var connections = 0; // Build neighbourhoods of each vertex
	    var neighbourhoods = new Array(mesh.vertexCount);var i, j, n, a, b;for (i = 0; i < mesh.vertexCount; ++i) {neighbourhoods[i] = { prev: -1, // index of previous vertex
	            next: -1, // index of next vertex
	            prev_seg: -1 // index of previous segment
	        };}for (j = 0; j < indexPairs; ++j) {n = j * 2;a = mesh.indices[n];b = mesh.indices[n + 1];neighbourhoods[a].next = b;if (neighbourhoods[a].prev >= 0) {++connections;}neighbourhoods[b].prev = a;neighbourhoods[b].prev_seg = j;if (neighbourhoods[b].next >= 0) {++connections;}} // Each segment will have its own vertexes
	    var newBaseVertexCount = indexPairs * 2;var newBaseVertexies = new Array(newBaseVertexCount); // Indexes contains line segments and additional connection for shared vertexes
	    var newIndices = new Uint16Array(2 * numCoords * (indexPairs + connections));var meshIndex = 0; // Split all vertexes and build indexes of all triangles
	    for (j = 0; j < indexPairs; ++j) {n = j * 2;a = mesh.indices[n];b = mesh.indices[n + 1]; // New vertexes with calculated next and previous points
	        newBaseVertexies[n] = getLineSplitVertex(stride, vbf, neighbourhoods, a, b);newBaseVertexies[n + 1] = getLineSplitVertex(stride, vbf, neighbourhoods, b, a); // Segment triangles
	        a = n;b = n + 1; // First two coordinates form line segment are used in ray casting
	        newIndices[meshIndex++] = 2 * a + 1;newIndices[meshIndex++] = 2 * b;newIndices[meshIndex++] = 2 * a;newIndices[meshIndex++] = 2 * b;newIndices[meshIndex++] = 2 * b + 1;newIndices[meshIndex++] = 2 * a; // Connection triangles for shared vertexes, if exist
	        a = mesh.indices[n];if (neighbourhoods[a].prev >= 0) {b = neighbourhoods[a].prev_seg * 2 + 1;a = n;newIndices[meshIndex++] = 2 * b;newIndices[meshIndex++] = 2 * a;newIndices[meshIndex++] = 2 * b + 1;newIndices[meshIndex++] = 2 * a + 1;newIndices[meshIndex++] = 2 * a;newIndices[meshIndex++] = 2 * b;}}mesh.indices = newIndices; // Finally, fill vertex buffer with new data
	    var newVertexCount = newBaseVertexCount * 2;mesh.vb = new Float32Array(newVertexCount * mesh.vbstride);offset = mesh.vblayout['position'].offset;for (var c = 0; c < newBaseVertexCount; ++c) {// Duplicate every vertex for each side
	        for (var side = 0; side < 2; ++side) {// Vertex position
	            mesh.vb[offset] = newBaseVertexies[c].pos.x;mesh.vb[offset + 1] = newBaseVertexies[c].pos.y;mesh.vb[offset + 2] = newBaseVertexies[c].pos.z;offset += stride; // Previous vertex direction
	            mesh.vb[offset] = newBaseVertexies[c].prev.x;mesh.vb[offset + 1] = newBaseVertexies[c].prev.y;mesh.vb[offset + 2] = newBaseVertexies[c].prev.z;offset += numCoords; // Next vertex direction
	            mesh.vb[offset] = newBaseVertexies[c].next.x;mesh.vb[offset + 1] = newBaseVertexies[c].next.y;mesh.vb[offset + 2] = newBaseVertexies[c].next.z;offset += numCoords; // Side (offset direction) modulated by line width
	            mesh.vb[offset] = side ? -lineWidth : lineWidth;offset += 1;}}mesh.vertexCount = newVertexCount; // flag to mark this mesh as special
	    mesh.isWideLines = true;}; //=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	//=====================================================================
	var readOpenCTM = function readOpenCTM(stream, dstBuffer, startOffset, estimateSizeOnly, packNormals) {var readOpenCTMString = function readOpenCTMString() {return stream.getString(stream.getInt32());};var fourcc = stream.getString(4);if (fourcc != "OCTM") return null;var version = stream.getInt32();if (version != 5) return null;var method = stream.getString(3);stream.getUint8(); //read the last 0 char of the RAW or MG2 fourCC.
	    var mesh = { stream: null, vertices: null, indices: null, normals: null, colors: null, uvs: [], attrs: [] };mesh.vertexCount = stream.getInt32();mesh.triangleCount = stream.getInt32();mesh.texMapCount = stream.getInt32();mesh.attribMapCount = stream.getInt32();mesh.flags = stream.getInt32();mesh.comment = readOpenCTMString();var usePackedNormals = packNormals; //Calculate stride of the interleaved buffer we need
	    mesh.vbstride = 3; //position is always there
	    if (mesh.flags & 1) mesh.vbstride += usePackedNormals ? 1 : 3; //normal
	    mesh.vbstride += 2 * (mesh.texMapCount || 0); //texture coords
	    mesh.vbstride += 3 * (mesh.attribMapCount || 0); //we now support color and uvw. Both of them use three floats.
	    mesh.vblayout = {};var offset = 0;mesh.vblayout['position'] = { offset: offset, itemSize: 3 };offset += 3;if (mesh.flags & 1) {mesh.vblayout['normal'] = { offset: offset, itemSize: usePackedNormals ? 2 : 3, bytesPerItem: usePackedNormals ? 2 : 4, normalize: usePackedNormals };offset += usePackedNormals ? 1 : 3; //offset is counted in units of 4 bytes
	    }if (mesh.texMapCount) {for (var i = 0; i < mesh.texMapCount; i++) {var uvname = "uv";if (i) uvname += (i + 1).toString();mesh.vblayout[uvname] = { offset: offset, itemSize: 2 };offset += 2;}} //Now read and populate the mesh data
	    if (method == "RAW") {readOpenCTM_RAW(stream, mesh, dstBuffer, startOffset, estimateSizeOnly);if (!estimateSizeOnly) {_VbUtils.VBUtils.deduceUVRepetition(mesh);_VbUtils.VBUtils.computeBounds3D(mesh);}return mesh;} else if (method == "MG2") {//This code path is never used, since MG2 compression is disabled at the LMVTK C++ level
	        debug("readOpenCTM_MG2(stream, mesh, dstBuffer, startOffset, estimateSizeOnly) not supported");if (!estimateSizeOnly) {_VbUtils.VBUtils.deduceUVRepetition(mesh);_VbUtils.VBUtils.computeBounds3D(mesh);}return mesh;} else return null;};var readLinesOrPoints = function readLinesOrPoints(pfr, tse, estimateSizeOnly, lines) {//TODO: Line geometry does not go into shared buffers yet
	    if (estimateSizeOnly) return null; // Initialize mesh
	    var mesh = { vertices: null, indices: null, colors: null, normals: null, uvs: [], attrs: [], lineWidth: 1.0 }; // Read vertex count, index count, polyline bound count
	    var indexCount;if (lines) {// Read vertex count, index count, polyline bound count
	        var polyLineBoundCount;if (tse.version > 1) {mesh.vertexCount = pfr.readU16();indexCount = pfr.readU16();polyLineBoundCount = pfr.readU16();if (tse.version > 2) {mesh.lineWidth = pfr.readF32();}} else {mesh.vertexCount = pfr.readU32V();indexCount = pfr.readU32V();polyLineBoundCount = pfr.readU32V();}mesh.isLines = true;} else {// Read vertex count, index count, point size
	        mesh.vertexCount = pfr.readU16();indexCount = pfr.readU16();mesh.pointSize = pfr.readF32();mesh.isPoints = true;} // Determine if color is defined
	    var hasColor = pfr.stream.getUint8() != 0; //Calculate stride of the interleaved buffer we need
	    mesh.vbstride = 3; //position is always there
	    if (hasColor) mesh.vbstride += 3; //we only interleave the color attribute, and we reduce that to RGB from ARGB.
	    mesh.vblayout = {};var offset = 0;mesh.vblayout['position'] = { offset: offset, itemSize: 3 };offset += 3;if (hasColor) {mesh.vblayout['color'] = { offset: offset, itemSize: 3 };}mesh.vb = new Float32Array(mesh.vertexCount * mesh.vbstride); // Read vertices
	    var vbf = mesh.vb;var stride = mesh.vbstride;var stream = pfr.stream;stream.getVector3Array(vbf, mesh.vertexCount, mesh.vblayout['position'].offset, stride); // Determine color if specified
	    var c, cEnd;if (hasColor) {for (c = 0, offset = mesh.vblayout['color'].offset, cEnd = mesh.vertexCount; c < cEnd; c++, offset += stride) {vbf[offset] = stream.getFloat32();vbf[offset + 1] = stream.getFloat32();vbf[offset + 2] = stream.getFloat32();stream.getFloat32(); //skip alpha -- TODO: convert color to ARGB 32 bit integer in the vertex layout and shader
	        }} // Copies bytes from buffer
	    var forceCopy = function forceCopy(b) {return b.buffer.slice(b.byteOffset, b.byteOffset + b.length);}; // Read indices and polyline bound buffer
	    if (lines) {var indices;var polyLineBoundBuffer;if (tse.version > 1) {// 16 bit format
	            indices = new Uint16Array(forceCopy(stream.getBytes(indexCount * 2)));polyLineBoundBuffer = new Uint16Array(forceCopy(stream.getBytes(polyLineBoundCount * 2)));} else {// 32 bit format
	            indices = new Int32Array(forceCopy(stream.getBytes(indexCount * 4)));polyLineBoundBuffer = new Int32Array(forceCopy(stream.getBytes(polyLineBoundCount * 4)));} // three.js uses GL-style index pairs in its index buffer. We need one pair
	        // per segment in each polyline
	        var indexPairs = polyLineBoundBuffer[polyLineBoundCount - 1] - polyLineBoundCount + 1;mesh.indices = new Uint16Array(2 * indexPairs); // Extract the individual line segment index pairs
	        var meshIndex = 0;for (var i = 0; i + 1 < polyLineBoundCount; i++) {for (var j = polyLineBoundBuffer[i]; j + 1 < polyLineBoundBuffer[i + 1]; j++) {mesh.indices[meshIndex++] = indices[j];mesh.indices[meshIndex++] = indices[j + 1];}}} else {mesh.indices = new Uint16Array(forceCopy(stream.getBytes(indexCount * 2)));}if (mesh.lineWidth != 1.0) {convertToWideLines(mesh, stride, vbf, indexPairs, offset);}_VbUtils.VBUtils.computeBounds3D(mesh);return mesh;};var readLines = function readLines(pfr, tse, estimateSizeOnly) {return readLinesOrPoints(pfr, tse, estimateSizeOnly, true);};var readPoints = function readPoints(pfr, tse, estimateSizeOnly) {return readLinesOrPoints(pfr, tse, estimateSizeOnly, false);};function readGeometry(pfr, entry, options) {var tse = pfr.seekToEntry(entry);if (!tse) return null;if (tse.entryType == "Autodesk.CloudPlatform.OpenCTM") {return readOpenCTM(pfr.stream, options.dstBuffer, options.startOffset, options.estimateSizeOnly, options.packNormals);} else if (tse.entryType == "Autodesk.CloudPlatform.Lines") {return readLines(pfr, tse, options.estimateSizeOnly);} else if (tse.entryType == "Autodesk.CloudPlatform.Points") {return readPoints(pfr, tse, options.estimateSizeOnly);}return null;}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.



































































	createWireframe = createWireframe;var _VertexEnumerator = __webpack_require__(55);var _LmvVector = __webpack_require__(28);var _LmvBox = __webpack_require__(29);function remapVertices(geom, boundingBox) {//de-duplicate vertices based on position only (ignoring normals)
	    var remap = [];var uniqueV = {};var boxScale = 1.0;if (geom.boundingBox || boundingBox) {var bbox = new _LmvBox.LmvBox3().copy(geom.boundingBox || boundingBox);var sz = bbox.size();boxScale = Math.max(sz.x, Math.max(sz.y, sz.z));}var SCALE = (1 << 16) / boxScale; //snap scale, assuming unit mesh
	    function getVertexIndex(v, i) {var x = 0 | v.x * SCALE;var y = 0 | v.y * SCALE;var z = 0 | v.z * SCALE;var mx = uniqueV[x];if (!mx) {uniqueV[x] = mx = {};}var my = mx[y];if (!my) {mx[y] = my = {};}var mz = my[z];if (mz === undefined) {my[z] = mz = i;}return mz;}function remapcb(v, i) {var vidx = getVertexIndex(v, i);remap[i] = vidx;}(0, _VertexEnumerator.enumMeshVertices)(geom, remapcb);return remap;}function transformVertices(geom, toWorld) {var vbuf = new Float32Array(3 * (0, _VertexEnumerator.getVertexCount)(geom));function cb(v, i) {vbuf[3 * i] = v.x;vbuf[3 * i + 1] = v.y;vbuf[3 * i + 2] = v.z;}(0, _VertexEnumerator.enumMeshVertices)(geom, cb, toWorld);return vbuf;}function createWireframe(geom, toWorld, boundingBox, wantAllTriangleEdges) {if (geom.isLines)
	    return;

	    if (geom.iblines)
	    return;

	    //find unique vertices
	    var remap = remapVertices(geom, boundingBox);

	    //get vertices in world space -- we need this for
	    //correct angle calculations
	    var worldVerts = transformVertices(geom, toWorld);

	    //loop over all triangles, keeping track of
	    //edges that seem important
	    var seenEdges = {};

	    var edgeIB = [];

	    var _v1 = new _LmvVector.LmvVector3();
	    var _v2 = new _LmvVector.LmvVector3();
	    var _v3 = new _LmvVector.LmvVector3();
	    var _n1 = new _LmvVector.LmvVector3();
	    var _n2 = new _LmvVector.LmvVector3();

	    function getV(i, v) {
	        v.x = worldVerts[3 * i];
	        v.y = worldVerts[3 * i + 1];
	        v.z = worldVerts[3 * i + 2];
	    }

	    function getNormal(i1, i2, i3, n) {
	        getV(i1, _v1);
	        getV(i2, _v2);
	        getV(i3, _v3);

	        _v2.sub(_v1);
	        _v3.sub(_v1);
	        _v2.cross(_v3);

	        n.copy(_v2).normalize();
	    }

	    function doOneEdge(i1orig, i2orig, opp1orig) {

	        var i1 = remap[i1orig];
	        var i2 = remap[i2orig];
	        var opp1 = remap[opp1orig];

	        //Ignore degenerates
	        if (i1 === i2 || i1 === opp1 || i2 === opp1)
	        return;

	        var reversed = false;
	        if (i1 > i2) {
	            var tmp = i1;
	            i1 = i2;
	            i2 = tmp;
	            reversed = true;
	        }

	        var e1 = seenEdges[i1];
	        if (e1) {
	            var opp2orig = e1[i2];
	            if (opp2orig === undefined) {
	                e1[i2] = reversed ? -opp1orig - 1 : opp1orig;
	            } else {
	                //We now know two triangles that share this edge,
	                //we can check if it's important

	                if (!wantAllTriangleEdges) {
	                    //Use original indices, so that we
	                    //can do the math with the correct winding order
	                    getNormal(i1orig, i2orig, opp1orig, _n1);

	                    if (opp2orig < 0) {
	                        getNormal(i2, i1, remap[-opp2orig - 1], _n2);
	                    } else {
	                        getNormal(i1, i2, remap[opp2orig], _n2);
	                    }

	                    var dot = _n1.dot(_n2);

	                    if (Math.abs(dot) < 0.25) {
	                        edgeIB.push(i1orig);
	                        edgeIB.push(i2orig);
	                    }
	                } else {
	                    edgeIB.push(i1orig);
	                    edgeIB.push(i2orig);
	                }

	                delete e1[i2];
	            }
	        } else {
	            seenEdges[i1] = {};
	            seenEdges[i1][i2] = opp1orig;
	        }
	    }

	    function tricb(vA, vB, vC, iA, iB, iC) {
	        doOneEdge(iA, iB, iC);
	        doOneEdge(iB, iC, iA);
	        doOneEdge(iC, iA, iB);
	    }

	    //find edges that have neighboring triangles at sharp angle
	    (0, _VertexEnumerator.enumMeshTriangles)(geom, tricb);

	    //process remaining edges (outer edges that only have one triangle)

	    for (var i1 in seenEdges) {
	        for (var i2 in seenEdges[i1]) {
	            edgeIB.push(parseInt(i1));
	            edgeIB.push(parseInt(i2));
	        }
	    }


	    if (edgeIB.length > 1) {
	        geom.iblines = new Uint16Array(edgeIB.length);
	        geom.iblines.set(edgeIB);
	    }

	    /*
	          for (var i=0; i<geom.ib.length; i++) {
	              geom.ib[i] = remap[geom.ib[i]];
	          }
	          */
	}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.VertexEnumerator = undefined;exports.














	getVertexCount = getVertexCount;exports.











	enumMeshVertices = enumMeshVertices;exports.



































	enumMeshTriangles = enumMeshTriangles;exports.



































































































































	enumMeshLines = enumMeshLines;exports.





































































	enumMeshEdges = enumMeshEdges;var _LmvVector = __webpack_require__(28); //These functions work for both workers side interleaved buffer structures
	//and main thread side LmvBufferGeometry instances. The difference in naming
	//if the index attribute on both sides is super annoying and should be cleaned up.
	/** Works for BufferGeometry as well as THREE.BufferGeometry. Supports interleaved and non-interleaved buffers.
	 *   @param {BufferGeometry|THREE.BufferGeometry} geom
	 *   @returns {number}
	 */function getVertexCount(geom) {if (geom.vb) {// interleaved
	        return geom.vb.length / geom.vbstride;} // no interleaved buffer. Return count from position attribute or 0
	    return geom.attributes.positions ? geom.attributes.positions.count : 0;} //Utility logic for listing vertex data from LmvBufferGeometry interleaved buffers
	var _p;function enumMeshVertices(geometry, callback, matrix) {var attributes = geometry.attributes;var positions = geometry.vb || attributes.position.array;var stride = geometry.vb ? geometry.vbstride : 3; // Get the offset to positions in the buffer. Be careful, 2D buffers
	    // don't use the 'position' attribute for positions. Reject those.
	    var poffset;if (geometry.vblayout) {if (!geometry.vblayout.position) return; // No positions, what to do??
	        poffset = geometry.vblayout.position.offset;} else if (!attributes.position) return; // No positions, what to do??
	    else poffset = attributes.position.itemOffset || 0;var vcount = positions.length / stride;if (!_p) _p = new _LmvVector.LmvVector3();var pi = poffset;for (var i = 0; i < vcount; i++, pi += stride) {_p.set(positions[pi], positions[pi + 1], positions[pi + 2]);if (matrix) _p.applyMatrix4(matrix);callback(_p, i);}}var vA, vB, vC, nA, nB, nC;function enumMeshTriangles(geometry, callback) {var attributes = geometry.attributes;var a, b, c;if (!vA) {vA = new _LmvVector.LmvVector3();vB = new _LmvVector.LmvVector3();vC = new _LmvVector.LmvVector3();nA = new _LmvVector.LmvVector3();nB = new _LmvVector.LmvVector3();nC = new _LmvVector.LmvVector3();}var positions = geometry.vb || attributes.position.array;var normals = geometry.vb || attributes.normal && attributes.normal.array;var stride = geometry.vb ? geometry.vbstride : 3; // Get the offset to positions in the buffer. Be careful, 2D buffers
	    // don't use the 'position' attribute for positions. Reject those.
	    var poffset;if (geometry.vblayout) {if (!geometry.vblayout.position) return; // No positions, what to do??
	        poffset = geometry.vblayout.position.offset;} else if (!attributes.position) return; // No positions, what to do??
	    else poffset = attributes.position.itemOffset || 0;var noffset = 0;var nattr = geometry.vblayout ? geometry.vblayout.normal : attributes.normal || null;if (nattr) {noffset = nattr.offset || nattr.itemOffset || 0;} else {normals = null;}if (nattr && (nattr.itemSize !== 3 || nattr.bytesPerItem !== 4)) {//console.log("Normals are packed, will be skipped from enumMeshTriangles. Use packNormals=false load option.");
	        normals = null;}var indices = geometry.ib || geometry.indices || (attributes.index ? attributes.index.array : null);if (indices) {var offsets = geometry.offsets;if (!offsets || offsets.length === 0) {offsets = [{ start: 0, count: indices.length, index: 0 }];}for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {var start = offsets[oi].start;var count = offsets[oi].count;var index = offsets[oi].index;for (var i = start, il = start + count; i < il; i += 3) {a = index + indices[i];b = index + indices[i + 1];c = index + indices[i + 2];var pa = a * stride + poffset;var pb = b * stride + poffset;var pc = c * stride + poffset;vA.x = positions[pa];vA.y = positions[pa + 1];vA.z = positions[pa + 2];vB.x = positions[pb];vB.y = positions[pb + 1];vB.z = positions[pb + 2];vC.x = positions[pc];vC.y = positions[pc + 1];vC.z = positions[pc + 2];if (normals) {var na = a * stride + noffset;var nb = b * stride + noffset;var nc = c * stride + noffset;nA.x = normals[na];nA.y = normals[na + 1];nA.z = normals[na + 2];nB.x = normals[nb];nB.y = normals[nb + 1];nB.z = normals[nb + 2];nC.x = normals[nc];nC.y = normals[nc + 1];nC.z = normals[nc + 2];callback(vA, vB, vC, a, b, c, nA, nB, nC);} else {callback(vA, vB, vC, a, b, c);}}}} else {var vcount = geometry.vb ? geometry.vb.length / geometry.vbstride : positions.length / 3;for (var i = 0; i < vcount; i++) {a = 3 * i;b = 3 * i + 1;c = 3 * i + 2;var pa = a * stride + poffset;var pb = b * stride + poffset;var pc = c * stride + poffset;vA.x = positions[pa];vA.y = positions[pa + 1];vA.z = positions[pa + 2];vB.x = positions[pb];vB.y = positions[pb + 1];vB.z = positions[pb + 2];vC.x = positions[pc];vC.y = positions[pc + 1];vC.z = positions[pc + 2];if (normals) {var na = a * stride + noffset;var nb = b * stride + noffset;var nc = c * stride + noffset;nA.x = normals[na];nA.y = normals[na + 1];nA.z = normals[na + 2];nB.x = normals[nb];nB.y = normals[nb + 1];nB.z = normals[nb + 2];nC.x = normals[nc];nC.y = normals[nc + 1];nC.z = normals[nc + 2];callback(vA, vB, vC, a, b, c, nA, nB, nC);} else {callback(vA, vB, vC, a, b, c);}}}}var vP, vQ;function enumMeshLines(geometry, callback) {var attributes = geometry.attributes;var a, b;if (!vP) {vP = new _LmvVector.LmvVector3();vQ = new _LmvVector.LmvVector3();}var istep = 2;if (geometry.lineWidth) {istep = 6;}var indices = geometry.ib || geometry.indices || (attributes.index ? attributes.index.array : null);if (indices) {var positions = geometry.vb ? geometry.vb : attributes.position.array;var stride = geometry.vb ? geometry.vbstride : 3;var offsets = geometry.offsets;if (!offsets || offsets.length === 0) {offsets = [{ start: 0, count: indices.length, index: 0 }];}for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {var start = offsets[oi].start;var count = offsets[oi].count;var index = offsets[oi].index;for (var i = start, il = start + count; i < il; i += istep) {a = index + indices[i];b = index + indices[i + 1];vP.x = positions[a * stride];vP.y = positions[a * stride + 1];vP.z = positions[a * stride + 2];vQ.x = positions[b * stride];vQ.y = positions[b * stride + 1];vQ.z = positions[b * stride + 2];callback(vP, vQ, a, b);}}} else {var positions = geometry.vb ? geometry.vb : attributes.position.array;var stride = geometry.vb ? geometry.vbstride : 3;for (var i = 0, il = positions.length; i < il; i += istep) {a = i;b = i + 1;vP.x = positions[a * stride];vP.y = positions[a * stride + 1];vP.z = positions[a * stride + 2];vQ.x = positions[b * stride];vQ.y = positions[b * stride + 1];vQ.z = positions[b * stride + 2];callback(vP, vQ, a, b);}}}function enumMeshEdges(geometry, callback) {var attributes = geometry.attributes;var a, b;if (!vP) {vP = new _LmvVector.LmvVector3();vQ = new _LmvVector.LmvVector3();}var istep = 2;var indices = geometry.iblines;if (!indices) {return;}var positions = geometry.vb ? geometry.vb : attributes.position.array;
	    var stride = geometry.vb ? geometry.vbstride : 3;
	    var offsets = geometry.offsets;

	    if (!offsets || offsets.length === 0) {

	        offsets = [{ start: 0, count: indices.length, index: 0 }];

	    }

	    for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {

	        var start = offsets[oi].start;
	        var count = offsets[oi].count;
	        var index = offsets[oi].index;

	        for (var i = start, il = start + count; i < il; i += istep) {

	            a = index + indices[i];
	            b = index + indices[i + 1];

	            vP.x = positions[a * stride];vP.y = positions[a * stride + 1];vP.z = positions[a * stride + 2];
	            vQ.x = positions[b * stride];vQ.y = positions[b * stride + 1];vQ.z = positions[b * stride + 2];

	            callback(vP, vQ, a, b);
	        }

	    }
	}

	var VertexEnumerator = exports.VertexEnumerator = {
	    getVertexCount: getVertexCount,
	    enumMeshVertices: enumMeshVertices,
	    enumMeshTriangles: enumMeshTriangles,
	    enumMeshLines: enumMeshLines,
	    enumMeshEdges: enumMeshEdges };

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.OtgFragInfo = undefined;exports.















































































































































	register = register;var _Xhr = __webpack_require__(2);var _BVHBuilder = __webpack_require__(32);var _LmvBox = __webpack_require__(29);function loadAsyncResource(loadContext, resourcePath, responseType, callback) {_Xhr.ViewingService.getItem(loadContext, resourcePath, callback, loadContext.onFailureCallback, { asynchronous: true, responseType: responseType || "arraybuffer" });}function setFromArray(array, offset) {this.min.x = array[offset];this.min.y = array[offset + 1];this.min.z = array[offset + 2];this.max.x = array[offset + 3];this.max.y = array[offset + 4];this.max.z = array[offset + 5];}function copyToArray(array, offset) {array[offset] = this.min.x;array[offset + 1] = this.min.y;array[offset + 2] = this.min.z;array[offset + 3] = this.max.x;array[offset + 4] = this.max.y;array[offset + 5] = this.max.z;}function OtgFragInfo(data, placementWithOffset, placementTransform, globalOffset) {var byteStride = data[1] << 16 | data[0]; //var version = data[3] << 16 | data[2];
		if (!byteStride) byteStride = 7 * 4;this.boxStride = byteStride / 4;this.count = data.byteLength / byteStride - 1;if (this.count) {//make views directly into the first data record (skipping the header record)
			this.boxes = new Float32Array(data.buffer, byteStride);this.flags = new Int32Array(data.buffer, byteStride); //apply placement transform if given
			var boxes = this.boxes;if (placementTransform) {var tmpBox = new _LmvBox.LmvBox3();var offset = 0;for (var i = 0; i < this.count; i++, offset += this.boxStride) {setFromArray.call(tmpBox, boxes, offset);tmpBox.applyMatrix4(placementWithOffset); //this will apply both placement and global offset at once
					copyToArray.call(tmpBox, boxes, offset);}} else if (globalOffset && (globalOffset.x || globalOffset.y || globalOffset.z)) {//Faster code path when we only have global offset and no placement transform
				var offset = 0;for (var i = 0; i < this.count; i++, offset += this.boxStride) {boxes[offset] -= globalOffset.x;boxes[offset + 1] -= globalOffset.y;boxes[offset + 2] -= globalOffset.z;boxes[offset + 3] -= globalOffset.x;boxes[offset + 4] -= globalOffset.y;boxes[offset + 5] -= globalOffset.z;}}}this.hasPolygonCounts = true;this.wantSort = false;}OtgFragInfo.prototype.getCount = function () {return this.count;};OtgFragInfo.prototype.isTransparent = function (i) {var flags = this.flags[i * this.boxStride + 6];return !!(flags >> 24);};OtgFragInfo.prototype.getPolygonCount = function (i) {var flags = this.flags[i * this.boxStride + 6];return flags & 0xffffff;};function doLoadOtgBvh(loadContext) {//TODO: process bboxes progressively instead of doing it once the whole file is in.
		if (loadContext.fragments_extra) {loadAsyncResource(loadContext, loadContext.fragments_extra, "", function (data) {if (!data || !data.length) {return;} //Build the R-Tree
				//var t0 = performance.now();
				var finfo = new OtgFragInfo(data, loadContext.placementWithOffset, loadContext.placementTransform, loadContext.globalOffset);if (finfo.count) {var tmpbvh = new _BVHBuilder.BVHBuilder(null, null, finfo);tmpbvh.build(loadContext.bvhOptions);var bvh = { nodes: tmpbvh.nodes.getRawData(), primitives: tmpbvh.primitives }; //var t1 = performance.now();
					//console.log("BVH build time:" + (t1 - t0));
					loadContext.worker.postMessage({ bvh: bvh }, [bvh.nodes, bvh.primitives.buffer]);}});}}function doLoadOtgMats(loadContext) {}function register(workerMain) {workerMain.register("LOAD_OTG_BVH", { doOperation: doLoadOtgBvh });workerMain.register("LOAD_OTG_MATS", { doOperation: doLoadOtgMats });}exports.OtgFragInfo = OtgFragInfo;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.
































































































































































































































































































































































































	register = register;var _Xhr = __webpack_require__(2);var _DeriveTopology = __webpack_require__(54);var _OtgGeomCodec = __webpack_require__(58);var OtgGeomCodec = _interopRequireWildcard(_OtgGeomCodec);var _LmvMatrix = __webpack_require__(30);var _LocalDbCache = __webpack_require__(59);var _StringUtils = __webpack_require__(7);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}var pako = __webpack_require__(8); // OtgGeomWorker implements the "LOAD_GEOMETRY_OTG" operation.
	// It maintains a queue to restrict the number of parallel requests.
	var _maxRequests = 200; // max number of parallel requests per worker
	//Do not store state data directly in "self" because in the node.js code path
	//there are no separate worker contexts
	function getWorkerContext(loadContext) {// request queue. Each entry req is a load context from a doGeomLoadOTG call.
	    if (!loadContext.worker.ctx) {loadContext.worker.ctx = { requestQueue: [], numRequests: 0, inprogress: {}, _wsUsable: !loadContext.disableWebSocket && typeof WebSocket !== "undefined" && !!loadContext.otg_ws, _pendingCallbacks: [], _pendingMdata: [], _pendingTranserList: [] };}return loadContext.worker.ctx;}function notifyPendingCallbacks(ctx, ws) {ctx._pendingCallbacks.forEach(function (cb) {cb(ws);});ctx._pendingCallbacks = [];}function openWebSocket(loadContext, doneCB) {var ctx = getWorkerContext(loadContext);if (!ctx._wsUsable) {doneCB && doneCB(null);return;}doneCB && ctx._pendingCallbacks.push(doneCB);if (ctx._opening) {return;}var ws = getWebSocket(loadContext);if (ws) {notifyPendingCallbacks(ctx, ws);return;}ctx._opening = true; //http and 7124->7125 are here to support local debugging, when the endpoints are overridden to
	    //point directly to local node.js process(es).
	    ws = new WebSocket(loadContext.otg_ws.replace("https:", "wss:").replace("http:", "ws:").replace(":7124", ":7125"));ws.addEventListener('open', function open() {ctx._opening = false;ctx.ws = ws;ws.binaryType = "arraybuffer";notifyPendingCallbacks(ctx, ws);});ws.addEventListener('message', function incoming(data) {var buf = new Uint8Array(data.data);var hash = (0, _StringUtils.getHexString)(buf, 0, 20);var datagz = new Uint8Array(buf.buffer, 20);var cb = ctx.inprogress[hash];if (cb) {cb(datagz, false);}delete ctx.inprogress[hash];});ws.addEventListener('close', function close(code, error) {console.log("Socket close");ctx._opening = false;ctx.ws = null;});ws.addEventListener('error', function incoming(data) {console.log("ws error, reverting to plain http.", data);ctx._opening = false;ctx.ws = null;ctx._wsUsable = false;notifyPendingCallbacks(ctx, ws);});}function getWebSocket(loadContext) {var ctx = getWorkerContext(loadContext); //Cannot use web socket?
	    if (!ctx._wsUsable) {return null;} //Socket already established?
	    var ws = ctx.ws;if (ws && ws.readyState === 1) {return ws;} else if (ws && ws.readyState === 0) {console.warn("Reentry into getWebSocket. Should not happen."); //If we get called while the web socket is still opening,
	        //ignore the callback, we will continue processing once it's open.
	        return null;}return null;} // Use custom error handler: It  forwards to the default one, but...
	//  1. adds the geometry hash to the error message. This is needed by the geometry cache.
	//     We use it to determine for which geometry the problem occurred, so that the affected
	//     loaders can be informed (see OtgGeomCache.js).
	//  2. If any other requests were blocked before to limit the number of parallel
	//     requests, we must make sure that these enqueued  requests are processed too.
	function getErrorHandler(loadContext, hash) {// add error handler to override raiseError function
	    var errorHandler = { // add hash and pass on to loadContext.raiseError.
	        raiseError: function raiseError(code, msg, args) {args.hash = hash;loadContext.raiseError(code, msg, args);} };return function () {// forward to default error handler
	        _Xhr.ViewingService.defaultFailureCallback.apply(errorHandler, arguments); // process next requests (if any)
	        getWorkerContext(loadContext).numRequests--;processNext(loadContext);};}function decodeGeometryOtg(data, hash, sampleWorldMatrix, loadContext) {if (data[0] === 31 && data[1] === 139) {data = pako.ungzip(data);} // Read Otg package
	    var skipEdges = !sampleWorldMatrix;var mdata = OtgGeomCodec.readLmvBufferGeom(data, skipEdges);if (!mdata) {console.error("Failed to parse geometry", hash);return;}mdata.hash = hash;if (sampleWorldMatrix && !mdata.mesh.iblines) {(0, _DeriveTopology.createWireframe)(mdata.mesh, new _LmvMatrix.LmvMatrix4().fromArray(sampleWorldMatrix));}return mdata;} // Takes an array buffer and deserializes it to geometry. Result is passed to onSuccess callback
	function decodeGeometry(data, hash, sampleWorldMatrix, loadContext) {return decodeGeometryOtg(data, hash, sampleWorldMatrix, loadContext);}function onGeometryLoaded(loadContext, mdata) {if (!Array.isArray(mdata)) mdata = [mdata]; // send message with result
	    var transferList = [];for (var i = 0; i < mdata.length; i++) {var mesh = mdata[i].mesh;if (mesh) {var b = mesh.vb.buffer;transferList.push(b);if (mesh.indices && mesh.indices.buffer !== b) transferList.push(mesh.indices.buffer);if (mesh.iblines && mesh.iblines.buffer !== b) transferList.push(mesh.iblines.buffer);}} //loadContext.worker.postMessage(mdata, transferList);
	    var ctx = getWorkerContext(loadContext);ctx._pendingMdata.push.apply(ctx._pendingMdata, mdata);ctx._pendingTranserList.push.apply(ctx._pendingTranserList, transferList);}function onGeometryLoadedIndividual(loadContext, mdata) {onGeometryLoaded(loadContext, mdata); // process next requests (if any)
	    getWorkerContext(loadContext).numRequests--;processNext(loadContext);} // Request raw geometry data (arraybuffer) and call processGeometry with the result
	//  @param {Object}   loadContext - passed through to the receiving callback
	//  @param {function) onSuccess   - function(loadContext, result). result.mesh contains the mesh data.
	function loadGeometryIndividual(url, hash, sampleWorldMatrix, loadContext) {var ctx = getWorkerContext(loadContext);var onGeomBufferLoaded = function onGeomBufferLoaded(data, skipCache) {if (!skipCache) {ctx.localCache.store(hash, data);}var mdata = decodeGeometry(data, hash, sampleWorldMatrix, loadContext);if (mdata) {onGeometryLoadedIndividual(loadContext, mdata);} else {getErrorHandler(loadContext, hash)(-1, "", {});}};ctx.localCache.get(hash, function (error, data) {if (data) {onGeomBufferLoaded(data, true);} else {var ws = getWebSocket(loadContext);if (ws) {var wspath = url.slice(url.indexOf("/cdn/") + 5);ctx.inprogress[hash] = onGeomBufferLoaded;ws.send(wspath);} else {_Xhr.ViewingService.getItem(loadContext.isCDN ? {} : loadContext, url, onGeomBufferLoaded, getErrorHandler(loadContext, hash), { asynchronous: true, responseType: "arraybuffer", withCredentials: false //!loadContext.isCDN
	                });}}});} // Process requests from the queue
	function processNext(loadContext) {var ctx = getWorkerContext(loadContext);var rq = ctx.requestQueue;while (ctx.numRequests < _maxRequests && rq.length > 0) {//NOTE: We are relying on the number of geoms passed into a single message
	        //from the main thread not to exceed maxRequests by too much.
	        var req = rq.shift();var urls = req.urls;var hashes = req.hashes;var sampleWorldMatrices = req.sampleWorldMatrices;for (var i = 0; i < urls.length; i++) {ctx.numRequests++;loadGeometryIndividual(urls[i], hashes[i], sampleWorldMatrices[i], loadContext);}}} // @param {string}   loadContext.url               - request url
	// @param {string}   loadContext.geometryHash      - identifier for the geometry to be loaded
	// @param {function} loadContext.onFailureCallback - defined in workerMain()
	// @param {Worker}   loadContext.worker            - defined in MainWorker.worker
	function doGeomLoadOtg(loadContext) {var rq = getWorkerContext(loadContext).requestQueue;var request = { urls: loadContext.urls, hashes: loadContext.hashes, geomIds: loadContext.geomIds, sampleWorldMatrices: loadContext.sampleWorldMatrices }; // enqueue next request
	    rq.push(request); // process right now (if possible)
	    //Make sure to reopen the web socket in case it got closed by the server.
	    openWebSocket(loadContext, function (ws) {processNext(loadContext);});}function flushMessages(loadContext) {var ctx = getWorkerContext(loadContext);if (!ctx._pendingMdata.length) return;loadContext.worker.postMessage(ctx._pendingMdata, ctx._pendingTranserList);ctx._pendingMdata = [];ctx._pendingTranserList = [];}function doInitGeomWorker(loadContext) {//console.log("Init worker called");
	    var ctx = getWorkerContext(loadContext);if (!ctx.localCache) {//console.log("Init worker db");
	        ctx.localCache = new _LocalDbCache.LocalDbCache();ctx.localCache.open(function () {openWebSocket(loadContext);}, loadContext.disableIndexedDb);} else {openWebSocket(loadContext);}ctx.workerId = loadContext.workerId;ctx.flushMessages = setInterval(function () {flushMessages(loadContext);}, 66);}function doPostLoad(loadContext) {var ctx = getWorkerContext(loadContext);if (ctx.flushMessages) {flushMessages(loadContext);clearInterval(ctx.flushMessages);ctx.flushMessages = null;}ctx.localCache && ctx.localCache.updatePendingTimestamps();}function register(workerMain) {workerMain.register("LOAD_GEOMETRY_OTG", { doOperation: doGeomLoadOtg });workerMain.register("INIT_WORKER_OTG", { doOperation: doInitGeomWorker });workerMain.register("UPDATE_MRU_TIMESTAMPS_OTG", { doOperation: doPostLoad });}

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.



































































































































































































































































































































































































































































































































































	serializeLmvBufferGeom = serializeLmvBufferGeom;exports.



























































































	readLmvBufferGeom = readLmvBufferGeom;var _compat = __webpack_require__(4);var _InputStream = __webpack_require__(33);var _LmvBox = __webpack_require__(29); /*
	                                                                                                                                                                                        Integers encoded in *little endian*
	                                                                                                                                                                                        
	                                                                                                                                                                                        Magic header: LMV0 (4 bytes)
	                                                                                                                                                                                        Flags: 2 bytes (isLine, isPoint, isWideLine, etc.)
	                                                                                                                                                                                        Num buffers: 1 byte
	                                                                                                                                                                                        Num attributes: 1 byte (attributes are fixed size)
	                                                                                                                                                                                        Buf Offsets (from beginning of data block, first buffer is always at 0, so is skipped): 4 bytes each
	                                                                                                                                                                                        Attributes: {
	                                                                                                                                                                                        	Name: 1 byte enum (Index, IndexEdges, Position, Normal, TextureUV, Color)
	                                                                                                                                                                                        	itemSize: 1/2 byte low nibble (must be 1,2,3 or 4)
	                                                                                                                                                                                        	itemType: 1/2 byte hi nibble (BYTE, SHORT, UBYTE, USHORT, FLOAT ...)
	                                                                                                                                                                                        	itemOffset: 1 byte (in bytes)
	                                                                                                                                                                                        	itemStride: 1 byte (stride in bytes)
	                                                                                                                                                                                        	buffer Idx: 1 bytes
	                                                                                                                                                                                        } (5 bytes each)
	                                                                                                                                                                                        
	                                                                                                                                                                                        (padding bytes to make data stream offset a multiple of 4)
	                                                                                                                                                                                        
	                                                                                                                                                                                        Data: binary, concatenated vertex and index streams
	                                                                                                                                                                                        */var AttributeName = { Index: 0, IndexEdges: 1, Position: 2, Normal: 3, TextureUV: 4, Color: 5 };var AttributeType = { BYTE: 0, SHORT: 1, UBYTE: 2, USHORT: 3, BYTE_NORM: 4, SHORT_NORM: 5, UBYTE_NORM: 6, USHORT_NORM: 7, FLOAT: 8, INT: 9, UINT: 10 //DOUBLE: 11
	};var MeshFlags = { //NOTE: Lower two bits are NOT A BITMASK!!!
		TRIANGLES: 0, LINES: 1, POINTS: 2, WIDE_LINES: 3 };var LMV2OTGAttr = { "position": AttributeName.Position, "normal": AttributeName.Normal, "index": AttributeName.Index, "indexlines": AttributeName.IndexEdges, "color": AttributeName.Color };var OTG2LMVAttr = {};OTG2LMVAttr[AttributeName.Position] = "position";OTG2LMVAttr[AttributeName.Normal] = "normal";OTG2LMVAttr[AttributeName.Index] = "index";OTG2LMVAttr[AttributeName.IndexEdges] = "indexlines";OTG2LMVAttr[AttributeName.Color] = "color";OTG2LMVAttr[AttributeName.TextureUV] = "uv";var AttributeTypeToSize = {};AttributeTypeToSize[AttributeType.BYTE] = 1;AttributeTypeToSize[AttributeType.SHORT] = 2;AttributeTypeToSize[AttributeType.UBYTE] = 1;AttributeTypeToSize[AttributeType.USHORT] = 2;AttributeTypeToSize[AttributeType.BYTE_NORM] = 1;AttributeTypeToSize[AttributeType.SHORT_NORM] = 2;AttributeTypeToSize[AttributeType.UBYTE_NORM] = 1;AttributeTypeToSize[AttributeType.USHORT_NORM] = 2;AttributeTypeToSize[AttributeType.FLOAT] = 4;AttributeTypeToSize[AttributeType.INT] = 4;AttributeTypeToSize[AttributeType.UINT] = 4; //DOUBLE: 11
	function rotate(tri) {var tmp = tri[0];tri[0] = tri[1];tri[1] = tri[2];tri[2] = tmp;}function deltaEncodeIndexBuffer3(ib) {var triangles = [];for (var i = 0; i < ib.length; i += 3) {triangles.push([ib[i], ib[i + 1], ib[i + 2]]);} //Sort the indices for each triangle so that
		//the first one is smallest
		for (var i = 0; i < triangles.length; i++) {var t = triangles[i];while (t[0] > t[1] || t[0] > t[2]) {rotate(t);}} //Sort triangles by ascending first index
		triangles.sort(function (a, b) {return a[0] - b[0];}); //Delta encode the indices
		var t = triangles[0];var j = 0;ib[j] = t[0];ib[j + 1] = t[1] - t[0];ib[j + 2] = t[2] - t[0];j += 3;for (var i = 1; i < triangles.length; i++, j += 3) {t = triangles[i];ib[j] = t[0] - triangles[i - 1][0];ib[j + 1] = t[1] - t[0];ib[j + 2] = t[2] - t[0];}}function deltaEncodeIndexBuffer2(ib) {var lines = [];for (var i = 0; i < ib.length; i += 2) {lines.push([ib[i], ib[i + 1]]);} //Sort the indices for each triangle so that
		//the first one is smallest
		for (var i = 0; i < lines.length; i++) {var t = lines[i];if (t[0] > t[1]) {var tmp = t[0];t[0] = t[1];t[1] = tmp;}} //Sort lines by ascending first index
		lines.sort(function (a, b) {return a[0] - b[0];}); //Delta encode the indices
		var t = lines[0];var j = 0;ib[j] = t[0];ib[j + 1] = t[1] - t[0];j += 2;for (var i = 1; i < lines.length; i++, j += 2) {t = lines[i];ib[j] = t[0] - lines[i - 1][0];ib[j + 1] = t[1] - t[0];}}function deltaDecodeIndexBuffer3(ib) {if (!ib.length) return;ib[1] += ib[0];ib[2] += ib[0];for (var i = 3; i < ib.length; i += 3) {ib[i] += ib[i - 3];ib[i + 1] += ib[i];ib[i + 2] += ib[i];}}function deltaDecodeIndexBuffer2(ib) {if (!ib.length) return;ib[1] += ib[0];for (var i = 2; i < ib.length; i += 2) {ib[i] += ib[i - 2];ib[i + 1] += ib[i];}}function attrNameMapper(attributeName) {var name = LMV2OTGAttr[attributeName];if (typeof name !== "undefined") return name;if (attributeName.indexOf("uv") === 0) {return AttributeName.TextureUV;}console.warn("Unknown attribute name");return AttributeName.TextureUV;}function attrNameToLMV(attrName) {var lmvAttr = OTG2LMVAttr[attrName];if (lmvAttr) return lmvAttr;console.error("Unknown vertex attribute");return AttributeName.TextureUV;}function attrTypeMapper(attr) {var type = AttributeType.FLOAT;var itemWidth = attr.bytesPerItem || 4;if (itemWidth === 1) {type = attr.normalize ? AttributeType.UBYTE_NORM : AttributeType.UBYTE;} else if (itemWidth === 2) {type = attr.normalize ? AttributeType.USHORT_NORM : AttributeType.USHORT;}return type << 4 | attr.itemSize & 0xf;}function indexTypeMapper(attr) {var type = AttributeType.USHORT;var itemWidth = attr.bytesPerItem || 2;if (itemWidth === 1) {type = AttributeType.UBYTE;} else if (itemWidth === 2) {type = AttributeType.USHORT;} else if (itemWidth === 4) {type = AttributeType.UINT;}return type << 4 | attr.itemSize & 0xf;}function OtgGeomEncoder() {}OtgGeomEncoder.prototype.beginHeader = function (meshFlag, numAttributes, dataStreamLengths) {var headerSize = 8;var numBuffers = dataStreamLengths.length;headerSize += (numBuffers - 1) * 4;headerSize += numAttributes * 5;while (headerSize % 4 !== 0) {headerSize++;}var totalDataSize = 0;for (var i = 0; i < dataStreamLengths.length; i++) {totalDataSize += dataStreamLengths[i];}this.buffer = new Buffer(headerSize + totalDataSize);this.writeOffset = 0; //Write the 4 byte magic prefix
		var MAGIC = "OTG0";for (var i = 0; i < 4; i++) {this.writeOffset = this.buffer.writeUInt8(MAGIC.charCodeAt(i), this.writeOffset);} //TODO: line width if wide lines and pointSize if points
		this.writeOffset = this.buffer.writeUInt16LE(meshFlag, this.writeOffset);this.writeOffset = this.buffer.writeUInt8(numBuffers, this.writeOffset);this.writeOffset = this.buffer.writeUInt8(numAttributes, this.writeOffset); //write buffer offsets from the beginning of the binary data block
		//Skip the first buffer as its at offset zero
		var offset = dataStreamLengths[0];for (var i = 1; i < dataStreamLengths.length; i++) {this.writeOffset = this.buffer.writeUInt32LE(offset, this.writeOffset);offset += dataStreamLengths[i];}};OtgGeomEncoder.prototype.addAttribute = function (attrName, attr, stride, bufferIndex) {this.writeOffset = this.buffer.writeUInt8(attrName, this.writeOffset);if (attrName === AttributeName.Index || attrName === AttributeName.IndexEdges) {this.writeOffset = this.buffer.writeUInt8(indexTypeMapper(attr), this.writeOffset);this.writeOffset = this.buffer.writeUInt8((attr.itemOffset || 0) * 4, this.writeOffset); //itemOffset
			this.writeOffset = this.buffer.writeUInt8((stride || 0) * 4, this.writeOffset); //itemStride
			this.writeOffset = this.buffer.writeUInt8(bufferIndex, this.writeOffset); //buffer index
		} else {this.writeOffset = this.buffer.writeUInt8(attrTypeMapper(attr), this.writeOffset);this.writeOffset = this.buffer.writeUInt8((attr.itemOffset || 0) * 4, this.writeOffset); //itemOffset (LMV stores in multiples of 4)
			this.writeOffset = this.buffer.writeUInt8((stride || 0) * 4, this.writeOffset); //itemStride (LMV stores in multiples of 4)
			this.writeOffset = this.buffer.writeUInt8(bufferIndex, this.writeOffset); //buffer index
		}};OtgGeomEncoder.prototype.endHeader = function () {//Padding so that buffers are written at multiple of 4
		while (this.writeOffset % 4 !== 0) {this.writeOffset = this.buffer.writeUInt8(0, this.writeOffset);}};OtgGeomEncoder.prototype.addBuffer = function (buffer) {buffer.copy(this.buffer, this.writeOffset);this.writeOffset += buffer.length;};OtgGeomEncoder.prototype.end = function () {if (this.writeOffset !== this.buffer.length) {console.error("Incorrect encoding buffer size");}return this.buffer;};function OtgGeomDecoder(buf) {this.buffer = buf;this.readOffset = 0;this.meshFlag = 0;this.numBuffers = 0;this.numAttributes = 0;this.bufferOffsets = [];this.attributes = [];this.buffers = [];}OtgGeomDecoder.prototype.readNodeJS = function () {var magic = this.buffer.toString("ascii", 0, 4);if (magic !== "OTG0") {console.error("Invalid OTG header");return false;}this.readOffset = 4;this.meshFlag = this.buffer.readUInt16LE(this.readOffset);this.readOffset += 2;this.numBuffers = this.buffer.readUInt8(this.readOffset);this.readOffset++;this.numAttributes = this.buffer.readUInt8(this.readOffset);this.readOffset++;if (this.numBuffers) {this.bufferOffsets.push(0);for (var i = 1; i < this.numBuffers; i++) {var boff = this.buffer.readUInt32LE(this.readOffset);this.readOffset += 4;this.bufferOffsets.push(boff);}}for (var i = 0; i < this.numAttributes; i++) {var attr = {};attr.name = this.buffer.readUInt8(this.readOffset);this.readOffset++;var type = this.buffer.readUInt8(this.readOffset);this.readOffset++;attr.itemSize = type & 0xf;attr.type = type >> 4;attr.bytesPerItem = AttributeTypeToSize[attr.type];attr.normalize = attr.type === AttributeType.BYTE_NORM || attr.type === AttributeType.SHORT_NORM || attr.type === AttributeType.UBYTE_NORM || attr.type === AttributeType.USHORT_NORM;attr.itemOffset = this.buffer.readUInt8(this.readOffset) / 4;this.readOffset++;attr.itemStride = this.buffer.readUInt8(this.readOffset) / 4;this.readOffset++;attr.bufferIndex = this.buffer.readUInt8(this.readOffset);this.readOffset++;this.attributes.push(attr);} //seek to the beginning of the buffer data
		while (this.readOffset % 4 !== 0) {this.readOffset++;}for (var i = 0; i < this.bufferOffsets.length; i++) {var startOffset = this.readOffset + this.bufferOffsets[i];var endOffset;if (i < this.bufferOffsets.length - 1) {endOffset = this.readOffset + this.bufferOffsets[i + 1];} else {endOffset = this.buffer.length;}this.buffers.push(this.buffer.slice(startOffset, endOffset));}return true;};OtgGeomDecoder.prototype.readWeb = function () {var stream = new _InputStream.InputStream(this.buffer);var magic = stream.getString(4);if (magic !== "OTG0") {console.error("Invalid OTG header");return false;}this.meshFlag = stream.getUint16();this.numBuffers = stream.getUint8();this.numAttributes = stream.getUint8();if (this.numBuffers) {this.bufferOffsets.push(0);for (var i = 1; i < this.numBuffers; i++) {var boff = stream.getUint32();this.bufferOffsets.push(boff);}}for (var i = 0; i < this.numAttributes; i++) {var attr = {};attr.name = stream.getUint8();var type = stream.getUint8();attr.itemSize = type & 0xf;attr.type = type >> 4;attr.bytesPerItem = AttributeTypeToSize[attr.type];attr.normalize = attr.type === AttributeType.BYTE_NORM || attr.type === AttributeType.SHORT_NORM || attr.type === AttributeType.UBYTE_NORM || attr.type === AttributeType.USHORT_NORM;attr.itemOffset = stream.getUint8() / 4;attr.itemStride = stream.getUint8() / 4;attr.bufferIndex = stream.getUint8();this.attributes.push(attr);} //seek to the beginning of the buffer data
		while (stream.offset % 4 !== 0) {stream.offset++;}for (var i = 0; i < this.bufferOffsets.length; i++) {var startOffset = stream.offset + this.bufferOffsets[i];var endOffset;if (i < this.bufferOffsets.length - 1) {endOffset = stream.offset + this.bufferOffsets[i + 1];} else {endOffset = stream.byteLength;}this.buffers.push(this.buffer.subarray(startOffset, endOffset));}return true;};OtgGeomDecoder.prototype.read = function () {if ((0, _compat.isNodeJS)()) {return this.readNodeJS();} else {return this.readWeb();}};function serializeLmvBufferGeom(geom) {var otgEncoder = new OtgGeomEncoder(); //Check for interleaved buffer. For now
		//this is the only one we support
		var bufSizes = [];if (!geom.vb) {console.error("Unexpected non-interleaved vertex buffer");return null;} else {bufSizes = [geom.vb.byteLength, geom.ib.byteLength];if (geom.iblines) {bufSizes.push(geom.iblines.byteLength);}}var attrKeys = Object.keys(geom.attributes);var meshFlag = 0;if (geom.isLines) meshFlag = meshFlag | MeshFlags.LINES;if (geom.isWideLines) meshFlag = meshFlag | MeshFlags.WIDE_LINES;if (geom.isPoints) meshFlag = meshFlag | MeshFlags.POINTS;otgEncoder.beginHeader(meshFlag, attrKeys.length, bufSizes); //Write the attributes
		for (var i = 0; i < attrKeys.length; i++) {var attr = geom.attributes[attrKeys[i]];var attrName = attrNameMapper(attrKeys[i]);if (attrKeys[i] === "index") {otgEncoder.addAttribute(attrName, attr, 0, 1);} else if (attrKeys[i] === "indexlines") {otgEncoder.addAttribute(attrName, attr, 0, 2);} else {otgEncoder.addAttribute(attrName, attr, geom.vbstride, 0);}}otgEncoder.endHeader(); //Write the buffers
		//Buffer 0
		var tmp = Buffer.from(geom.vb.buffer, geom.vb.byteOffset, geom.vb.byteLength);otgEncoder.addBuffer(tmp); //Buffer 1
		if (geom.isLines) deltaEncodeIndexBuffer2(geom.ib);else deltaEncodeIndexBuffer3(geom.ib);tmp = Buffer.from(geom.ib.buffer, geom.ib.byteOffset, geom.ib.byteLength);otgEncoder.addBuffer(tmp); //Buffer 2
		if (geom.iblines) {deltaEncodeIndexBuffer2(geom.iblines);tmp = Buffer.from(geom.iblines.buffer, geom.iblines.byteOffset, geom.iblines.byteLength);otgEncoder.addBuffer(tmp);}var buf = otgEncoder.end();return buf;}var unitBox = new _LmvBox.LmvBox3();unitBox.min.x = -0.5;unitBox.min.y = -0.5;unitBox.min.z = -0.5;unitBox.max.x = 0.5;unitBox.max.y = 0.5;unitBox.max.z = 0.5; //var unitSphere = new THREE.Sphere();
	//unitSphere.radius = Math.sqrt(0.5 * 0.5 * 3);
	var unitSphere = { center: { x: 0, y: 0, z: 0 }, radius: Math.sqrt(0.5 * 0.5 * 3) };function readLmvBufferGeom(buffer, skipEdges) {var dec = new OtgGeomDecoder(buffer);if (!dec.read()) {console.error("Failed to parse OTG geometry");return null;} //Assumes the interleaved buffer serialization we use by default
		//Maps the decoded data to the mdata/vblayout structures produced by
		//the LMV loader worker threads. It's slightly different from the LmvBufferGeometry fields
		var mesh = { vblayout: {}, vb: new Float32Array(dec.buffers[0].buffer, dec.buffers[0].byteOffset, dec.buffers[0].byteLength / 4), isLines: (dec.meshFlag & 0x3) === MeshFlags.LINES, isWideLines: (dec.meshFlag & 0x3) === MeshFlags.WIDE_LINES, isPoints: (dec.meshFlag & 0x3) === MeshFlags.POINTS, boundingBox: unitBox, boundingSphere: unitSphere }; //TODO: line width
		for (var i = 0; i < dec.attributes.length; i++) {var attr = dec.attributes[i];if (attr.name === AttributeName.Index) {var ib = dec.buffers[1];if (attr.bytesPerItem === 1) {mesh.indices = ib;} else if (attr.bytesPerItem === 2) {mesh.indices = new Uint16Array(ib.buffer, ib.byteOffset, ib.byteLength / attr.bytesPerItem);} else if (attr.bytesPerItem === 4) {mesh.indices = new Uint32Array(ib.buffer, ib.byteOffset, ib.byteLength / attr.bytesPerItem);}if (mesh.isLines) deltaDecodeIndexBuffer2(mesh.indices);else deltaDecodeIndexBuffer3(mesh.indices);} else if (attr.name === AttributeName.IndexEdges) {if (!skipEdges) {var iblines = dec.buffers[2];if (attr.bytesPerItem === 1) {mesh.iblines = iblines;} else if (attr.bytesPerItem === 2) {mesh.iblines = new Uint16Array(iblines.buffer, iblines.byteOffset, iblines.byteLength / attr.bytesPerItem);} else if (attr.bytesPerItem === 4) {mesh.iblines = new Uint32Array(iblines.buffer, iblines.byteOffset, iblines.byteLength / attr.bytesPerItem);}deltaDecodeIndexBuffer2(mesh.iblines);}} else {var lmvAttr = attrNameToLMV(attr.name);if (!mesh.vbstride)
				mesh.vbstride = attr.itemStride;else
				{
					//We expect all vertex attributes to be packed into one VB 
					if (mesh.vbstride !== attr.itemStride)
					console.error("Unexpected vertex buffer stride mismatch.");
				}

				mesh.vblayout[lmvAttr] = {
					bytesPerItem: attr.bytesPerItem,
					offset: attr.itemOffset,
					normalize: attr.normalize,
					itemSize: attr.itemSize };

			}

		}

		var mdata = {
			mesh: mesh,
			packId: 0,
			meshIndex: 0 };


		return mdata;

	}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.LocalDbCache = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();
	var _StringUtils = __webpack_require__(7);
	var _compat = __webpack_require__(4);function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	var pako = __webpack_require__(8);

	//All object stores go into this database
	var DB_NAME = "otg";

	var CONTENT_STORE = "otg-content";
	var CONTENT_STORE_LRU = "otg-lru";var


	LocalDbCache = exports.LocalDbCache = function () {

	    function LocalDbCache() {_classCallCheck(this, LocalDbCache);
	        this.db = null;
	        this.readTransaction = null;
	        this.loaded = false;

	        this.storeName = CONTENT_STORE;
	        this.storeNameTimestamp = CONTENT_STORE_LRU;
	        this.bothStoreNames = [this.storeName, this.storeNameTimestamp];

	        this.useCompression = true;
	        this.pendingTimestampUpdates = {};
	        this.pendingTimestampCount = 0;

	        this.pendingStores = [];
	    }_createClass(LocalDbCache, [{ key: "open", value: function open(


	        cb, forceDisabled) {var _this = this;

	            //Disable on Safari until we figure out why performance is terrible.
	            //Disbale on Node.js because we don't need to cache locally on the server side
	            //Disable on Mobile until we decide if we want the performance hit there.
	            if (forceDisabled || (0, _compat.isSafari)() || (0, _compat.isMobileDevice)() || (0, _compat.isNodeJS)() || typeof indexedDB === "undefined") {
	                console.log("IndexedDb disabled");
	                cb && cb();
	                return;
	            }

	            //Open the IndexedDb database connection
	            var request = indexedDB.open(DB_NAME, 1);

	            request.onerror = function (event) {
	                console.error("Failed to open or create cache database.");

	                cb && cb(event);
	            };
	            request.onsuccess = function (event) {
	                _this.db = event.target.result;

	                _this.db.onerror = function (event) {
	                    console.error("Database error", event);
	                };

	                _this.loaded = true;
	                cb && cb(null, _this.db);

	                /*
	                                          this.size((err, data) => {
	                                              console.log(data);
	                                          });
	                                          */
	            };

	            request.onupgradeneeded = function (event) {

	                console.log("Db upgrade", _this.storeName);

	                // Save the IDBDatabase interface
	                var db = event.target.result;

	                // Create the database schema
	                db.createObjectStore(CONTENT_STORE);
	                var os = db.createObjectStore(CONTENT_STORE_LRU);
	                os.createIndex(CONTENT_STORE_LRU + "-index", "t", { unique: false });
	            };
	        } }, { key: "deleteOld", value: function deleteOld(


	        callback) {var _this2 = this;

	            if (!this.db) {
	                callback();
	                return;
	            }

	            if (this.deleteInProgress)
	            return;

	            this.deleteInProgress = true;

	            var howMany = 200;

	            //Avoid deleting stuff that was last used a short while ago, by using a range query
	            var upperBoundOpenKeyRange = IDBKeyRange.upperBound(Date.now() - 300 * 1000, true);

	            var hashes = [];

	            var objectStore = this.db.transaction([this.storeNameTimestamp] /*, "readwrite"*/).objectStore(this.storeNameTimestamp);

	            var index = objectStore.index(this.storeNameTimestamp + "-index");

	            index.openCursor(upperBoundOpenKeyRange).onsuccess = function (event) {
	                var cursor = event.target.result;
	                if (cursor && hashes.length < howMany) {
	                    hashes.push(cursor.primaryKey);
	                    cursor.continue();
	                    return;
	                }

	                if (hashes.length) {

	                    console.log("Deleting old objects.", hashes.length);

	                    var transaction = _this2.db.transaction(_this2.bothStoreNames, "readwrite");

	                    transaction.oncomplete = function (event) {
	                        _this2.deleteInProgress = false;
	                        console.log("Delete done");
	                        callback && callback();
	                    };

	                    transaction.onerror = function (event) {
	                        _this2.deleteInProgress = false;
	                        console.error("Transaction error.", event);
	                    };

	                    transaction.onabort = function (event) {
	                        _this2.deleteInProgress = false;
	                        var error = event.target.error; // DOMError
	                        console.log("Failed to delete cached objects", error);
	                    };

	                    var objectStoreMain = transaction.objectStore(_this2.storeName);
	                    var objectStoreTimestamp = transaction.objectStore(_this2.storeNameTimestamp);

	                    for (var i = 0; i < hashes.length; i++) {
	                        objectStoreMain.delete(hashes[i]);
	                        objectStoreTimestamp.delete(hashes[i]);
	                    }

	                }
	            };



	        } }, { key: "flush", value: function flush(


	        cb) {var _this3 = this;

	            if (!this.pendingStores.length) {
	                cb && cb();
	                return;
	            }

	            if (!this.writeTransaction) {

	                var transaction = this.db.transaction(this.bothStoreNames, "readwrite");

	                if (cb) {
	                    transaction.oncomplete = function (event) {
	                        //console.log("Transaction complete");
	                        cb();
	                    };
	                }

	                transaction.onerror = function (event) {
	                    console.error("Transaction error.", event);
	                    cb && cb(event.target.error);
	                };

	                transaction.onabort = function (event) {
	                    var error = event.target.error; // DOMError
	                    if (error.name === 'QuotaExceededError') {
	                        //console.log("Quota exceeded");
	                        _this3.deleteOld(function () {});

	                    }
	                    cb && cb(event.target.error);
	                };

	                this.writeTransaction = transaction;
	            }

	            for (var i = 0; i < this.pendingStores.length; i += 2) {

	                var hash = this.pendingStores[i];
	                var data = this.pendingStores[i + 1];

	                if (data instanceof Uint8Array && this.useCompression) {
	                    if (data[0] === 31 && data[1] === 139) {
	                        //already compressed
	                    } else {
	                        //let before = data.length;
	                        try {
	                            data = pako.gzip(data);
	                        } catch (e) {
	                            console.error("Compression failed.");
	                        }
	                        //let after = data.length;
	                        //console.log(before/after, "x");
	                    }
	                }

	                var objectStore = this.writeTransaction.objectStore(this.storeName);

	                var storeBlob = objectStore.put(data, hash);

	                storeBlob.onerror = function (event) {
	                    console.error("Object store error.", event);
	                };

	                var timestampStore = this.writeTransaction.objectStore(this.storeNameTimestamp);
	                timestampStore.put({ t: Date.now() }, hash);

	            }

	            this.pendingStores = [];

	            //TODO: reuse this transaction for longer
	            this.writeTransaction = null;
	        } }, { key: "store", value: function store(


	        hash, data, cb) {

	            if (!this.db) {
	                cb && cb();
	                return;
	            }

	            this.pendingStores.push(hash);
	            this.pendingStores.push(data);

	            if (this.pendingStores.length < 200) {
	                cb && cb();
	                return;
	            }

	            this.flush(cb);
	        } }, { key: "flushTimestamps", value: function flushTimestamps(


	        cb) {var _this4 = this;

	            var transaction = this.db.transaction([this.storeNameTimestamp], "readwrite");

	            if (cb) {
	                transaction.oncomplete = function (event) {
	                    //console.log("Transaction complete");
	                    cb();
	                };
	            }

	            transaction.onerror = function (event) {
	                console.error("Transaction error.", event);
	                cb && cb(event.target.error);
	            };

	            transaction.onabort = function (event) {
	                var error = event.target.error; // DOMError
	                if (error.name === 'QuotaExceededError') {
	                    console.log("Quota exceeded");
	                    _this4.deleteOld(function () {});
	                }
	                cb && cb(event.target.error);
	            };


	            var timestampStore = transaction.objectStore(this.storeNameTimestamp);

	            for (var hash in this.pendingTimestampUpdates) {
	                timestampStore.put({ t: this.pendingTimestampUpdates[hash] }, hash);
	            }

	            this.pendingTimestampUpdates = {};
	            this.pendingTimestampCount = 0;
	        } }, { key: "_createReadTransaction", value: function _createReadTransaction()

	        {var _this5 = this;
	            //We try to keep the read transaction alive by reusing it
	            //for all new requests. If they come fast enough, the transaction
	            //will stay alive. If it completes, we will create a new one.
	            var transaction = this.readTransaction = this.db.transaction(this.storeName);

	            transaction.oncomplete = function (event) {
	                _this5.readTransaction = null;
	            };
	            transaction.onerror = function (event) {
	                console.error("Transaction error.", comment, event);
	                _this5.readTransaction = null;
	            };
	            transaction.onabort = function (event) {
	                console.warn("Transaction abort", comment, event);
	                _this5.readTransaction = null;
	            };
	        } }, { key: "get", value: function get(

	        hash, cb) {var _this6 = this;

	            if (!this.db) {
	                cb(-1, null);
	                return;
	            }


	            //We try to reuse the same read transaction for as long as it will let us
	            if (!this.readTransaction) {
	                this._createReadTransaction();
	            }

	            var req = void 0;
	            //This can fail if the transaction has gone inactive
	            try {
	                req = this.readTransaction.objectStore(this.storeName).get(hash);
	            } catch (e) {
	                this._createReadTransaction();
	                req = this.readTransaction.objectStore(this.storeName).get(hash);
	            }

	            req.onsuccess = function (event) {

	                //Somehow we sometimes end up getting null for an existing key
	                //so we force reload
	                if (!event.target.result) {
	                    cb(-1, null);
	                    return;
	                }


	                var data = event.target.result;

	                if (data[0] === 31 && data[1] === 139) {
	                    try {
	                        data = pako.ungzip(data);
	                    } catch (e) {
	                        console.error("Failed to decompress.", e);
	                        cb(e, null);
	                        return;
	                    }
	                }

	                cb(null, data);

	                //Remember the new timestamp for this hash, but don't update
	                //it in the mru table immediately, to avoid slowing down model load
	                //with a write transaction.
	                _this6.pendingTimestampUpdates[hash] = Date.now();
	                _this6.pendingTimestampCount++;
	            };

	            req.onerror = function (event) {
	                cb(event.target.errorCode);
	            };

	        } }, { key: "updatePendingTimestamps", value: function updatePendingTimestamps()


	        {var _this7 = this;

	            if (!this.db)
	            return;

	            this.flush(function (err) {
	                //console.log("Updating all timestamps");

	                if (err) {
	                    return;
	                }

	                _this7.flushTimestamps();

	            });

	        } }, { key: "size", value: function size(

	        callback) {
	            if (!this.db) {
	                callback();
	                return;
	            }

	            var size = 0;
	            var items = 0;

	            var transaction = this.db.transaction([this.storeName]).
	            objectStore(this.storeName).
	            openCursor();

	            transaction.onsuccess = function (event) {
	                var cursor = event.target.result;
	                if (cursor) {
	                    var storedObject = cursor.value;
	                    size += storedObject.length;
	                    items++;
	                    cursor.continue();
	                } else
	                {
	                    callback(null, { size: size, items: items });
	                }
	            };

	            transaction.onerror = function (err) {
	                callback(err);
	            };
	        } }]);return LocalDbCache;}();

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.





















































































































































































































































































































































































































































































	register = register;var _Xhr = __webpack_require__(2);var _Propdb = __webpack_require__(61);var _InstanceTreeStorage = __webpack_require__(63);"use strict";function PdbCacheEntry(dbPath, isShared) {this.pdb = null;this.waitingCallbacks = [];this.error = false;this.dbPath = dbPath;this.dbFiles = null;this.isShared = isShared;}function FileCacheEntry(data) {this.data = data;this.refCount = 1;}function loadPropertyPacks(loadContext, dbId, onPropertyPackLoadComplete) {if (!loadContext.worker.pdbCache) {loadContext.worker.pdbCache = {};loadContext.worker.fileCache = {};} //get the cache entry for the given property database URL
	    var cacheEntry = loadContext.worker.pdbCache[loadContext.dbPath];var repeatedCall = false;if (!cacheEntry) {loadContext.worker.pdbCache[loadContext.dbPath] = cacheEntry = new PdbCacheEntry(loadContext.dbPath, loadContext.sharedDbPath);} else {repeatedCall = true;}if (cacheEntry.pdb) {onPropertyPackLoadComplete(cacheEntry.pdb, cacheEntry.dbidOldToNew);return;} else if (!cacheEntry.error) {//If we are already loading the same property database, queue the callback
	        if (repeatedCall) {cacheEntry.waitingCallbacks.push(onPropertyPackLoadComplete);return;}} else {onPropertyPackLoadComplete(null);return;}var dbfiles = loadContext.propertydb;if (!dbfiles) {loadContext.worker.propdbFailed = true;onPropertyPackLoadComplete(null);return;}var loadedDbFiles = {};var filesToRequest = [];if (dbfiles.avs.length) {for (var tag in dbfiles) {loadedDbFiles[tag] = {};filesToRequest.push({ filename: dbfiles[tag][0], storage: loadedDbFiles[tag] });}} else {//Hardcoded list of pdb files -- deprecated, still used when loading F2D files locally, without
	        //having loaded a manifest first. And probably in some other cases.
	        loadedDbFiles = { ids: {}, attrs: {}, offsets: {}, values: {}, avs: {} };filesToRequest.push({ filename: dbfiles.attrs.length ? dbfiles.attrs[0] : "objects_attrs.json.gz", storage: loadedDbFiles.attrs });filesToRequest.push({ filename: dbfiles.values.length ? dbfiles.values[0] : "objects_vals.json.gz", storage: loadedDbFiles.values });filesToRequest.push({ filename: dbfiles.avs.length ? dbfiles.avs[0] : "objects_avs.json.gz", storage: loadedDbFiles.avs });filesToRequest.push({ filename: dbfiles.offsets.length ? dbfiles.offsets[0] : "objects_offs.json.gz", storage: loadedDbFiles.offsets });filesToRequest.push({ filename: dbfiles.ids.length ? dbfiles.ids[0] : "objects_ids.json.gz", storage: loadedDbFiles.ids });}var filesRemaining = filesToRequest.length;var filesFailed = 0;function onRequestCompletion(data) {filesRemaining--;if (!data) filesFailed++; // If all of the files we've requested have been retrieved, create the
	        // property database.  Otherwise, request the next required file.
	        //
	        if (!filesRemaining) {if (filesFailed) {cacheEntry.error = true;onPropertyPackLoadComplete(null);while (cacheEntry.waitingCallbacks.length) {cacheEntry.waitingCallbacks.shift()(null);}} else {//De-reference the result buffer from this array so that
	                //it can be freed on the fly when the PropertyDatabases parses itself
	                filesToRequest.forEach(function (f) {f.storage = null;}); //Store the property db instance in its cache entry
	                try {cacheEntry.pdb = new _Propdb.PropertyDatabase(loadedDbFiles);cacheEntry.pdb.refCount = 0; //will be incremented by the success callback
	                    cacheEntry.loaded = true;cacheEntry.dbFiles = filesToRequest;for (var p in loadedDbFiles.dbid) {var b = loadedDbFiles.dbid[p];cacheEntry.dbidOldToNew = new Int32Array(b.buffer, b.byteOffset, b.byteLength / 4);break;}onPropertyPackLoadComplete(cacheEntry.pdb, cacheEntry.dbidOldToNew);while (cacheEntry.waitingCallbacks.length) {cacheEntry.waitingCallbacks.shift()(cacheEntry.pdb);}} catch (err) {onPropertyPackLoadComplete(null);}}}} // Request the files.
	    //
	    filesToRequest.forEach(function (f) {requestFile(f.filename, loadContext, onRequestCompletion, f.storage);});}function requestFile(filename, loadContext, onRequestCompletion, storage) {function onFailure(status, statusText, data) {// We're explicitly ignoring missing property files.
	        if (status !== 404) {loadContext.onFailureCallback(status, statusText, data);}onRequestCompletion(null);}var url;if (filename.indexOf("://") !== -1 || filename.indexOf("urn:") === 0) {url = filename;} else {url = (loadContext.dbPath || '') + filename;}var fullPath = _Xhr.ViewingService.generateUrl(loadContext.endpoint, "items", url);var onSuccess = function onSuccess(response) {//Cache for future reuse
	        loadContext.worker.fileCache[fullPath] = new FileCacheEntry(response);storage[fullPath] = response;onRequestCompletion(response);}; //Fulfill the request from cache if available
	    var cacheEntry = loadContext.worker.fileCache[fullPath];if (cacheEntry) {cacheEntry.refCount++;onSuccess(cacheEntry.data);} else {_Xhr.ViewingService.getItem(loadContext, url, onSuccess, onFailure);}}function doObjectTreeParse(loadContext) {var _this = loadContext.worker;function onPropertyPackLoadComplete(propertyDb, dbidOldToNew) {if (!propertyDb) {_this.postMessage({ cbId: loadContext.cbId, error: { instanceTree: null, maxTreeDepth: 0 } });return;}propertyDb.refCount++; //Find the root object:
	        //TODO: internalize this into the pdb object.
	        if (!propertyDb.rootsDone) {propertyDb.idroots = propertyDb.findRootNodes();propertyDb.objCount = propertyDb.getObjectCount();propertyDb.rootsDone = true;}var rootId;var maxDepth = [0];var transferList = [];var storage;var fragToDbId = loadContext.fragToDbId;if (loadContext.needsDbIdRemap) {if (!dbidOldToNew) {console.warn("ID remap required, but not loaded.");} else if (!fragToDbId) {console.warn("No frag->dbid mapping!.");} else {//Replace the frag2dbid mapping by a new one using the
	                //correct property db v2 ids.
	                var old2new = dbidOldToNew;var fr2id = [];for (var i = 0; i < fragToDbId.length; i++) {var d = fragToDbId[i];if (!Array.isArray(d)) {fr2id[i] = old2new[d];} else {fr2id[i] = [];for (var j = 0; j < d.length; j++) {fr2id[i][j] = old2new[d[j]];}}}fragToDbId = fr2id;}} //In the cases of 2D drawings, there is no meaningful
	        //object hierarchy, so we don't build a tree.
	        var idroots = propertyDb.idroots;if (idroots && idroots.length) {storage = new _InstanceTreeStorage.InstanceTreeStorage(propertyDb.getObjectCount(), fragToDbId ? fragToDbId.length : 0);if (idroots.length == 1) {//Case of a single root in the property database,
	                //use that as the document root.
	                rootId = idroots[0];propertyDb.buildObjectTree(rootId, fragToDbId, maxDepth, storage);} else {//Case of multiple nodes at the root level
	                //This happens in DWFs coming from Revit.
	                //Create a dummy root and add all the other roots
	                //as its children.
	                rootId = -1e10; // Big negative number to prevent conflicts with F2D
	                var childrenIds = [];for (var i = 0; i < idroots.length; i++) {propertyDb.buildObjectTree(idroots[i], fragToDbId, maxDepth, storage);childrenIds.push(idroots[i]);}storage.setNode(rootId, 0, "", 0, childrenIds, false);}storage.flatten();transferList.push(storage.nodes.buffer);transferList.push(storage.children.buffer);transferList.push(storage.strings.buf.buffer);transferList.push(storage.strings.idx.buffer); //Now compute the bounding boxes for instance tree nodes
	            if (loadContext.fragBoxes) {var nodeAccess = new _InstanceTreeStorage.InstanceTreeAccess(storage, rootId);nodeAccess.computeBoxes(loadContext.fragBoxes);transferList.push(nodeAccess.nodeBoxes.buffer);}}_this.postMessage({ cbId: loadContext.cbId, result: { rootId: rootId, instanceTreeStorage: storage, instanceBoxes: !!nodeAccess ? nodeAccess.nodeBoxes : undefined, dbidOldToNew: loadContext.needsDbIdRemap ? dbidOldToNew : null, //If we have a dbId mapping (from new OTG dbIds to old F2D dbIds send it to the main thread.
	                maxTreeDepth: maxDepth[0], objectCount: propertyDb.objCount } }, transferList);}loadPropertyPacks(loadContext, null, onPropertyPackLoadComplete);}function doPropertySearch(loadContext) {var _this = loadContext.worker;var cacheEntry = _this.pdbCache && _this.pdbCache[loadContext.dbPath];if (cacheEntry && cacheEntry.pdb) {var searchText = loadContext.searchText;var result = cacheEntry.pdb.bruteForceSearch(searchText, loadContext.attributeNames);_this.postMessage({ cbId: loadContext.cbId, result: result });}}function doPropertyDiff(loadContext) {var _this = loadContext.worker; // get property dbs to compare
	    var cacheEntry1 = _this.pdbCache && _this.pdbCache[loadContext.dbPath];var cacheEntry2 = _this.pdbCache && _this.pdbCache[loadContext.dbPath2];var pdb1 = cacheEntry1 && cacheEntry1.pdb;var pdb2 = cacheEntry2 && cacheEntry2.pdb;if (pdb1 && pdb2) {var result = pdb1.findDifferences(pdb2, loadContext.diffOptions);_this.postMessage({ cbId: loadContext.cbId, result: result });}}function doPropertyFind(loadContext) {var _this = loadContext.worker;var cacheEntry = _this.pdbCache && _this.pdbCache[loadContext.dbPath];if (cacheEntry && cacheEntry.pdb) {var result = cacheEntry.pdb.bruteForceFind(loadContext.propertyName);_this.postMessage({ cbId: loadContext.cbId, result: result });}}function doLayersFind(loadContext) {var _this = loadContext.worker;var cacheEntry = _this.pdbCache && _this.pdbCache[loadContext.dbPath];if (cacheEntry && cacheEntry.pdb) {var result = cacheEntry.pdb.findLayers();_this.postMessage({ cbId: loadContext.cbId, result: result });}}function doPropertyGet(loadContext) {var _this = loadContext.worker;var cacheEntry = _this.pdbCache && _this.pdbCache[loadContext.dbPath];if (!cacheEntry || !cacheEntry.pdb) {loadContext.worker.postMessage({ cbId: loadContext.cbId, error: { msg: "Properties are not available." } });return;}var dbId = loadContext.dbId;var dbIds = loadContext.dbIds;var propFilter = loadContext.propFilter;var ignoreHidden = loadContext.ignoreHidden;if (typeof dbIds !== "undefined") {var results = [];if (dbIds && dbIds.length) {for (var i = 0; i < dbIds.length; i++) {var result = cacheEntry.pdb.getObjectProperties(dbIds[i], propFilter, ignoreHidden);if (result) results.push(result);}} else {//If dbIds is empty, return results for all objects (i.e. no ID filter)
	            for (var i = 1, last = cacheEntry.pdb.getObjectCount(); i <= last; i++) {var result = cacheEntry.pdb.getObjectProperties(i, propFilter, ignoreHidden);if (result) results.push(result);}}loadContext.worker.postMessage({ cbId: loadContext.cbId, result: results });} else {var result = cacheEntry.pdb.getObjectProperties(dbId, propFilter);loadContext.worker.postMessage({ cbId: loadContext.cbId, result: result });}}function doBuildExternalIdMapping(loadContext) {var _this = loadContext.worker;var cacheEntry = _this.pdbCache && _this.pdbCache[loadContext.dbPath];if (cacheEntry && cacheEntry.pdb) {var mapping = cacheEntry.pdb.getExternalIdMapping();_this.postMessage({ cbId: loadContext.cbId, result: mapping });}}function doBuildLayerToNodeIdMapping(loadContext) {var _this = loadContext.worker;var cacheEntry = _this.pdbCache && _this.pdbCache[loadContext.dbPath];if (cacheEntry && cacheEntry.pdb) {var mapping = cacheEntry.pdb.getLayerToNodeIdMapping();_this.postMessage({ cbId: loadContext.cbId, result: mapping });}}function doUnloadPropertyDb(loadContext) {var _this = loadContext.worker;if (loadContext.clearCaches) {_this.pdbCache = {};_this.fileCache = {};return;}var cacheEntry = _this.pdbCache && _this.pdbCache[loadContext.dbPath];if (cacheEntry && cacheEntry.pdb) cacheEntry.pdb.refCount--;else return;if (cacheEntry.pdb.refCount === 0) {//TODO: erase the entry even if db is shared once it's no longer used?
	        //The db files are still cached anyway.
	        if (!cacheEntry.isShared) {delete _this.pdbCache[loadContext.dbPath];}if (!cacheEntry.isShared) {//Also erase any per-file cache, unless the file is shared across multiple property databases
	            for (var fileName in cacheEntry.dbFiles) {var file = cacheEntry.dbFiles[fileName];for (var key in file.storage) {var fileCacheEntry = _this.fileCache[key];if (fileCacheEntry) {fileCacheEntry.refCount--;if (fileCacheEntry.refCount === 0) delete _this.fileCache[key];}}}}}}function register(workerMain) {workerMain.register("BUILD_EXTERNAL_ID_MAPPING", { doOperation: doBuildExternalIdMapping });workerMain.register("BUILD_LAYER_TO_NODE_ID_MAPPING", { doOperation: doBuildLayerToNodeIdMapping });workerMain.register("GET_PROPERTIES", { doOperation: doPropertyGet });workerMain.register("SEARCH_PROPERTIES", { doOperation: doPropertySearch });workerMain.register("DIFF_PROPERTIES", { doOperation: doPropertyDiff });workerMain.register("FIND_PROPERTY", { doOperation: doPropertyFind });workerMain.register("FIND_LAYERS", { doOperation: doLayersFind });workerMain.register("LOAD_PROPERTYDB", { doOperation: doObjectTreeParse });workerMain.register("UNLOAD_PROPERTYDB", { doOperation: doUnloadPropertyDb });}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.

















































	PropertyDatabase = PropertyDatabase;var _StringUtils = __webpack_require__(7);var _SearchUtils = __webpack_require__(62);var AttributeType = { /* Numeric types */Unknown: 0, Boolean: 1, Integer: 2, Double: 3, Float: 4, /* Special types */BLOB: 10, DbKey: 11, /* represents a link to another object in the database, using database internal ID */ /* String types */String: 20, LocalizableString: 21, DateTime: 22, /* ISO 8601 date */GeoLocation: 23, /* LatLonHeight - ISO6709 Annex H string, e.g: "+27.5916+086.5640+8850/" for Mount Everest */Position: 24 /* "x y z w" space separated string representing vector with 2,3 or 4 elements*/ //TODO: Do we need explicit logical types for any others?
	}; //Bitmask values for boolean attribute options
	var AttributeFlags = { afHidden: 1 << 0, /* Attribute will not be displayed in default GUI property views. */afDontIndex: 1 << 1, /* Attribute will not be indexed by the search service. */afDirectStorage: 1 << 2 /* Attribute is not worth de-duplicating (e.g. vertex data or dbId reference) */ //4,8,16...
	};function readVarint(buf, offset) {var b;var value = 0;var shiftBy = 0;do {b = buf[offset[0]++];value |= (b & 0x7f) << shiftBy;shiftBy += 7;} while (b & 0x80);return value;} /** @constructor */function PropertyDatabase(dbjsons) {"use strict";
	    var _this = this;

	    var _isV2 = false;
	    var _isVarint = false;

	    //The property db json arrays.
	    //Some of them are held unparsed in blob form
	    //with helper arrays containing offsets into the blobs for each value to be parsed on demand
	    var _attrs; // Array of arrays. Inner array is in the form [attrName(0), category(1), dataType(2), dataTypeContext(3), description(4), displayName(5), flags(6) ] 
	    // See struct AttributeDef in https://git.autodesk.com/A360/platform-translation-propertydb/blob/master/propertydb/PropertyDatabase.h 
	    var _offsets;
	    var _avs;
	    var _valuesBlob;
	    var _valuesOffsets;
	    var _idsBlob;
	    var _idsOffsets;

	    //Cached ids of commonly used well known attributes (child, parent, name)
	    var _childAttrId;
	    var _parentAttrId;
	    var _nameAttrId;
	    var _instanceOfAttrId;
	    var _viewableInAttrId;
	    var _externalRefAttrId;
	    var _nodeFlagsAttrId;
	    var _layersAttrId;

	    //dbjsons is expected to be of the form
	    //{ attrs: {filename1:x, filename2:y}, ids: {filename1:x... }, values: {... }, offsets: {... }, avs: {... } }
	    //where each of the elements of each array is a pair of the original name and the unzipped *raw* byte
	    //array buffer corresponding to the respective property database constituent. In the current implementation
	    //each array is expected to only have one name-value element.


	    //=========================================================================

	    //The attribute definitions blob is considered small enough
	    //to parse using regular APIs
	    for (var p in dbjsons.attrs) {
	        _attrs = (0, _StringUtils.blobToJson)(dbjsons.attrs[p]);

	        if (_attrs[0] === "pdb version 2")
	        _isV2 = true;

	        for (var i = 1; i < _attrs.length; i++) {

	            var attrName = _attrs[i][0];
	            switch (attrName) {
	                case "Layer":_layersAttrId = i;break;
	                default:break;}


	            var category = _attrs[i][1];

	            switch (category) {
	                case "__parent__":_parentAttrId = i;break;
	                case "__child__":_childAttrId = i;break;
	                case "__name__":_nameAttrId = i;break;
	                case "__instanceof__":_instanceOfAttrId = i;break;
	                case "__viewable_in__":_viewableInAttrId = i;break;
	                case "__externalref__":_externalRefAttrId = i;break;
	                case "__node_flags__":_nodeFlagsAttrId = i;break;
	                default:break;}


	            //As of V2, DbKey attribute values are stored directly into the AV array
	            if (_isV2 && _attrs[i][2] === AttributeType.DbKey) {
	                _attrs[i][6] = _attrs[i][6] | AttributeFlags.afDirectStorage;
	            }
	        }

	        break; //currently we can only handle single property file (no chunking)
	    }

	    //manual parse of the attribute-value index pairs array
	    for (var p in dbjsons.avs) {

	        var buf = dbjsons.avs[p];

	        if (buf[0] === "[".charCodeAt(0)) {
	            _avs = (0, _StringUtils.parseIntArray)(dbjsons.avs[p], 0);
	        } else {
	            _avs = buf;
	            _isVarint = true;
	        }

	        delete dbjsons.avs; //don't need this blob anymore

	        break; //currently we can only handle single property file (no chunking)

	    }


	    //manual parse of the offsets array
	    for (var p in dbjsons.offsets) {

	        var buf = dbjsons.offsets[p];

	        if (buf[0] === "[".charCodeAt(0)) {
	            _offsets = (0, _StringUtils.parseIntArray)(buf, 1); //passing in 1 to reserve a spot for the sentinel value

	            //just a sentinel value to make lookups for the last item easier
	            _offsets[_offsets.length - 1] = _avs.length / 2;
	        } else {
	            _offsets = new Int32Array(buf.buffer, buf.byteOffset, buf.byteLength / 4);
	        }

	        delete dbjsons.offsets; //don't need this

	        break; //currently we can only handle single property file (no chunking)

	    }

	    //Instead of parsing the values and ids arrays, find the
	    //offset of each json item in the blob, and then we can
	    //pick and parse specific items later on demand, without
	    //parsing the potentially large json blob up front.
	    for (var p in dbjsons.values) {
	        _valuesBlob = dbjsons.values[p];
	        _valuesOffsets = (0, _StringUtils.findValueOffsets)(_valuesBlob);

	        break; //currently we can only handle single property file (no chunking)

	    }

	    //Do the same for the ids array -- find the offset to each
	    //value but skip the full parse. Note that the ids array is
	    //optional as we don't currently use it anywhere
	    for (var p in dbjsons.ids) {
	        _idsBlob = dbjsons.ids[p];
	        _idsOffsets = (0, _StringUtils.findValueOffsets)(_idsBlob);

	        break; //currently we can only handle single property file (no chunking)

	    }

	    //=========================================================================

	    this.getObjectCount = function () {
	        return _offsets.length - 1;
	    };

	    this.getValueAt = function (valId) {
	        return (0, _StringUtils.subBlobToJson)(_valuesBlob, _valuesOffsets[valId]);
	    };

	    //faster variant used for traversing the object hierarchy where
	    //we know the data type of the value to be an integer
	    this.getIntValueAt = function (valId) {
	        return (0, _StringUtils.subBlobToJsonInt)(_valuesBlob, _valuesOffsets[valId]);
	    };


	    this.getIdAt = function (entId) {
	        return (0, _StringUtils.subBlobToJson)(_idsBlob, _idsOffsets[entId]);
	    };


	    this.getAttrValue = function (attrId, valId, integerHint) {
	        var attr = _attrs[attrId];
	        if (attr[6] & AttributeFlags.afDirectStorage) {
	            if (attr[2] === AttributeType.DbKey) {
	                //db keys are stored directly in the EAV triplet
	                return valId;
	            } /* else if (attr.dataType === AttributeType.Integer) {
	                 return this.ints.get(this.ints.indexToPointer(valId));
	              } else if (attr.dataType === AttributeType.Float) {
	                 return this.floats.getf(this.floats.indexToPointer(valId));
	              }*/
	        }

	        return integerHint ? this.getIntValueAt(valId) : this.getValueAt(valId);
	    };

	    this._getObjectProperty = function (attrId, valId) {

	        var attr = _attrs[attrId];
	        var displayName = attr[5] ? attr[5] : attr[0];
	        var hidden = this.attributeHidden(attrId);

	        // type values match those in PropertyDatabase.h
	        // See: https://git.autodesk.com/A360/platform-translation-propertydb/blob/master/propertydb/PropertyDatabase.h#L67
	        return {
	            displayName: displayName,
	            displayValue: _this.getAttrValue(attrId, valId),
	            displayCategory: attr[1],
	            attributeName: attr[0],
	            type: attr[2],
	            units: attr[3],
	            hidden: hidden,
	            precision: attr[7] || 0 };

	    };

	    this.getObjectProperties = function (dbId, propFilter, ignoreHidden, propIgnored) {
	        var result = {
	            "dbId": dbId,
	            "properties": [] };


	        var needExternalId = false;
	        var needName = false;

	        if (!propFilter || propFilter.indexOf("externalId") !== -1) {
	            result.externalId = this.getIdAt(dbId);
	            needExternalId = true;

	            // If there are no other properties required, then just return
	            // Useful when we only care about fetching externalId-only data.
	            if (propFilter && propFilter.length === 1) {
	                return result;
	            }
	        }

	        var parentProps = null;

	        //Loop over the attribute index - value index pairs for the objects
	        //and for each one look up the attribute and the value in their
	        //respective arrays.
	        this.enumObjectProperties(dbId, function (attrId, valId) {
	            if (attrId == _instanceOfAttrId) {
	                //Recursively resolve any common properties from the parent of this instance
	                //NOTE: Here we explicitly ignore hidden properties, because we don't 
	                //want the parent instance to override parent/child nodes and other structural 
	                //attributes. Specifically, Revit extraction has a bug where the model tree parent is 
	                //also instance prototype for its children, so we need to prevent the child
	                //from gaining all its siblings as children of its own due to this inheritance.
	                var res = _this.getObjectProperties(_this.getAttrValue(attrId, valId), propFilter, true /*ignoreHidden*/, propIgnored);
	                if (res && res.properties) {
	                    parentProps = res;
	                }
	                return;
	            }

	            var attr = _attrs[attrId];

	            if (propFilter && propFilter.indexOf(attr[0]) === -1 && propFilter.indexOf(attr[5]) === -1)
	            return;

	            if (propIgnored && (propIgnored.indexOf(attr[0]) > -1 || propIgnored.indexOf(attr[5]) > -1))
	            return;

	            if (attrId == _nameAttrId) {
	                var val = _this.getAttrValue(attrId, valId);
	                needName = true;
	                result.name = val;
	            } else
	            {

	                //skip structural attributes, we don't want those to display
	                //NOTE: The list of structural attributes that we check explicitly is not marked
	                //as hidden in older versions of the property database, so if we ever want to
	                //add them to the result list, we have to explicitly set the hidden flag for those.
	                var hidden = _this.attributeHidden(attrId);
	                if (ignoreHidden && hidden) {
	                    return;
	                }

	                var prop = _this._getObjectProperty(attrId, valId);
	                result.properties.push(prop);
	            }
	        });

	        //Combine instance properties with any parent object properties
	        if (parentProps) {
	            var myProps = {};
	            var rp = result.properties;
	            for (var i = 0; i < rp.length; i++) {
	                myProps[rp[i].displayName] = 1;
	            }

	            if (!result.name)
	            result.name = parentProps.name;

	            var pp = parentProps.properties;
	            for (var i = 0; i < pp.length; i++) {
	                if (!myProps.hasOwnProperty(pp[i].displayName)) {
	                    rp.push(pp[i]);
	                }
	            }
	        }

	        if (propFilter && !result.properties.length && !needExternalId && !needName)
	        return null;

	        return result;
	    };

	    this.getExternalIdMapping = function () {
	        var mapping = {};
	        if (_idsOffsets && 'length' in _idsOffsets) {// Check that it's an indexable type
	            for (var dbId = 1, len = _idsOffsets.length; dbId < len; ++dbId) {
	                var externalId = this.getIdAt(dbId);
	                mapping[externalId] = dbId;
	            }
	        }
	        return mapping;
	    };

	    //Heuristically find the root node(s) of a scene
	    //A root is a node that has children, has no (or null) parent and has a name.
	    //There can be multiple nodes at the top level (e.g. Revit DWF), which is why
	    //we should get the scene root with absolute certainty from the SVF instance tree,
	    //but we would have to uncompress and parse that in -- something that is
	    //not currently done. This is good enough for now (if pretty slow).
	    this.findRootNodes = function () {

	        var idroots = [];

	        this.enumObjects(function (id) {
	            var hasChild = false;
	            var hasParent = false;
	            var hasName = false;

	            _this.enumObjectProperties(id, function (attrId, valId) {
	                if (attrId == _parentAttrId) {
	                    if (_this.getAttrValue(attrId, valId, true)) //checks for null or zero parent id, in which case it's considered non-parent
	                        hasParent = true;
	                } else if (attrId == _childAttrId) {
	                    hasChild = true;
	                } else
	                if (attrId == _nameAttrId) {
	                    hasName = true;
	                }
	            });

	            if (hasChild && hasName && !hasParent) {
	                idroots.push(id);
	            }
	        });

	        return idroots;
	    };

	    //Gets the immediate children of a node with the given dbId
	    this.getNodeNameAndChildren = function (node /* {dbId:X, name:""} */, skipChildren) {

	        var id = node.dbId;

	        var children;

	        this.enumObjectProperties(id, function (attrId, valId) {
	            var val;

	            if (attrId == _parentAttrId) {
	                //node.parent = this.getAttrValue(attrId, valId, true); //eventually we will needs this instead of setting parent pointer when creating children below.
	            } else if (attrId == _childAttrId && !skipChildren) {
	                val = _this.getAttrValue(attrId, valId, true);
	                var child = { dbId: val, parent: node.dbId };
	                if (!children)
	                children = [child];else

	                children.push(child);

	            } else if (attrId == _nameAttrId) {
	                node.name = _this.getAttrValue(attrId, valId); //name is necessary for GUI purposes, so add it to the node object explicitly
	            } else if (attrId == _nodeFlagsAttrId) {
	                node.flags = _this.getAttrValue(attrId, valId, true); //flags are necessary for GUI/selection purposes, so add them to the node object
	            }
	        });

	        //If this is an instance of another object,
	        //try to get the object name from there.
	        //This is not done in the main loop above for performance reasons,
	        //we only want to do the expensive thing of going up the object hierarchy
	        //if the node does not actually have a name attribute.
	        if (!node.name) {
	            this.enumObjectProperties(id, function (attrId, valId) {
	                if (attrId == _instanceOfAttrId) {
	                    var tmp = { dbId: _this.getAttrValue(attrId, valId, true), name: null };
	                    _this.getNodeNameAndChildren(tmp, true);
	                    if (tmp && tmp.name && !node.name)
	                    node.name = tmp.name;
	                }
	            });
	        }

	        return children;
	    };


	    function buildDbIdToFragMap(fragToDbId) {
	        var ret = {};
	        for (var i = 0, iEnd = fragToDbId.length; i < iEnd; i++) {

	            var dbIds = fragToDbId[i];

	            //In 2D drawings, a single fragment (consolidation mesh)
	            //can contain multiple objects with different dbIds.
	            if (!Array.isArray(dbIds)) {
	                dbIds = [dbIds];
	            }

	            for (var j = 0; j < dbIds.length; j++) {
	                var dbId = dbIds[j];
	                var frags = ret[dbId];
	                if (frags === undefined) {
	                    //If it's the first fragments for this dbid,
	                    //store the index directly -- most common case.
	                    ret[dbId] = i;
	                } else
	                if (!Array.isArray(frags)) {
	                    //otherwise put the fragments that
	                    //reference the dbid into an array
	                    ret[dbId] = [frags, i];
	                } else
	                {
	                    //already is an array
	                    frags.push(i);
	                }
	            }
	        }

	        return ret;
	    }


	    //Duplicated from InstanceTree.js
	    var NODE_TYPE_ASSEMBLY = 0x0, // Real world object as assembly of sub-objects
	    NODE_TYPE_GEOMETRY = 0x6; // Leaf geometry node

	    //Builds a tree of nodes according to the parent/child hierarchy
	    //stored in the property database, starting at the node with the given dbId
	    this.buildObjectTree = function (rootId, //current node dbId
	    fragToDbId, //array of fragId->dbId lookup
	    maxDepth, /* returns max tree depth */
	    nodeStorage)
	    {

	        //Build reverse lookup for dbId->fragId
	        var dbToFragId;
	        if (fragToDbId) {
	            dbToFragId = buildDbIdToFragMap(fragToDbId);
	        }

	        //Call recursive implementation
	        return this.buildObjectTreeRec(rootId, 0, dbToFragId, 0, maxDepth, nodeStorage);
	    };

	    //Recursive helper for buildObjectTree
	    this.buildObjectTreeRec = function (dbId, //current node dbId
	    parent, //parent dbId
	    dbToFrag, //map of dbId to fragmentIds
	    depth, /* start at 0 */
	    maxDepth, /* returns max tree depth */
	    nodeStorage)
	    {

	        if (depth > maxDepth[0])
	        maxDepth[0] = depth;

	        var node = { dbId: dbId };
	        var children = this.getNodeNameAndChildren(node);

	        var childrenIds = [];

	        if (children) {
	            for (var j = 0; j < children.length; j++) {
	                var childHasChildren = this.buildObjectTreeRec(children[j].dbId, dbId, dbToFrag, depth + 1, maxDepth, nodeStorage);

	                //For display purposes, prune children that are leafs without graphics
	                //and add the rest to the node
	                if (childHasChildren)
	                childrenIds.push(children[j].dbId);
	            }
	        }

	        var fragIds;

	        //leaf node
	        if (dbToFrag) {
	            var frags = dbToFrag[dbId];
	            if (frags !== undefined) {

	                //if (childrenIds.length)
	                //    console.error("Node that has both node children and fragment children!", node.name, children, childrenIds, frags);

	                if (!Array.isArray(frags))
	                fragIds = [frags];else

	                fragIds = frags;
	            }
	        }

	        //Use default node flags in case none are set
	        //This is not the best place to do this, but it's
	        //the last place where we can differentiate between "not set" and zero.
	        var flags = node.flags || 0;
	        if (flags === undefined) {
	            if (fragIds && fragIds.length)
	            flags = NODE_TYPE_GEOMETRY;else
	            if (childrenIds.length)
	            flags = NODE_TYPE_ASSEMBLY;else

	            flags = 0; //??? Should not happen (those nodes are pruned above)
	        }

	        nodeStorage.setNode(dbId, parent, node.name, flags, childrenIds, fragIds);

	        return childrenIds.length + (fragIds ? fragIds.length : 0);
	    };

	    /**
	        * Given a text string, returns an array of individual words separated by 
	        * white spaces.
	        * Will preserve white spacing within double quotes.
	        */
	    this.getSearchTerms = function (searchText) {
	        searchText = searchText.toLowerCase();
	        //regex preserves double-quote delimited strings as phrases
	        var searchTerms = searchText.match(/"[^"]+"|[^\s]+/g) || [];
	        var i = searchTerms.length;
	        while (i--) {
	            searchTerms[i] = searchTerms[i].replace(/"/g, "");
	        }
	        var searchList = [];
	        for (var i = 0; i < searchTerms.length; i++) {

	            if (searchTerms[i].length > 1)
	            searchList.push(searchTerms[i]);
	        }
	        return searchList;
	    };

	    /**
	        * Searches the property database for a string.
	        * 
	        * @returns Array of ids.
	        */
	    this.bruteForceSearch = function (searchText, attributeNames) {

	        var searchList = this.getSearchTerms(searchText);
	        if (searchList.length === 0)
	        return [];

	        //For each search word, find matching IDs
	        var results = [];

	        for (var k = 0; k < searchList.length; k++) {
	            var result = [];

	            //Find all values that match the search text
	            var matching_vals = [];
	            for (var i = 0, iEnd = _valuesOffsets.length; i < iEnd; i++) {
	                var val = this.getValueAt(i);
	                if (val === null)
	                continue;
	                if (val.toString().toLowerCase().indexOf(searchList[k]) !== -1)
	                matching_vals.push(i);
	            }

	            if (matching_vals.length === 0) {
	                results.push(result);
	                continue;
	            }

	            // values should be sorted at this point, but it doesn't hurt making sure they are.
	            matching_vals.sort(function (a, b) {
	                return a - b;
	            });

	            this.enumObjects(function (id) {

	                _this.enumObjectProperties(id, function (attrId, valId) {

	                    // skip hidden attributes
	                    var isHidden = _this.attributeHidden(attrId);
	                    if (isHidden) {
	                        return;
	                    }

	                    var iFound = (0, _SearchUtils.binarySearch)(matching_vals, valId);
	                    if (iFound !== -1) {
	                        //Check attribute name in case a restriction is passed in
	                        if (attributeNames && attributeNames.length && attributeNames.indexOf(_attrs[attrId][0]) === -1)
	                        return;

	                        result.push(id);
	                        return true;
	                    }
	                });

	            });

	            results.push(result);
	        }

	        if (results.length === 1) {
	            return results[0];
	        }

	        //If each search term resulted in hits, compute the intersection of the sets
	        var map = {};
	        var hits = results[0];
	        for (var i = 0; i < hits.length; i++) {
	            map[hits[i]] = 1;}


	        for (var j = 1; j < results.length; j++) {
	            hits = results[j];
	            var mapint = {};

	            for (var i = 0; i < hits.length; i++) {
	                if (map[hits[i]] === 1)
	                mapint[hits[i]] = 1;
	            }

	            map = mapint;
	        }

	        var result = [];
	        for (var k in map) {
	            result.push(parseInt(k));
	        }

	        return result;
	    };


	    /**
	        * Given a property name, it returns an array of ids that contain it.
	        */
	    this.bruteForceFind = function (propertyName) {

	        var results = [];
	        this.enumObjects(function (id) {

	            var idContainsProperty = false;
	            _this.enumObjectProperties(id, function (attrId, valId) {

	                var attr = _attrs[attrId];
	                var propName = attr[0];
	                var displayName = attr[5];

	                if (propName === propertyName || displayName === propertyName) {
	                    idContainsProperty = true;
	                    return true;
	                }
	            });

	            if (idContainsProperty) {
	                results.push(id);
	            }

	        });

	        return results;
	    };

	    /**
	        * Specialized function that returns:
	        * {
	        *    'layer-name-1': [id1, id2, ..., idN],
	        *    'layer-name-2': [idX, idY, ..., idZ],
	        *    ...
	        * }
	        */
	    this.getLayerToNodeIdMapping = function () {

	        var results = {};
	        this.enumObjects(function (id) {

	            _this.enumObjectProperties(id, function (attrId, valId) {

	                if (attrId != _layersAttrId)
	                return;

	                var val = _this.getAttrValue(attrId, valId);
	                if (!Array.isArray(results[val])) {
	                    results[val] = [];
	                }
	                results[val].push(id);
	                return true;
	            });

	        });

	        return results;
	    };

	    //Low level access APIs
	    this.getAttributeDef = function (attrId) {
	        var _raw = _attrs[attrId];
	        return {
	            //attrName(0), category(1), dataType(2), dataTypeContext(3), description(4), displayName(5), flags(6)
	            name: _raw[0],
	            category: _raw[1],
	            dataType: _raw[2],
	            dataTypeContext: _raw[3],
	            description: _raw[4],
	            displayName: _raw[5],
	            flags: _raw[6] };

	    };

	    this.enumAttributes = function (cb) {
	        for (var i = 1; i < _attrs.length; i++) {
	            if (cb(i, this.getAttributeDef(i), _attrs[i]))
	            break;
	        }
	    };

	    this.enumObjectProperties = function (dbId, cb) {

	        if (_isVarint) {
	            //v2 variable length encoding. Offsets point into delta+varint encoded a-v pairs per object
	            var propStart = _offsets[dbId];
	            var propEnd = _offsets[dbId + 1];
	            var offset = [propStart];

	            var a0 = 0;
	            while (offset[0] < propEnd) {
	                var a = readVarint(_avs, offset) + a0;
	                a0 = a;
	                var v = readVarint(_avs, offset);
	                if (cb(a, v))
	                break;
	            }
	        } else {
	            //Start offset of this object's properties in the Attribute-Values table
	            var propStart = 2 * _offsets[dbId];

	            //End offset of this object's properties in the Attribute-Values table
	            var propEnd = 2 * _offsets[dbId + 1];

	            //Loop over the attribute index - value index pairs for the objects
	            //and for each one look up the attribute and the value in their
	            //respective arrays.
	            for (var i = propStart; i < propEnd; i += 2) {
	                var attrId = _avs[i];
	                var valId = _avs[i + 1];

	                if (cb(attrId, valId))
	                break;
	            }
	        }
	    };

	    this.findLayers = function () {

	        // Same format as F2d.js::createLayerGroups()
	        var ret = { name: 'root', id: 1, index: 1, children: [], isLayer: false, childCount: 0 };

	        // Return early when no Layer attribute is present
	        if (_layersAttrId === undefined) {
	            return ret;
	        }

	        // Grab all Layer names
	        var layers = [];
	        var len = _avs.length / 2;
	        for (var i = 0; i < len; ++i) {

	            var id = i * 2;
	            var attrId = _avs[id];
	            var valId = _avs[id + 1];

	            if (attrId === _layersAttrId) {
	                var layerName = this.getValueAt(valId);
	                if (layers.indexOf(layerName) === -1) {
	                    layers.push(layerName);
	                }
	            }
	        }
	        layers.sort(function (a, b) {
	            return a.localeCompare(b, undefined, { sensitivity: 'base', numeric: true });
	        });

	        // Format output to match F2d.js::createLayerGroups()
	        ret.childCount = layers.length;
	        ret.children = layers.map(function (layerName, index) {
	            return {
	                name: layerName,
	                index: index + 1,
	                id: index + 1,
	                isLayer: true };

	        });

	        return ret;
	    };


	    this.enumObjects = function (cb, fromId, toId) {

	        // For a given id, the range in _avs is specified by [offsets[id], _offsets[id+1]].
	        // The last element in _offsets is just the range end of the final range.
	        var idCount = _offsets.length - 1; //== this.getObjectCount()

	        if (typeof fromId === "number") {
	            fromId = Math.max(fromId, 1);
	        } else {
	            fromId = 1;
	        }

	        if (typeof toId === "number") {
	            toId = Math.min(idCount, toId);
	        } else {
	            toId = idCount;
	        }

	        for (var id = fromId; id < toId; id++) {
	            if (cb(id))
	            break;
	        }
	    };

	    this.getAttrChild = function () {
	        return _childAttrId;
	    };

	    this.getAttrParent = function () {
	        return _parentAttrId;
	    };

	    this.getAttrName = function () {
	        return _nameAttrId;
	    };

	    this.getAttrLayers = function () {
	        return _layersAttrId;
	    };

	    this.getAttrInstanceOf = function () {
	        return _instanceOfAttrId;
	    };

	    this.getAttrViewableIn = function () {
	        return _viewableInAttrId;
	    };

	    this.getAttrXref = function () {
	        return _externalRefAttrId;
	    };

	    this.getAttrNodeFlags = function () {
	        return _nodeFlagsAttrId;
	    };

	    this.attributeHidden = function (attrId) {
	        var _raw = _attrs[attrId];
	        var flags = _raw[6];

	        return flags & 1 /*afHidden*/ ||
	        attrId == _parentAttrId ||
	        attrId == _childAttrId ||
	        attrId == _viewableInAttrId ||
	        attrId == _externalRefAttrId;
	    };

	    // Helper function for _findDifferences.
	    // Finds all attributeIds and valueIds - including inherited ones.
	    // Results are pushed to 'result' array as objects { attrId, valId }.
	    // Hidden attributes are excluded.
	    this._getAttributeAndValueIds = function (dbId, result, sortByAttrId, cachedParentAttribs) {

	        var cb = function cb(a, v) {
	            if (a === _instanceOfAttrId) {

	                // recursively add parent attributes
	                var parentDbId = _this.getAttrValue(a, v);

	                // If parentDbId is the same as on last call, we just reuse the result and skip the recursive
	                // call for collecting parent attribs. This avoids doing recursive search over and over again
	                // for the same dbId and can gain signficant speed-up. (e.g. <1s instead of 11) 
	                if (cachedParentAttribs) {

	                    var parentAttribs = cachedParentAttribs.result;

	                    // If parentDb did change since last call...
	                    if (parentDbId !== cachedParentAttribs.dbId) {

	                        // discard previous parent attribs
	                        parentAttribs.length = 0;

	                        // collect attributes/values for new parentDbId
	                        _this._getAttributeAndValueIds(parentDbId, parentAttribs, false);

	                        // remember for which dbId we cached the result 
	                        cachedParentAttribs.dbId = parentDbId;
	                    }

	                    // add parent attribs/values to result
	                    result.push.apply(result, parentAttribs);

	                } else {
	                    _this._getAttributeAndValueIds(parentDbId, result, false);
	                }
	            } else if (!_this.attributeHidden(a)) {
	                result.push({
	                    attrId: a,
	                    valId: v });

	            }
	        };
	        _this.enumObjectProperties(dbId, cb);

	        if (sortByAttrId) {
	            var byIncAtribId = function byIncAtribId(a, b) {
	                return a.attrId - b.attrId;
	            };
	            result.sort(byIncAtribId);
	        }
	    };

	    /* Finds all common dbIds of this and another db for which the properties are not identical.
	        * Hidden attributes are excluded.
	        *  @param {PropertyDatabase} dbToCompare
	        *  @param {Object} [DiffOptions] diffOptions 
	        *  @returns {Object} 
	        * See PropDbLoader.diffProperties for details about diffOptions and return value.
	        *
	        * NOTE: Current implementation only supports Otg models.
	        */
	    this.findDifferences = function (dbToCompare, diffOptions) {

	        var result = {
	            changedIds: [] };


	        // Optional: Restrict search to the given ids
	        var dbIds = diffOptions && diffOptions.dbIds;

	        // Optional: Collect details about which props have changed
	        var listPropChanges = diffOptions && diffOptions.listPropChanges;
	        if (listPropChanges) {
	            result.propChanges = [];
	        }

	        var db1 = this;
	        var db2 = dbToCompare;

	        // Reused array of { attrId, valId } pairs.
	        var propIds1 = [];
	        var propIds2 = [];

	        // To support instanceOf attributes, we need to recursively check parent attributes/values too. (see getAttributesAndValues)
	        // Since the parent of subsequent dbId is often the same, we cache the parent attribs/values that we got from last call.
	        // This avoids to do the same check several times and can make diff significantly faster.
	        var cachedParentAttribs1 = { result: [], dbId: -1 };
	        var cachedParentAttribs2 = { result: [], dbId: -1 };

	        var diffObject = function diffObject(dbId) {

	            // get sorted array of {attrIds, valIds} pairs for both objects
	            var i1 = 0;
	            var i2 = 0;
	            propIds1.length = 0;
	            propIds2.length = 0;

	            db1._getAttributeAndValueIds(dbId, propIds1, true, cachedParentAttribs1);
	            db2._getAttributeAndValueIds(dbId, propIds2, true, cachedParentAttribs2);

	            if (!propIds1.length || !propIds2.length) {
	                // If an array is empty, this dbId does only exist
	                // in one of the two dbs, i.e, the whole object was added or removed.
	                // We are only interested in prop changes of matching objects.
	                return;
	            }

	            var changeFound = false;

	            // array of prop changes for current dbId
	            var propChanges = undefined;

	            while (i1 < propIds1.length && i2 < propIds2.length) {

	                // Note that some values may be undefined if one of the arrays ended.
	                var elem1 = propIds1[i1];
	                var elem2 = propIds2[i2];
	                var a1 = elem1 && elem1.attrId;
	                var v1 = elem1 && elem1.valId;
	                var a2 = elem2 && elem2.attrId;
	                var v2 = elem2 && elem2.valId;

	                // If everything is equal, we are done with this attribute
	                if (a1 === a2 && v1 === v2) {
	                    i1++;
	                    i2++;
	                    continue;
	                }

	                // If we get here, the current attribute has changed
	                changeFound = true;

	                // If no details are requested, we are done with this dbId
	                if (!listPropChanges) {
	                    break;
	                }

	                // We exploit here that attributeIds in OTG are always sorted in ascending order
	                // Therefore, if a1 > a2, we can safely assume that a1 does not exist in iterator2,
	                // but possibly vice versa.
	                var prop1Missing = a1 === undefined || a1 > a2;
	                var prop2Missing = a2 === undefined || a2 > a1;

	                var change = undefined;

	                // Handle case that property has been added or removed
	                if (prop1Missing) {

	                    // property was added in db2
	                    change = db2._getObjectProperty(a2, v2);
	                    change.displayValueB = change.displayValue;
	                    change.displayValue = undefined;

	                    // a2 has been detected as added. Skip it and continue.
	                    i2++;
	                } else if (prop2Missing) {

	                    // property was removed in db2
	                    change = db1._getObjectProperty(a1, v1);
	                    change.displayValueB = undefined;

	                    // a1 has been detected as removed. Skip it and continue.
	                    i1++;
	                } else {
	                    // attrib exists in both, but value has changed
	                    change = db1._getObjectProperty(a1, v1);
	                    change.displayValueB = _this.getAttrValue(a2, v2);

	                    i1++;
	                    i2++;
	                }

	                // If this is the first prop that change, alloc array for it
	                if (!propChanges) {
	                    propChanges = [];
	                }

	                propChanges.push(change);
	            }

	            // Collect dbId of modified object
	            if (changeFound) {
	                result.changedIds.push(dbId);

	                // collect correspondign prop change details
	                if (listPropChanges) {
	                    result.propChanges.push(propChanges);
	                }
	            }
	        };

	        if (dbIds) {
	            // diff selected set of Ids
	            for (var i = 0; i < dbIds.length; i++) {
	                var dbId = dbIds[i];
	                diffObject(dbId);
	            }
	        } else {
	            // diff all objects
	            // Note: We are only searching for common objects that changed. Therefore, the loop
	            //       runs only over dbIds that are within the valid range for both.
	            var dbIdEnd = Math.min(db1.getObjectCount(), this.getObjectCount());
	            for (var dbId = 1; dbId < dbIdEnd; dbId++) {
	                diffObject(dbId);
	            }
	        }

	        return result;
	    };

	    this.dtor = function () {
	        _attrs = null;
	        _offsets = null;
	        _avs = null;
	        _valuesBlob = null;
	        _valuesOffsets = null;
	        _idsBlob = null;
	        _idsOffsets = null;

	        _childAttrId = 0;
	        _parentAttrId = 0;
	        _nameAttrId = 0;
	        _instanceOfAttrId = 0;
	        _viewableInAttrId = 0;
	        _externalRefAttrId = 0;
	        _nodeFlagsAttrId = 0;
	    };
	}

/***/ }),
/* 62 */
/***/ (function(module, exports) {

	"use strict";

	/**
	               * Finds the index of a number in a sorted Array or numbers. 
	               * 
	               * @param sortedArray Array of sorted numbers to search in.
	               * @param key number value to find.
	               * @returns index of the value in the array, or -1 if not found.  
	               */Object.defineProperty(exports, "__esModule", { value: true });exports.
	binarySearch = binarySearch;function binarySearch(sortedArray, key) {

	    var start = 0;
	    var end = sortedArray.length - 1;
	    var mid = void 0;

	    while (start <= end)
	    {
	        mid = (start + end) / 2 | 0;
	        if (key === sortedArray[mid])
	        return mid;else
	        if (key < sortedArray[mid])
	        end = mid - 1;else
	        start = mid + 1;
	    }
	    return -1;
	};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.FlatStringStorage = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();exports.
















































































	InstanceTreeStorage = InstanceTreeStorage;exports.


















































































































































	InstanceTreeAccess = InstanceTreeAccess;var _StringUtils = __webpack_require__(7);function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var FlatStringStorage = exports.FlatStringStorage = function () {function FlatStringStorage(initial) {_classCallCheck(this, FlatStringStorage);if (initial) {this.buf = initial.buf;this.idx = initial.idx;this.next = initial.next;} else {this.buf = new Uint8Array(256);this.next = 0;this.idx = [0];}}_createClass(FlatStringStorage, [{ key: "allocate", value: function allocate(len) {if (this.buf.length - this.next < len) {var nsz = Math.max(this.buf.length * 3 / 2, this.buf.length + len);var nb = new Uint8Array(nsz);nb.set(this.buf);this.buf = nb;}} }, { key: "add", value: function add(s) {if (s === null || typeof s === "undefined") {return 0;}if (!s.length) {this.idx.push(this.next);return this.idx.length - 1;}var len = (0, _StringUtils.utf16to8)(s, null);this.allocate(len);this.next += (0, _StringUtils.utf16to8)(s, this.buf, this.next);this.idx.push(this.next);return this.idx.length - 1;} }, { key: "get", value: function get(i) {if (!i) {return undefined;}var start = this.idx[i - 1];var end = this.idx[i];if (start === end) return "";return (0, _StringUtils.utf8BlobToStr)(this.buf, start, end - start);} }, { key: "flatten", value: function flatten() {this.idx = arrayToBuffer(this.idx); //TODO: we could also clip this.buf to the actually used size, but that requires reallocation
	        } }]);return FlatStringStorage;}(); //
	// struct Node {
	//     int dbId;
	//     int parentDbId;
	//     int firstChild; //if negative it's a fragment list
	//     int numChildren;
	//     int flags;   
	// };
	// sizeof(Node) == 20
	var SIZEOF_NODE = 5, //integers
	OFFSET_DBID = 0,OFFSET_PARENT = 1,OFFSET_FIRST_CHILD = 2,OFFSET_NUM_CHILD = 3,OFFSET_FLAGS = 4; // note: objectCount and fragmentCount are not used
	function InstanceTreeStorage(objectCount, fragmentCount) {this.nodes = [];this.nextNode = 0;this.children = [];this.nextChild = 0;this.dbIdToIndex = {};this.names = [];this.s2i = {}; //duplicate string pool
	    this.strings = new FlatStringStorage();this.nameSuffixes = []; //integers
	    //Occupy index zero so that we can use index 0 as undefined
	    this.getIndex(0);}InstanceTreeStorage.prototype.getIndex = function (dbId) {var index = this.dbIdToIndex[dbId];if (index) return index;index = this.nextNode++; //Allocate space for new node
	    this.nodes.push(dbId); //store the dbId as first integer in the Node structure
	    //Add four blank integers to be filled by setNode
	    for (var i = 1; i < SIZEOF_NODE; i++) {this.nodes.push(0);}this.dbIdToIndex[dbId] = index;return index;};InstanceTreeStorage.prototype.setNode = function (dbId, parentDbId, name, flags, childrenIds, fragIds) {var index = this.getIndex(dbId);var baseOffset = index * SIZEOF_NODE;var numChildren = childrenIds.length;var hasFragments = fragIds && fragIds.length;if (hasFragments) {numChildren += fragIds.length;}this.nodes[baseOffset + OFFSET_PARENT] = parentDbId;this.nodes[baseOffset + OFFSET_FIRST_CHILD] = this.nextChild;this.nodes[baseOffset + OFFSET_NUM_CHILD] = hasFragments ? -numChildren : numChildren;this.nodes[baseOffset + OFFSET_FLAGS] = flags;var i;for (i = 0; i < childrenIds.length; i++) {this.children[this.nextChild++] = this.getIndex(childrenIds[i]);} //Store fragIds as negative numbers so we can differentiate them when looking through
	    //the array later.
	    if (hasFragments) {for (i = 0; i < fragIds.length; i++) {this.children[this.nextChild++] = -fragIds[i] - 1;} //index 0 stored as -1, etc., since 0 is not negative
	    }if (this.nextChild > this.children.length) {// TODO: this code may run in a worker, replace console with something else
	        console.error("Child index out of bounds -- should not happen");}this.processName(index, name);};InstanceTreeStorage.prototype.processName = function (index, name) {//Attempt to decompose the name into a base string + integer,
	    //like for example "Base Wall [12345678]" or "Crank Shaft:1"
	    //We will try to reduce memory usage by storing "Base Wall" just once.
	    var base;var suffix; //Try Revit style [1234] first
	    var iStart = -1;var iEnd = -1;if (name) {//name should not be empty, but hey, it happens.
	        iEnd = name.lastIndexOf("]");iStart = name.lastIndexOf("["); //Try Inventor style :1234
	        if (iStart === -1 || iEnd === -1) {iStart = name.lastIndexOf(":");iEnd = name.length;}} //TODO: Any other separators? What does AutoCAD use?
	    if (iStart >= 0 && iEnd > iStart) {base = name.slice(0, iStart + 1);var ssuffix = name.slice(iStart + 1, iEnd);suffix = parseInt(ssuffix, 10); //make sure we get the same thing back when
	        //converting back to string, otherwise don't 
	        //decompose it.
	        if (!suffix || suffix + "" !== ssuffix) {base = name;suffix = 0;}} else {base = name;suffix = 0;}var idx = this.s2i[base];if (idx === undefined) {idx = this.strings.add(base);this.s2i[base] = idx;}this.names[index] = idx;this.nameSuffixes[index] = suffix;};function arrayToBuffer(a) {var b = new Int32Array(a.length);b.set(a);return b;} // note none of these arguments are used
	InstanceTreeStorage.prototype.flatten = function (dbId, parentDbId, name, flags, childrenIds, isLeaf) {this.nodes = arrayToBuffer(this.nodes);this.children = arrayToBuffer(this.children);this.names = arrayToBuffer(this.names);this.nameSuffixes = arrayToBuffer(this.nameSuffixes);this.strings.flatten();this.s2i = null; //we don't need this temporary map once we've built the strings list
	};function InstanceTreeAccess(nodeArray, rootId, nodeBoxes) {this.nodes = nodeArray.nodes;this.children = nodeArray.children;this.dbIdToIndex = nodeArray.dbIdToIndex;this.names = nodeArray.names;this.nameSuffixes = nodeArray.nameSuffixes;this.strings = new FlatStringStorage(nodeArray.strings);this.rootId = rootId;this.numNodes = this.nodes.length / SIZEOF_NODE;this.visibleIds = null; // only used if bboxes are precomputed
	    this.nodeBoxes = nodeBoxes;}InstanceTreeAccess.prototype.getNumNodes = function () {return this.numNodes;};InstanceTreeAccess.prototype.getIndex = function (dbId) {return this.dbIdToIndex[dbId];};InstanceTreeAccess.prototype.name = function (dbId) {var idx = this.dbIdToIndex[dbId];var base = this.strings.get(this.names[idx]);var suffix = this.nameSuffixes[idx];if (suffix) {//NOTE: update this logic if more separators are supported in processName above
	        var lastChar = base.charAt(base.length - 1);if (lastChar === "[") return base + suffix + "]";else return base + suffix;} else {return base;}
	};

	InstanceTreeAccess.prototype.getParentId = function (dbId) {
	    var idx = this.dbIdToIndex[dbId];
	    return this.nodes[idx * SIZEOF_NODE + OFFSET_PARENT];
	};

	InstanceTreeAccess.prototype.getNodeFlags = function (dbId) {
	    var idx = this.dbIdToIndex[dbId];
	    return this.nodes[idx * SIZEOF_NODE + OFFSET_FLAGS];
	};

	InstanceTreeAccess.prototype.setNodeFlags = function (dbId, flags) {
	    var idx = this.dbIdToIndex[dbId];
	    if (idx) {
	        this.nodes[idx * SIZEOF_NODE + OFFSET_FLAGS] = flags;
	    }
	};

	InstanceTreeAccess.prototype.getNumChildren = function (dbId) {

	    var idx = this.dbIdToIndex[dbId];
	    var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];

	    //If numChildren is non-negative, then all children are nodes (not fragments)
	    if (numChildren >= 0)
	    return numChildren;

	    //Node has mixed fragments and child nodes, so we have to loop and collect just the node children
	    var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];

	    numChildren = Math.abs(numChildren);

	    var numNodeChildren = 0;

	    for (var i = 0; i < numChildren; i++) {
	        var childIdx = this.children[firstChild + i];

	        //did we reach the fragment ids sub-list?
	        if (childIdx < 0)
	        break;

	        numNodeChildren++;
	    }

	    return numNodeChildren;
	};

	InstanceTreeAccess.prototype.getNumFragments = function (dbId) {
	    var idx = this.dbIdToIndex[dbId];

	    var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];

	    //If numChildren is non-negative, there aren't any fragments belonging to this node
	    if (numChildren >= 0)
	    return 0;

	    //Node has mixed fragments and child nodes, so we have to loop and collect just the node children
	    var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];

	    numChildren = Math.abs(numChildren);

	    var numFragChildren = 0;

	    //Iterate backwards, because fragment children are at the back of the children list
	    for (var i = numChildren - 1; i >= 0; i--) {
	        var childIdx = this.children[firstChild + i];

	        //did we reach the inner node children ids sub-list?
	        if (childIdx >= 0)
	        break;

	        numFragChildren++;
	    }

	    return numFragChildren;
	};

	// NOTE: This can only be used if precomputed bboxes are available.
	InstanceTreeAccess.prototype.getNodeBox = function (dbId, dst) {
	    var idx = this.getIndex(dbId);
	    var off = idx * 6;
	    for (var i = 0; i < 6; i++) {
	        dst[i] = this.nodeBoxes[off + i];}
	};

	//Returns an array containing the dbIds of all objects
	//that are physically represented in the scene. Not all
	//objects in the property database occur physically in each graphics viewable.
	InstanceTreeAccess.prototype.getVisibleIds = function () {
	    if (!this.visibleIds) {
	        this.visibleIds = Object.keys(this.dbIdToIndex).map(function (k) {return parseInt(k);});
	    }

	    return this.visibleIds;
	};


	InstanceTreeAccess.prototype.enumNodeChildren = function (dbId, callback) {
	    var idx = this.dbIdToIndex[dbId];
	    var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];
	    var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];

	    numChildren = Math.abs(numChildren);

	    for (var i = 0; i < numChildren; i++) {
	        var childIdx = this.children[firstChild + i];

	        //did we reach the fragment ids sub-list?
	        if (childIdx < 0)
	        break;

	        var childDbId = this.nodes[childIdx * SIZEOF_NODE + OFFSET_DBID];
	        if (callback(childDbId, dbId, idx)) {
	            return dbId;
	        }
	    }
	};

	InstanceTreeAccess.prototype.enumNodeFragments = function (dbId, callback) {
	    var idx = this.dbIdToIndex[dbId];
	    var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];
	    var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];

	    //If numChildren is negative, it means there are fragments in the node
	    if (numChildren < 0) {
	        numChildren = -numChildren;
	        for (var i = 0; i < numChildren; i++) {
	            var childIdx = this.children[firstChild + i];

	            //skip past children that are inner nodes (not fragments)
	            if (childIdx > 0)
	            continue;

	            //Convert fragId from -1 based negative back to the actual fragId
	            if (callback(-childIdx - 1, dbId, idx)) {
	                return dbId;
	            }
	        }
	    }
	};

	InstanceTreeAccess.prototype.computeBoxes = function (fragBoxes) {

	    if (!this.nodeBoxes) {
	        this.nodeBoxes = new Float32Array(6 * this.numNodes);
	    }

	    var nodeAccess = this;
	    var idx = nodeAccess.getIndex(nodeAccess.rootId);
	    var nodeBoxes = nodeAccess.nodeBoxes;

	    function traverseChildren(child_dbId, parentDbID, parentIdx) {

	        var childIdx = nodeAccess.getIndex(child_dbId);

	        //Recurse, then add all child boxes to make this node's box
	        computeTreeBBoxesRec(child_dbId, childIdx);

	        var box_offset = parentIdx * 6;
	        var child_box_offset = childIdx * 6;
	        for (var k = 0; k < 3; k++) {
	            if (nodeBoxes[box_offset + k] > nodeBoxes[child_box_offset + k])
	            nodeBoxes[box_offset + k] = nodeBoxes[child_box_offset + k];
	            if (nodeBoxes[box_offset + k + 3] < nodeBoxes[child_box_offset + k + 3])
	            nodeBoxes[box_offset + k + 3] = nodeBoxes[child_box_offset + k + 3];
	        }
	    }

	    function traverseFragments(fragId, dbId, idx) {
	        var frag_box_offset = fragId * 6;
	        var box_offset = idx * 6;

	        for (var k = 0; k < 3; k++) {
	            if (nodeBoxes[box_offset + k] > fragBoxes[frag_box_offset + k])
	            nodeBoxes[box_offset + k] = fragBoxes[frag_box_offset + k];
	            if (nodeBoxes[box_offset + k + 3] < fragBoxes[frag_box_offset + k + 3])
	            nodeBoxes[box_offset + k + 3] = fragBoxes[frag_box_offset + k + 3];
	        }
	    }

	    function computeTreeBBoxesRec(dbId, idx) {

	        var box_offset = idx * 6;
	        nodeBoxes[box_offset] = nodeBoxes[box_offset + 1] = nodeBoxes[box_offset + 2] = Infinity;
	        nodeBoxes[box_offset + 3] = nodeBoxes[box_offset + 4] = nodeBoxes[box_offset + 5] = -Infinity;

	        if (nodeAccess.getNumChildren(dbId)) {
	            nodeAccess.enumNodeChildren(dbId, traverseChildren, true);
	        }

	        //Leaf node -- don't think it's possible for a node to have
	        //both children and leaf fragments, but we do handle that here.
	        if (nodeAccess.getNumFragments(dbId)) {
	            nodeAccess.enumNodeFragments(dbId, traverseFragments);
	        }

	    }

	    computeTreeBBoxesRec(nodeAccess.rootId, idx);
	};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.
































	register = register;var _DecodeEnvMap = __webpack_require__(65); //TODO_TS: getTransferables is copied in both the main and worker sides. Move it to a shared location where both can include it.
	function getTransferables(map) {var res = []; // if `map.image` is an array, use it as it is, otherwise create an array with single item (`map.image`) in it
	    var images = Array.isArray(map.image) ? map.image : [map.image];for (var i = 0; i < images.length; i++) {var image = images[i];for (var j = 0; j < image.mipmaps.length; j++) {var mipmap = image.mipmaps[j];res.push(mipmap.data.buffer);}}return res;}function doDecodeEnvmap(loadContext) {(0, _DecodeEnvMap.DecodeEnvMap)(loadContext.map, loadContext.exposure, loadContext.useHalfFloat);self.postMessage({ map: loadContext.map, id: loadContext.id }, getTransferables(loadContext.map));}function register(workerMain) {workerMain.register("DECODE_ENVMAP", { doOperation: doDecodeEnvmap });}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.




	CreateCubeMapFromColors = CreateCubeMapFromColors;exports.

































































































































	DecodeEnvMap = DecodeEnvMap;var _three = __webpack_require__(66);var THREE = _interopRequireWildcard(_three);var _HalfFloat = __webpack_require__(68);var _Logger = __webpack_require__(3);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function CreateCubeMapFromColors(ctop, cbot) {var r1 = ctop.x * 255,g1 = ctop.y * 255,b1 = ctop.z * 255,r2 = cbot.x * 255,g2 = cbot.y * 255,b2 = cbot.z * 255;var pixelsTop = new Uint8Array(16);var pixelsBot = new Uint8Array(16);var pixelsSide = new Uint8Array(16);for (var i = 0; i < 4; i++) {pixelsTop[i * 4] = r1;pixelsTop[i * 4 + 1] = g1;pixelsTop[i * 4 + 2] = b1;pixelsTop[i * 4 + 3] = 255;pixelsBot[i * 4] = r2;pixelsBot[i * 4 + 1] = g2;pixelsBot[i * 4 + 2] = b2;pixelsBot[i * 4 + 3] = 255; // was this, which is wild: if (0 | (i / 2)) {
	        if (i > 1) {// color sides 2 and 3 with the first color
	            pixelsSide[i * 4] = r1;pixelsSide[i * 4 + 1] = g1;pixelsSide[i * 4 + 2] = b1;pixelsSide[i * 4 + 3] = 255;} else {// color sides 0 and 1 with the second color
	            pixelsSide[i * 4] = r2;pixelsSide[i * 4 + 1] = g2;pixelsSide[i * 4 + 2] = b2;pixelsSide[i * 4 + 3] = 255;}}var x_neg = new THREE.DataTexture(pixelsSide, 2, 2, THREE.RGBAFormat);var x_pos = new THREE.DataTexture(pixelsSide, 2, 2, THREE.RGBAFormat);var y_neg = new THREE.DataTexture(pixelsBot, 2, 2, THREE.RGBAFormat);var y_pos = new THREE.DataTexture(pixelsTop, 2, 2, THREE.RGBAFormat);var z_neg = new THREE.DataTexture(pixelsSide, 2, 2, THREE.RGBAFormat);var z_pos = new THREE.DataTexture(pixelsSide, 2, 2, THREE.RGBAFormat);var texture = new THREE.Texture(null, THREE.CubeReflectionMapping, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.LinearFilter, THREE.LinearFilter, //THREE.NearestFilter, THREE.NearestFilter,
	    THREE.RGBAFormat);texture.image = [x_pos, x_neg, y_pos, y_neg, z_pos, z_neg];texture.needsUpdate = true;return texture;};var M = [6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268];function LogLuvDecode(dst, src) {var Le = src[2] * 255.0 + src[3];var Xp_Y_XYZp_y = Math.pow(2.0, (Le - 127.0) / 2.0);var Xp_Y_XYZp_z = Xp_Y_XYZp_y / src[1];var Xp_Y_XYZp_x = src[0] * Xp_Y_XYZp_z;var r = M[0] * Xp_Y_XYZp_x + M[3] * Xp_Y_XYZp_y + M[6] * Xp_Y_XYZp_z;var g = M[1] * Xp_Y_XYZp_x + M[4] * Xp_Y_XYZp_y + M[7] * Xp_Y_XYZp_z;var b = M[2] * Xp_Y_XYZp_x + M[5] * Xp_Y_XYZp_y + M[8] * Xp_Y_XYZp_z;if (r < 0) r = 0;if (g < 0) g = 0;if (b < 0) b = 0;dst[0] = r;dst[1] = g;dst[2] = b;}function RGBMEncode(dst, src, expScale) {var r = Math.sqrt(src[0] * expScale) * 0.0625; // 1/16 = 0.0625
	    var g = Math.sqrt(src[1] * expScale) * 0.0625;var b = Math.sqrt(src[2] * expScale) * 0.0625;var maxL = Math.max(Math.max(r, g), Math.max(b, 1e-6));if (maxL > 1.0) maxL = 1.0;var w = Math.ceil(maxL * 255.0) / 255.0;if (r > 1.0) r = 1.0;if (g > 1.0) g = 1.0;if (b > 1.0) b = 1.0;dst[3] = w;var a = 1.0 / w;dst[0] = r * a;dst[1] = g * a;dst[2] = b * a;}function RGB16Encode(dst, src, expScale) {var r = Math.sqrt(src[0] * expScale);var g = Math.sqrt(src[1] * expScale);var b = Math.sqrt(src[2] * expScale); //That's pretty unlikely to happen...
	    var MAX_HALF = 65504;if (r > MAX_HALF) r = MAX_HALF;if (g > MAX_HALF) g = MAX_HALF;if (b > MAX_HALF) b = MAX_HALF;dst[0] = r;dst[1] = g;dst[2] = b;}var tmpSrc = new Float32Array(4);var tmpDst = new Float32Array(4); //Converts incoming environment cube maps to image format suitable for use by the shader.
	function DecodeEnvMap(map, exposure, useHalfFloat, callback) {if (!map.LogLuv) {_Logger.logger.warn("Environment map expected to be in LogLuv format.");return;}var scale = Math.pow(2.0, exposure);

	    // if `map.image` is an array, use it as it is, otherwise create an array with single item (`map.image`) in it
	    var images = Array.isArray(map.image) ? map.image : [map.image];

	    for (var i = 0; i < images.length; i++) {

	        var image = images[i];

	        for (var j = 0; j < image.mipmaps.length; j++) {

	            var mipmap = image.mipmaps[j];

	            var src = mipmap.data;

	            var dst;
	            if (useHalfFloat) {
	                //var dst = new Float32Array(src.length / 4 * 3);
	                dst = new Uint16Array(src.length / 4 * 3);
	                mipmap.data = dst;
	            } else

	            dst = src.buffer;

	            var m = 0;

	            for (var k = 0; k < src.length; k += 4) {

	                tmpSrc[0] = src[k] / 255.0;
	                tmpSrc[1] = src[k + 1] / 255.0;
	                tmpSrc[2] = src[k + 2] / 255.0;
	                tmpSrc[3] = src[k + 3] / 255.0;

	                LogLuvDecode(tmpDst, tmpSrc);

	                if (useHalfFloat) {
	                    //Use sqrt to gamma-compress the data to help the texture filtering
	                    //hardware.
	                    RGB16Encode(tmpSrc, tmpDst, scale);
	                    dst[m++] = (0, _HalfFloat.FloatToHalf)(tmpSrc[0]);
	                    dst[m++] = (0, _HalfFloat.FloatToHalf)(tmpSrc[1]);
	                    dst[m++] = (0, _HalfFloat.FloatToHalf)(tmpSrc[2]);
	                } else {
	                    //Temporary: decode incoming LogLUV environments and convert them
	                    //to RGBM format for use by the shader. Eventually we will use half-float format
	                    //instead, but that has to be better tested.
	                    RGBMEncode(tmpSrc, tmpDst, scale);

	                    src[k] = Math.round(tmpSrc[0] * 255.0);
	                    src[k + 1] = Math.round(tmpSrc[1] * 255.0);
	                    src[k + 2] = Math.round(tmpSrc[2] * 255.0);
	                    src[k + 3] = Math.round(tmpSrc[3] * 255.0);
	                }
	            }

	        }

	    }

	    map.LogLuv = false;

	    if (useHalfFloat) {
	        map.type = THREE.HalfFloatType;
	        map.format = THREE.RGBFormat;
	        map.RGBM = false;
	        map.GammaEncoded = true;
	    } else

	    map.RGBM = true;

	    if (callback)
	    callback(map);
	}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; // File:src/Three.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var THREE = { REVISION: '71' };

	// browserify support

	if (( false ? 'undefined' : _typeof(module)) === 'object') {

		module.exports = THREE;

	}

	// polyfills

	if (Math.sign === undefined) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function (x) {

			return x < 0 ? -1 : x > 0 ? 1 : +x;

		};

	}


	// set the default log handlers
	THREE.log = function () {console.log.apply(console, arguments);};
	THREE.warn = function () {console.warn.apply(console, arguments);};
	THREE.error = function () {console.error.apply(console, arguments);};


	// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button

	THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };

	// GL STATE CONSTANTS

	THREE.CullFaceNone = 0;
	THREE.CullFaceBack = 1;
	THREE.CullFaceFront = 2;
	THREE.CullFaceFrontBack = 3;

	THREE.FrontFaceDirectionCW = 0;
	THREE.FrontFaceDirectionCCW = 1;

	// SHADOWING TYPES

	THREE.BasicShadowMap = 0;
	THREE.PCFShadowMap = 1;
	THREE.PCFSoftShadowMap = 2;

	// MATERIAL CONSTANTS

	// side

	THREE.FrontSide = 0;
	THREE.BackSide = 1;
	THREE.DoubleSide = 2;

	// shading

	THREE.NoShading = 0;
	THREE.FlatShading = 1;
	THREE.SmoothShading = 2;

	// colors

	THREE.NoColors = 0;
	THREE.FaceColors = 1;
	THREE.VertexColors = 2;

	// blending modes

	THREE.NoBlending = 0;
	THREE.NormalBlending = 1;
	THREE.AdditiveBlending = 2;
	THREE.SubtractiveBlending = 3;
	THREE.MultiplyBlending = 4;
	THREE.CustomBlending = 5;

	// custom blending equations
	// (numbers start from 100 not to clash with other
	//  mappings to OpenGL constants defined in Texture.js)

	THREE.AddEquation = 100;
	THREE.SubtractEquation = 101;
	THREE.ReverseSubtractEquation = 102;
	THREE.MinEquation = 103;
	THREE.MaxEquation = 104;

	// custom blending destination factors

	THREE.ZeroFactor = 200;
	THREE.OneFactor = 201;
	THREE.SrcColorFactor = 202;
	THREE.OneMinusSrcColorFactor = 203;
	THREE.SrcAlphaFactor = 204;
	THREE.OneMinusSrcAlphaFactor = 205;
	THREE.DstAlphaFactor = 206;
	THREE.OneMinusDstAlphaFactor = 207;

	// custom blending source factors

	//THREE.ZeroFactor = 200;
	//THREE.OneFactor = 201;
	//THREE.SrcAlphaFactor = 204;
	//THREE.OneMinusSrcAlphaFactor = 205;
	//THREE.DstAlphaFactor = 206;
	//THREE.OneMinusDstAlphaFactor = 207;
	THREE.DstColorFactor = 208;
	THREE.OneMinusDstColorFactor = 209;
	THREE.SrcAlphaSaturateFactor = 210;


	// TEXTURE CONSTANTS

	THREE.MultiplyOperation = 0;
	THREE.MixOperation = 1;
	THREE.AddOperation = 2;

	// Mapping modes

	THREE.UVMapping = 300;

	THREE.CubeReflectionMapping = 301;
	THREE.CubeRefractionMapping = 302;

	THREE.EquirectangularReflectionMapping = 303;
	THREE.EquirectangularRefractionMapping = 304;

	THREE.SphericalReflectionMapping = 305;

	// Wrapping modes

	THREE.RepeatWrapping = 1000;
	THREE.ClampToEdgeWrapping = 1001;
	THREE.MirroredRepeatWrapping = 1002;

	// Filters

	THREE.NearestFilter = 1003;
	THREE.NearestMipMapNearestFilter = 1004;
	THREE.NearestMipMapLinearFilter = 1005;
	THREE.LinearFilter = 1006;
	THREE.LinearMipMapNearestFilter = 1007;
	THREE.LinearMipMapLinearFilter = 1008;

	// Data types

	THREE.UnsignedByteType = 1009;
	THREE.ByteType = 1010;
	THREE.ShortType = 1011;
	THREE.UnsignedShortType = 1012;
	THREE.IntType = 1013;
	THREE.UnsignedIntType = 1014;
	THREE.FloatType = 1015;
	THREE.HalfFloatType = 1025;

	// Pixel types

	//THREE.UnsignedByteType = 1009;
	THREE.UnsignedShort4444Type = 1016;
	THREE.UnsignedShort5551Type = 1017;
	THREE.UnsignedShort565Type = 1018;

	// Pixel formats

	THREE.AlphaFormat = 1019;
	THREE.RGBFormat = 1020;
	THREE.RGBAFormat = 1021;
	THREE.LuminanceFormat = 1022;
	THREE.LuminanceAlphaFormat = 1023;
	// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders
	THREE.RGBEFormat = THREE.RGBAFormat; //1024;

	// DDS / ST3C Compressed texture formats

	THREE.RGB_S3TC_DXT1_Format = 2001;
	THREE.RGBA_S3TC_DXT1_Format = 2002;
	THREE.RGBA_S3TC_DXT3_Format = 2003;
	THREE.RGBA_S3TC_DXT5_Format = 2004;


	// PVRTC compressed texture formats

	THREE.RGB_PVRTC_4BPPV1_Format = 2100;
	THREE.RGB_PVRTC_2BPPV1_Format = 2101;
	THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
	THREE.RGBA_PVRTC_2BPPV1_Format = 2103;


	// DEPRECATED

	THREE.Projector = function () {

		THREE.error('THREE.Projector has been moved to /examples/js/renderers/Projector.js.');

		this.projectVector = function (vector, camera) {

			THREE.warn('THREE.Projector: .projectVector() is now vector.project().');
			vector.project(camera);

		};

		this.unprojectVector = function (vector, camera) {

			THREE.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');
			vector.unproject(camera);

		};

		this.pickingRay = function (vector, camera) {

			THREE.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');

		};

	};

	THREE.CanvasRenderer = function () {

		THREE.error('THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js');

		this.domElement = document.createElement('canvas');
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	};

	// File:src/math/Quaternion.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://exocortex.com
	 */

	THREE.Quaternion = function (x, y, z, w) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = w !== undefined ? w : 1;

	};

	THREE.Quaternion.prototype = {

		constructor: THREE.Quaternion,

		_x: 0, _y: 0, _z: 0, _w: 0,

		get x() {

			return this._x;

		},

		set x(value) {

			this._x = value;
			this.onChangeCallback();

		},

		get y() {

			return this._y;

		},

		set y(value) {

			this._y = value;
			this.onChangeCallback();

		},

		get z() {

			return this._z;

		},

		set z(value) {

			this._z = value;
			this.onChangeCallback();

		},

		get w() {

			return this._w;

		},

		set w(value) {

			this._w = value;
			this.onChangeCallback();

		},

		set: function set(x, y, z, w) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		copy: function copy(quaternion) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function setFromEuler(euler, update) {

			if (euler instanceof THREE.Euler === false) {

				throw new Error('THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
			}

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var c1 = Math.cos(euler._x / 2);
			var c2 = Math.cos(euler._y / 2);
			var c3 = Math.cos(euler._z / 2);
			var s1 = Math.sin(euler._x / 2);
			var s2 = Math.sin(euler._y / 2);
			var s3 = Math.sin(euler._z / 2);

			if (euler.order === 'XYZ') {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if (euler.order === 'YXZ') {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if (euler.order === 'ZXY') {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if (euler.order === 'ZYX') {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if (euler.order === 'YZX') {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if (euler.order === 'XZY') {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if (update !== false) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function setFromAxisAngle(axis, angle) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2,s = Math.sin(halfAngle);

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos(halfAngle);

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function setFromRotationMatrix(m) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

			m11 = te[0],m12 = te[4],m13 = te[8],
			m21 = te[1],m22 = te[5],m23 = te[9],
			m31 = te[2],m32 = te[6],m33 = te[10],

			trace = m11 + m22 + m33,
			s;

			if (trace > 0) {

				s = 0.5 / Math.sqrt(trace + 1.0);

				this._w = 0.25 / s;
				this._x = (m32 - m23) * s;
				this._y = (m13 - m31) * s;
				this._z = (m21 - m12) * s;

			} else if (m11 > m22 && m11 > m33) {

				s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);

				this._w = (m32 - m23) / s;
				this._x = 0.25 * s;
				this._y = (m12 + m21) / s;
				this._z = (m13 + m31) / s;

			} else if (m22 > m33) {

				s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);

				this._w = (m13 - m31) / s;
				this._x = (m12 + m21) / s;
				this._y = 0.25 * s;
				this._z = (m23 + m32) / s;

			} else {

				s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);

				this._w = (m21 - m12) / s;
				this._x = (m13 + m31) / s;
				this._y = (m23 + m32) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

			// assumes direction vectors vFrom and vTo are normalized

			var v1, r;

			var EPS = 0.000001;

			return function (vFrom, vTo) {

				if (v1 === undefined) v1 = new THREE.Vector3();

				r = vFrom.dot(vTo) + 1;

				if (r < EPS) {

					r = 0;

					if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {

						v1.set(-vFrom.y, vFrom.x, 0);

					} else {

						v1.set(0, -vFrom.z, vFrom.y);

					}

				} else {

					v1.crossVectors(vFrom, vTo);

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				this.normalize();

				return this;

			};

		}(),

		inverse: function inverse() {

			this.conjugate().normalize();

			return this;

		},

		conjugate: function conjugate() {

			this._x *= -1;
			this._y *= -1;
			this._z *= -1;

			this.onChangeCallback();

			return this;

		},

		dot: function dot(v) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function lengthSq() {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function length() {

			return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);

		},

		normalize: function normalize() {

			var l = this.length();

			if (l === 0) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function multiply(q, p) {

			if (p !== undefined) {

				THREE.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
				return this.multiplyQuaternions(q, p);

			}

			return this.multiplyQuaternions(this, q);

		},

		multiplyQuaternions: function multiplyQuaternions(a, b) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x,qay = a._y,qaz = a._z,qaw = a._w;
			var qbx = b._x,qby = b._y,qbz = b._z,qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		multiplyVector3: function multiplyVector3(vector) {

			THREE.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
			return vector.applyQuaternion(this);

		},

		slerp: function slerp(qb, t) {

			if (t === 0) return this;
			if (t === 1) return this.copy(qb);

			var x = this._x,y = this._y,z = this._z,w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if (cosHalfTheta < 0) {

				this._w = -qb._w;
				this._x = -qb._x;
				this._y = -qb._y;
				this._z = -qb._z;

				cosHalfTheta = -cosHalfTheta;

			} else {

				this.copy(qb);

			}

			if (cosHalfTheta >= 1.0) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var halfTheta = Math.acos(cosHalfTheta);
			var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

			if (Math.abs(sinHalfTheta) < 0.001) {

				this._w = 0.5 * (w + this._w);
				this._x = 0.5 * (x + this._x);
				this._y = 0.5 * (y + this._y);
				this._z = 0.5 * (z + this._z);

				return this;

			}

			var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
			ratioB = Math.sin(t * halfTheta) / sinHalfTheta;

			this._w = w * ratioA + this._w * ratioB;
			this._x = x * ratioA + this._x * ratioB;
			this._y = y * ratioA + this._y * ratioB;
			this._z = z * ratioA + this._z * ratioB;

			this.onChangeCallback();

			return this;

		},

		equals: function equals(quaternion) {

			return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;

		},

		fromArray: function fromArray(array, offset) {

			if (offset === undefined) offset = 0;

			this._x = array[offset];
			this._y = array[offset + 1];
			this._z = array[offset + 2];
			this._w = array[offset + 3];

			this.onChangeCallback();

			return this;

		},

		toArray: function toArray(array, offset) {

			if (array === undefined) array = [];
			if (offset === undefined) offset = 0;

			array[offset] = this._x;
			array[offset + 1] = this._y;
			array[offset + 2] = this._z;
			array[offset + 3] = this._w;

			return array;

		},

		onChange: function onChange(callback) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function onChangeCallback() {},

		clone: function clone() {

			return new THREE.Quaternion(this._x, this._y, this._z, this._w);

		} };



	THREE.Quaternion.slerp = function (qa, qb, qm, t) {

		return qm.copy(qa).slerp(qb, t);

	};

	// File:src/math/Vector2.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.Vector2 = function (x, y) {

		this.x = x || 0;
		this.y = y || 0;

	};

	THREE.Vector2.prototype = {

		constructor: THREE.Vector2,

		set: function set(x, y) {

			this.x = x;
			this.y = y;

			return this;

		},

		setX: function setX(x) {

			this.x = x;

			return this;

		},

		setY: function setY(y) {

			this.y = y;

			return this;

		},

		setComponent: function setComponent(index, value) {

			switch (index) {

				case 0:this.x = value;break;
				case 1:this.y = value;break;
				default:throw new Error('index is out of range: ' + index);}



		},

		getComponent: function getComponent(index) {

			switch (index) {

				case 0:return this.x;
				case 1:return this.y;
				default:throw new Error('index is out of range: ' + index);}



		},

		copy: function copy(v) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function add(v, w) {

			if (w !== undefined) {

				THREE.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function addScalar(s) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function addVectors(a, b) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		sub: function sub(v, w) {

			if (w !== undefined) {

				THREE.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function subScalar(s) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function subVectors(a, b) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function multiply(v) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function multiplyScalar(s) {

			this.x *= s;
			this.y *= s;

			return this;

		},

		divide: function divide(v) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function divideScalar(scalar) {

			if (scalar !== 0) {

				var invScalar = 1 / scalar;

				this.x *= invScalar;
				this.y *= invScalar;

			} else {

				this.x = 0;
				this.y = 0;

			}

			return this;

		},

		min: function min(v) {

			if (this.x > v.x) {

				this.x = v.x;

			}

			if (this.y > v.y) {

				this.y = v.y;

			}

			return this;

		},

		max: function max(v) {

			if (this.x < v.x) {

				this.x = v.x;

			}

			if (this.y < v.y) {

				this.y = v.y;

			}

			return this;

		},

		clamp: function clamp(min, max) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			if (this.x < min.x) {

				this.x = min.x;

			} else if (this.x > max.x) {

				this.x = max.x;

			}

			if (this.y < min.y) {

				this.y = min.y;

			} else if (this.y > max.y) {

				this.y = max.y;

			}

			return this;
		},

		clampScalar: function () {

			var min, max;

			return function (minVal, maxVal) {

				if (min === undefined) {

					min = new THREE.Vector2();
					max = new THREE.Vector2();

				}

				min.set(minVal, minVal);
				max.set(maxVal, maxVal);

				return this.clamp(min, max);

			};

		}(),

		floor: function floor() {

			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);

			return this;

		},

		ceil: function ceil() {

			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);

			return this;

		},

		round: function round() {

			this.x = Math.round(this.x);
			this.y = Math.round(this.y);

			return this;

		},

		roundToZero: function roundToZero() {

			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);

			return this;

		},

		negate: function negate() {

			this.x = -this.x;
			this.y = -this.y;

			return this;

		},

		dot: function dot(v) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function lengthSq() {

			return this.x * this.x + this.y * this.y;

		},

		length: function length() {

			return Math.sqrt(this.x * this.x + this.y * this.y);

		},

		normalize: function normalize() {

			return this.divideScalar(this.length());

		},

		distanceTo: function distanceTo(v) {

			return Math.sqrt(this.distanceToSquared(v));

		},

		distanceToSquared: function distanceToSquared(v) {

			var dx = this.x - v.x,dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		setLength: function setLength(l) {

			var oldLength = this.length();

			if (oldLength !== 0 && l !== oldLength) {

				this.multiplyScalar(l / oldLength);
			}

			return this;

		},

		lerp: function lerp(v, alpha) {

			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;

			return this;

		},

		lerpVectors: function lerpVectors(v1, v2, alpha) {

			this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);

			return this;

		},

		equals: function equals(v) {

			return v.x === this.x && v.y === this.y;

		},

		fromArray: function fromArray(array, offset) {

			if (offset === undefined) offset = 0;

			this.x = array[offset];
			this.y = array[offset + 1];

			return this;

		},

		toArray: function toArray(array, offset) {

			if (array === undefined) array = [];
			if (offset === undefined) offset = 0;

			array[offset] = this.x;
			array[offset + 1] = this.y;

			return array;

		},

		fromAttribute: function fromAttribute(attribute, index, offset) {

			if (offset === undefined) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[index];
			this.y = attribute.array[index + 1];

			return this;

		},

		clone: function clone() {

			return new THREE.Vector2(this.x, this.y);

		} };



	// File:src/math/Vector3.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Vector3 = function (x, y, z) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	};

	THREE.Vector3.prototype = {

		constructor: THREE.Vector3,

		set: function set(x, y, z) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setX: function setX(x) {

			this.x = x;

			return this;

		},

		setY: function setY(y) {

			this.y = y;

			return this;

		},

		setZ: function setZ(z) {

			this.z = z;

			return this;

		},

		setComponent: function setComponent(index, value) {

			switch (index) {

				case 0:this.x = value;break;
				case 1:this.y = value;break;
				case 2:this.z = value;break;
				default:throw new Error('index is out of range: ' + index);}



		},

		getComponent: function getComponent(index) {

			switch (index) {

				case 0:return this.x;
				case 1:return this.y;
				case 2:return this.z;
				default:throw new Error('index is out of range: ' + index);}



		},

		copy: function copy(v) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function add(v, w) {

			if (w !== undefined) {

				THREE.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function addScalar(s) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function addVectors(a, b) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		sub: function sub(v, w) {

			if (w !== undefined) {

				THREE.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function subScalar(s) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function subVectors(a, b) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function multiply(v, w) {

			if (w !== undefined) {

				THREE.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
				return this.multiplyVectors(v, w);

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function multiplyScalar(scalar) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		},

		multiplyVectors: function multiplyVectors(a, b) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion;

			return function (euler) {

				if (euler instanceof THREE.Euler === false) {

					THREE.error('THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.');

				}

				if (quaternion === undefined) quaternion = new THREE.Quaternion();

				this.applyQuaternion(quaternion.setFromEuler(euler));

				return this;

			};

		}(),

		applyAxisAngle: function () {

			var quaternion;

			return function (axis, angle) {

				if (quaternion === undefined) quaternion = new THREE.Quaternion();

				this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));

				return this;

			};

		}(),

		applyMatrix3: function applyMatrix3(m) {

			var x = this.x;
			var y = this.y;
			var z = this.z;

			var e = m.elements;

			this.x = e[0] * x + e[3] * y + e[6] * z;
			this.y = e[1] * x + e[4] * y + e[7] * z;
			this.z = e[2] * x + e[5] * y + e[8] * z;

			return this;

		},

		applyMatrix4: function applyMatrix4(m) {

			// input: THREE.Matrix4 affine matrix

			var x = this.x,y = this.y,z = this.z;

			var e = m.elements;

			this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
			this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
			this.z = e[2] * x + e[6] * y + e[10] * z + e[14];

			return this;

		},

		applyProjection: function applyProjection(m) {

			// input: THREE.Matrix4 projection matrix

			var x = this.x,y = this.y,z = this.z;

			var e = m.elements;
			var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]); // perspective divide

			this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;
			this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;
			this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;

			return this;

		},

		applyQuaternion: function applyQuaternion(q) {

			var x = this.x;
			var y = this.y;
			var z = this.z;

			var qx = q.x;
			var qy = q.y;
			var qz = q.z;
			var qw = q.w;

			// calculate quat * vector

			var ix = qw * x + qy * z - qz * y;
			var iy = qw * y + qz * x - qx * z;
			var iz = qw * z + qx * y - qy * x;
			var iw = -qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
			this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
			this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

			return this;

		},

		project: function () {

			var matrix;

			return function (camera) {

				if (matrix === undefined) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices(camera.projectionMatrix, matrix.getInverse(camera.matrixWorld));
				return this.applyProjection(matrix);

			};

		}(),

		unproject: function () {

			var matrix;

			return function (camera) {

				if (matrix === undefined) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));
				return this.applyProjection(matrix);

			};

		}(),

		transformDirection: function transformDirection(m) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x,y = this.y,z = this.z;

			var e = m.elements;

			this.x = e[0] * x + e[4] * y + e[8] * z;
			this.y = e[1] * x + e[5] * y + e[9] * z;
			this.z = e[2] * x + e[6] * y + e[10] * z;

			this.normalize();

			return this;

		},

		divide: function divide(v) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function divideScalar(scalar) {

			if (scalar !== 0) {

				var invScalar = 1 / scalar;

				this.x *= invScalar;
				this.y *= invScalar;
				this.z *= invScalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;

			}

			return this;

		},

		min: function min(v) {

			if (this.x > v.x) {

				this.x = v.x;

			}

			if (this.y > v.y) {

				this.y = v.y;

			}

			if (this.z > v.z) {

				this.z = v.z;

			}

			return this;

		},

		max: function max(v) {

			if (this.x < v.x) {

				this.x = v.x;

			}

			if (this.y < v.y) {

				this.y = v.y;

			}

			if (this.z < v.z) {

				this.z = v.z;

			}

			return this;

		},

		clamp: function clamp(min, max) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			if (this.x < min.x) {

				this.x = min.x;

			} else if (this.x > max.x) {

				this.x = max.x;

			}

			if (this.y < min.y) {

				this.y = min.y;

			} else if (this.y > max.y) {

				this.y = max.y;

			}

			if (this.z < min.z) {

				this.z = min.z;

			} else if (this.z > max.z) {

				this.z = max.z;

			}

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function (minVal, maxVal) {

				if (min === undefined) {

					min = new THREE.Vector3();
					max = new THREE.Vector3();

				}

				min.set(minVal, minVal, minVal);
				max.set(maxVal, maxVal, maxVal);

				return this.clamp(min, max);

			};

		}(),

		floor: function floor() {

			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);
			this.z = Math.floor(this.z);

			return this;

		},

		ceil: function ceil() {

			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);
			this.z = Math.ceil(this.z);

			return this;

		},

		round: function round() {

			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
			this.z = Math.round(this.z);

			return this;

		},

		roundToZero: function roundToZero() {

			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
			this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);

			return this;

		},

		negate: function negate() {

			this.x = -this.x;
			this.y = -this.y;
			this.z = -this.z;

			return this;

		},

		dot: function dot(v) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		lengthSq: function lengthSq() {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function length() {

			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);

		},

		lengthManhattan: function lengthManhattan() {

			return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);

		},

		normalize: function normalize() {

			return this.divideScalar(this.length());

		},

		setLength: function setLength(l) {

			var oldLength = this.length();

			if (oldLength !== 0 && l !== oldLength) {

				this.multiplyScalar(l / oldLength);
			}

			return this;

		},

		lerp: function lerp(v, alpha) {

			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;
			this.z += (v.z - this.z) * alpha;

			return this;

		},

		lerpVectors: function lerpVectors(v1, v2, alpha) {

			this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);

			return this;

		},

		cross: function cross(v, w) {

			if (w !== undefined) {

				THREE.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
				return this.crossVectors(v, w);

			}

			var x = this.x,y = this.y,z = this.z;

			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;

			return this;

		},

		crossVectors: function crossVectors(a, b) {

			var ax = a.x,ay = a.y,az = a.z;
			var bx = b.x,by = b.y,bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function () {

			var v1, dot;

			return function (vector) {

				if (v1 === undefined) v1 = new THREE.Vector3();

				v1.copy(vector).normalize();

				dot = this.dot(v1);

				return this.copy(v1).multiplyScalar(dot);

			};

		}(),

		projectOnPlane: function () {

			var v1;

			return function (planeNormal) {

				if (v1 === undefined) v1 = new THREE.Vector3();

				v1.copy(this).projectOnVector(planeNormal);

				return this.sub(v1);

			};

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1;

			return function (normal) {

				if (v1 === undefined) v1 = new THREE.Vector3();

				return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));

			};

		}(),

		angleTo: function angleTo(v) {

			var theta = this.dot(v) / (this.length() * v.length());

			// clamp, to handle numerical problems

			return Math.acos(THREE.Math.clamp(theta, -1, 1));

		},

		distanceTo: function distanceTo(v) {

			return Math.sqrt(this.distanceToSquared(v));

		},

		distanceToSquared: function distanceToSquared(v) {

			var dx = this.x - v.x;
			var dy = this.y - v.y;
			var dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		setEulerFromRotationMatrix: function setEulerFromRotationMatrix(m, order) {

			THREE.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');

		},

		setEulerFromQuaternion: function setEulerFromQuaternion(q, order) {

			THREE.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');

		},

		getPositionFromMatrix: function getPositionFromMatrix(m) {

			THREE.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');

			return this.setFromMatrixPosition(m);

		},

		getScaleFromMatrix: function getScaleFromMatrix(m) {

			THREE.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');

			return this.setFromMatrixScale(m);
		},

		getColumnFromMatrix: function getColumnFromMatrix(index, matrix) {

			THREE.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');

			return this.setFromMatrixColumn(index, matrix);

		},

		setFromMatrixPosition: function setFromMatrixPosition(m) {

			this.x = m.elements[12];
			this.y = m.elements[13];
			this.z = m.elements[14];

			return this;

		},

		setFromMatrixScale: function setFromMatrixScale(m) {

			var sx = this.set(m.elements[0], m.elements[1], m.elements[2]).length();
			var sy = this.set(m.elements[4], m.elements[5], m.elements[6]).length();
			var sz = this.set(m.elements[8], m.elements[9], m.elements[10]).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;
		},

		setFromMatrixColumn: function setFromMatrixColumn(index, matrix) {

			var offset = index * 4;

			var me = matrix.elements;

			this.x = me[offset];
			this.y = me[offset + 1];
			this.z = me[offset + 2];

			return this;

		},

		equals: function equals(v) {

			return v.x === this.x && v.y === this.y && v.z === this.z;

		},

		fromArray: function fromArray(array, offset) {

			if (offset === undefined) offset = 0;

			this.x = array[offset];
			this.y = array[offset + 1];
			this.z = array[offset + 2];

			return this;

		},

		toArray: function toArray(array, offset) {

			if (array === undefined) array = [];
			if (offset === undefined) offset = 0;

			array[offset] = this.x;
			array[offset + 1] = this.y;
			array[offset + 2] = this.z;

			return array;

		},

		fromAttribute: function fromAttribute(attribute, index, offset) {

			if (offset === undefined) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[index];
			this.y = attribute.array[index + 1];
			this.z = attribute.array[index + 2];

			return this;

		},

		clone: function clone() {

			return new THREE.Vector3(this.x, this.y, this.z);

		} };



	// File:src/math/Box2.js

	/**
	 * @author bhouston / http://exocortex.com
	 */

	THREE.Box2 = function (min, max) {

		this.min = min !== undefined ? min : new THREE.Vector2(Infinity, Infinity);
		this.max = max !== undefined ? max : new THREE.Vector2(-Infinity, -Infinity);

	};

	THREE.Box2.prototype = {

		constructor: THREE.Box2,

		set: function set(min, max) {

			this.min.copy(min);
			this.max.copy(max);

			return this;

		},

		setFromPoints: function setFromPoints(points) {

			this.makeEmpty();

			for (var i = 0, il = points.length; i < il; i++) {

				this.expandByPoint(points[i]);

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector2();

			return function (center, size) {

				var halfSize = v1.copy(size).multiplyScalar(0.5);
				this.min.copy(center).sub(halfSize);
				this.max.copy(center).add(halfSize);

				return this;

			};

		}(),

		copy: function copy(box) {

			this.min.copy(box.min);
			this.max.copy(box.max);

			return this;

		},

		makeEmpty: function makeEmpty() {

			this.min.x = this.min.y = Infinity;
			this.max.x = this.max.y = -Infinity;

			return this;

		},

		empty: function empty() {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return this.max.x < this.min.x || this.max.y < this.min.y;

		},

		center: function center(optionalTarget) {

			var result = optionalTarget || new THREE.Vector2();
			return result.addVectors(this.min, this.max).multiplyScalar(0.5);

		},

		size: function size(optionalTarget) {

			var result = optionalTarget || new THREE.Vector2();
			return result.subVectors(this.max, this.min);

		},

		expandByPoint: function expandByPoint(point) {

			this.min.min(point);
			this.max.max(point);

			return this;
		},

		expandByVector: function expandByVector(vector) {

			this.min.sub(vector);
			this.max.add(vector);

			return this;
		},

		expandByScalar: function expandByScalar(scalar) {

			this.min.addScalar(-scalar);
			this.max.addScalar(scalar);

			return this;
		},

		containsPoint: function containsPoint(point) {

			if (point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y) {

				return false;

			}

			return true;

		},

		containsBox: function containsBox(box) {

			if (this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y) {

				return true;

			}

			return false;

		},

		getParameter: function getParameter(point, optionalTarget) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector2();

			return result.set(
			(point.x - this.min.x) / (this.max.x - this.min.x),
			(point.y - this.min.y) / (this.max.y - this.min.y));


		},

		isIntersectionBox: function isIntersectionBox(box) {

			// using 6 splitting planes to rule out intersections.

			if (box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y) {

				return false;

			}

			return true;

		},

		clampPoint: function clampPoint(point, optionalTarget) {

			var result = optionalTarget || new THREE.Vector2();
			return result.copy(point).clamp(this.min, this.max);

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector2();

			return function (point) {

				var clampedPoint = v1.copy(point).clamp(this.min, this.max);
				return clampedPoint.sub(point).length();

			};

		}(),

		intersect: function intersect(box) {

			this.min.max(box.min);
			this.max.min(box.max);

			return this;

		},

		union: function union(box) {

			this.min.min(box.min);
			this.max.max(box.max);

			return this;

		},

		translate: function translate(offset) {

			this.min.add(offset);
			this.max.add(offset);

			return this;

		},

		equals: function equals(box) {

			return box.min.equals(this.min) && box.max.equals(this.max);

		},

		clone: function clone() {

			return new THREE.Box2().copy(this);

		} };



	// File:src/math/Box3.js

	/**
	 * @author bhouston / http://exocortex.com
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Box3 = function (min, max) {

		this.min = min !== undefined ? min : new THREE.Vector3(Infinity, Infinity, Infinity);
		this.max = max !== undefined ? max : new THREE.Vector3(-Infinity, -Infinity, -Infinity);

	};

	THREE.Box3.prototype = {

		constructor: THREE.Box3,

		set: function set(min, max) {

			this.min.copy(min);
			this.max.copy(max);

			return this;

		},

		setFromPoints: function setFromPoints(points) {

			this.makeEmpty();

			for (var i = 0, il = points.length; i < il; i++) {

				this.expandByPoint(points[i]);

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector3();

			return function (center, size) {

				var halfSize = v1.copy(size).multiplyScalar(0.5);

				this.min.copy(center).sub(halfSize);
				this.max.copy(center).add(halfSize);

				return this;

			};

		}(),

		setFromObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and childrens', world transforms

			var v1 = new THREE.Vector3();

			return function (object) {

				var scope = this;

				object.updateMatrixWorld(true);

				this.makeEmpty();

				object.traverse(function (node) {

					var geometry = node.geometry;

					if (geometry !== undefined) {

						if (geometry instanceof THREE.Geometry) {

							var vertices = geometry.vertices;

							for (var i = 0, il = vertices.length; i < il; i++) {

								v1.copy(vertices[i]);

								v1.applyMatrix4(node.matrixWorld);

								scope.expandByPoint(v1);

							}

						} else if (geometry instanceof THREE.BufferGeometry && geometry.attributes['position'] !== undefined) {

							var positions = geometry.attributes['position'].array;

							for (var i = 0, il = positions.length; i < il; i += 3) {

								v1.set(positions[i], positions[i + 1], positions[i + 2]);

								v1.applyMatrix4(node.matrixWorld);

								scope.expandByPoint(v1);

							}

						}

					}

				});

				return this;

			};

		}(),

		copy: function copy(box) {

			this.min.copy(box.min);
			this.max.copy(box.max);

			return this;

		},

		makeEmpty: function makeEmpty() {

			this.min.x = this.min.y = this.min.z = Infinity;
			this.max.x = this.max.y = this.max.z = -Infinity;

			return this;

		},

		empty: function empty() {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;

		},

		center: function center(optionalTarget) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors(this.min, this.max).multiplyScalar(0.5);

		},

		size: function size(optionalTarget) {

			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors(this.max, this.min);

		},

		expandByPoint: function expandByPoint(point) {

			this.min.min(point);
			this.max.max(point);

			return this;

		},

		expandByVector: function expandByVector(vector) {

			this.min.sub(vector);
			this.max.add(vector);

			return this;

		},

		expandByScalar: function expandByScalar(scalar) {

			this.min.addScalar(-scalar);
			this.max.addScalar(scalar);

			return this;

		},

		containsPoint: function containsPoint(point) {

			if (point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z) {

				return false;

			}

			return true;

		},

		containsBox: function containsBox(box) {

			if (this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z) {

				return true;

			}

			return false;

		},

		getParameter: function getParameter(point, optionalTarget) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector3();

			return result.set(
			(point.x - this.min.x) / (this.max.x - this.min.x),
			(point.y - this.min.y) / (this.max.y - this.min.y),
			(point.z - this.min.z) / (this.max.z - this.min.z));


		},

		isIntersectionBox: function isIntersectionBox(box) {

			// using 6 splitting planes to rule out intersections.

			if (box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z) {

				return false;

			}

			return true;

		},

		clampPoint: function clampPoint(point, optionalTarget) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy(point).clamp(this.min, this.max);

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector3();

			return function (point) {

				var clampedPoint = v1.copy(point).clamp(this.min, this.max);
				return clampedPoint.sub(point).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new THREE.Vector3();

			return function (optionalTarget) {

				var result = optionalTarget || new THREE.Sphere();

				result.center = this.center();
				result.radius = this.size(v1).length() * 0.5;

				return result;

			};

		}(),

		intersect: function intersect(box) {

			this.min.max(box.min);
			this.max.min(box.max);

			return this;

		},

		union: function union(box) {

			this.min.min(box.min);
			this.max.max(box.max);

			return this;

		},

		applyMatrix4: function () {

			var points = [
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3()];


			return function (matrix) {

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
				points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
				points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
				points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
				points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
				points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
				points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
				points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111

				this.makeEmpty();
				this.setFromPoints(points);

				return this;

			};

		}(),

		translate: function translate(offset) {

			this.min.add(offset);
			this.max.add(offset);

			return this;

		},

		equals: function equals(box) {

			return box.min.equals(this.min) && box.max.equals(this.max);

		},

		clone: function clone() {

			return new THREE.Box3().copy(this);

		} };



	// File:src/math/Matrix3.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://exocortex.com
	 */

	THREE.Matrix3 = function () {

		this.elements = new Float32Array([

		1, 0, 0,
		0, 1, 0,
		0, 0, 1]);



		if (arguments.length > 0) {

			THREE.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');

		}

	};

	THREE.Matrix3.prototype = {

		constructor: THREE.Matrix3,

		set: function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {

			var te = this.elements;

			te[0] = n11;te[3] = n12;te[6] = n13;
			te[1] = n21;te[4] = n22;te[7] = n23;
			te[2] = n31;te[5] = n32;te[8] = n33;

			return this;

		},

		identity: function identity() {

			this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1);



			return this;

		},

		copy: function copy(m) {

			var me = m.elements;

			this.set(

			me[0], me[3], me[6],
			me[1], me[4], me[7],
			me[2], me[5], me[8]);



			return this;

		},

		multiplyVector3: function multiplyVector3(vector) {

			THREE.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
			return vector.applyMatrix3(this);

		},

		multiplyVector3Array: function multiplyVector3Array(a) {

			THREE.warn('THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');
			return this.applyToVector3Array(a);

		},

		applyToVector3Array: function () {

			var v1 = new THREE.Vector3();

			return function (array, offset, length) {

				if (offset === undefined) offset = 0;
				if (length === undefined) length = array.length;

				for (var i = 0, j = offset; i < length; i += 3, j += 3) {

					v1.x = array[j];
					v1.y = array[j + 1];
					v1.z = array[j + 2];

					v1.applyMatrix3(this);

					array[j] = v1.x;
					array[j + 1] = v1.y;
					array[j + 2] = v1.z;

				}

				return array;

			};

		}(),

		multiplyScalar: function multiplyScalar(s) {

			var te = this.elements;

			te[0] *= s;te[3] *= s;te[6] *= s;
			te[1] *= s;te[4] *= s;te[7] *= s;
			te[2] *= s;te[5] *= s;te[8] *= s;

			return this;

		},

		determinant: function determinant() {

			var te = this.elements;

			var a = te[0],b = te[1],c = te[2],
			d = te[3],e = te[4],f = te[5],
			g = te[6],h = te[7],i = te[8];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function getInverse(matrix, throwOnInvertible) {

			// input: THREE.Matrix4
			// ( based on http://code.google.com/p/webgl-mjs/ )

			var me = matrix.elements;
			var te = this.elements;

			te[0] = me[10] * me[5] - me[6] * me[9];
			te[1] = -me[10] * me[1] + me[2] * me[9];
			te[2] = me[6] * me[1] - me[2] * me[5];
			te[3] = -me[10] * me[4] + me[6] * me[8];
			te[4] = me[10] * me[0] - me[2] * me[8];
			te[5] = -me[6] * me[0] + me[2] * me[4];
			te[6] = me[9] * me[4] - me[5] * me[8];
			te[7] = -me[9] * me[0] + me[1] * me[8];
			te[8] = me[5] * me[0] - me[1] * me[4];

			var det = me[0] * te[0] + me[1] * te[3] + me[2] * te[6];

			// no inverse

			if (det === 0) {

				var msg = "Matrix3.getInverse(): can't invert matrix, determinant is 0";

				if (throwOnInvertible || false) {

					throw new Error(msg);

				} else {

					THREE.warn(msg);

				}

				this.identity();

				return this;

			}

			this.multiplyScalar(1.0 / det);

			return this;

		},

		transpose: function transpose() {

			var tmp,m = this.elements;

			tmp = m[1];m[1] = m[3];m[3] = tmp;
			tmp = m[2];m[2] = m[6];m[6] = tmp;
			tmp = m[5];m[5] = m[7];m[7] = tmp;

			return this;

		},

		flattenToArrayOffset: function flattenToArrayOffset(array, offset) {

			var te = this.elements;

			array[offset] = te[0];
			array[offset + 1] = te[1];
			array[offset + 2] = te[2];

			array[offset + 3] = te[3];
			array[offset + 4] = te[4];
			array[offset + 5] = te[5];

			array[offset + 6] = te[6];
			array[offset + 7] = te[7];
			array[offset + 8] = te[8];

			return array;

		},

		getNormalMatrix: function getNormalMatrix(m) {

			// input: THREE.Matrix4

			this.getInverse(m).transpose();

			return this;

		},

		transposeIntoArray: function transposeIntoArray(r) {

			var m = this.elements;

			r[0] = m[0];
			r[1] = m[3];
			r[2] = m[6];
			r[3] = m[1];
			r[4] = m[4];
			r[5] = m[7];
			r[6] = m[2];
			r[7] = m[5];
			r[8] = m[8];

			return this;

		},

		fromArray: function fromArray(array) {

			this.elements.set(array);

			return this;

		},

		toArray: function toArray() {

			var te = this.elements;

			return [
			te[0], te[1], te[2],
			te[3], te[4], te[5],
			te[6], te[7], te[8]];


		},

		clone: function clone() {

			return new THREE.Matrix3().fromArray(this.elements);

		} };



	// File:src/math/Matrix4.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://exocortex.com
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Matrix4 = function () {

		this.elements = new Float32Array([

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1]);



		if (arguments.length > 0) {

			THREE.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');

		}

	};

	THREE.Matrix4.prototype = {

		constructor: THREE.Matrix4,

		set: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {

			var te = this.elements;

			te[0] = n11;te[4] = n12;te[8] = n13;te[12] = n14;
			te[1] = n21;te[5] = n22;te[9] = n23;te[13] = n24;
			te[2] = n31;te[6] = n32;te[10] = n33;te[14] = n34;
			te[3] = n41;te[7] = n42;te[11] = n43;te[15] = n44;

			return this;

		},

		identity: function identity() {

			this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1);



			return this;

		},

		copy: function copy(m) {

			this.elements.set(m.elements);

			return this;

		},

		extractPosition: function extractPosition(m) {

			THREE.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
			return this.copyPosition(m);

		},

		copyPosition: function copyPosition(m) {

			var te = this.elements;
			var me = m.elements;

			te[12] = me[12];
			te[13] = me[13];
			te[14] = me[14];

			return this;

		},

		extractBasis: function extractBasis(xAxis, yAxis, zAxis) {

			var te = this.elements;

			xAxis.set(te[0], te[1], te[2]);
			yAxis.set(te[4], te[5], te[6]);
			zAxis.set(te[8], te[9], te[10]);

			return this;

		},

		makeBasis: function makeBasis(xAxis, yAxis, zAxis) {

			this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1);


			return this;

		},

		extractRotation: function () {

			var v1 = new THREE.Vector3();

			return function (m) {

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.set(me[0], me[1], me[2]).length();
				var scaleY = 1 / v1.set(me[4], me[5], me[6]).length();
				var scaleZ = 1 / v1.set(me[8], me[9], me[10]).length();

				te[0] = me[0] * scaleX;
				te[1] = me[1] * scaleX;
				te[2] = me[2] * scaleX;

				te[4] = me[4] * scaleY;
				te[5] = me[5] * scaleY;
				te[6] = me[6] * scaleY;

				te[8] = me[8] * scaleZ;
				te[9] = me[9] * scaleZ;
				te[10] = me[10] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function makeRotationFromEuler(euler) {

			if (euler instanceof THREE.Euler === false) {

				THREE.error('THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');

			}

			var te = this.elements;

			var x = euler.x,y = euler.y,z = euler.z;
			var a = Math.cos(x),b = Math.sin(x);
			var c = Math.cos(y),d = Math.sin(y);
			var e = Math.cos(z),f = Math.sin(z);

			if (euler.order === 'XYZ') {

				var ae = a * e,af = a * f,be = b * e,bf = b * f;

				te[0] = c * e;
				te[4] = -c * f;
				te[8] = d;

				te[1] = af + be * d;
				te[5] = ae - bf * d;
				te[9] = -b * c;

				te[2] = bf - ae * d;
				te[6] = be + af * d;
				te[10] = a * c;

			} else if (euler.order === 'YXZ') {

				var ce = c * e,cf = c * f,de = d * e,df = d * f;

				te[0] = ce + df * b;
				te[4] = de * b - cf;
				te[8] = a * d;

				te[1] = a * f;
				te[5] = a * e;
				te[9] = -b;

				te[2] = cf * b - de;
				te[6] = df + ce * b;
				te[10] = a * c;

			} else if (euler.order === 'ZXY') {

				var ce = c * e,cf = c * f,de = d * e,df = d * f;

				te[0] = ce - df * b;
				te[4] = -a * f;
				te[8] = de + cf * b;

				te[1] = cf + de * b;
				te[5] = a * e;
				te[9] = df - ce * b;

				te[2] = -a * d;
				te[6] = b;
				te[10] = a * c;

			} else if (euler.order === 'ZYX') {

				var ae = a * e,af = a * f,be = b * e,bf = b * f;

				te[0] = c * e;
				te[4] = be * d - af;
				te[8] = ae * d + bf;

				te[1] = c * f;
				te[5] = bf * d + ae;
				te[9] = af * d - be;

				te[2] = -d;
				te[6] = b * c;
				te[10] = a * c;

			} else if (euler.order === 'YZX') {

				var ac = a * c,ad = a * d,bc = b * c,bd = b * d;

				te[0] = c * e;
				te[4] = bd - ac * f;
				te[8] = bc * f + ad;

				te[1] = f;
				te[5] = a * e;
				te[9] = -b * e;

				te[2] = -d * e;
				te[6] = ad * f + bc;
				te[10] = ac - bd * f;

			} else if (euler.order === 'XZY') {

				var ac = a * c,ad = a * d,bc = b * c,bd = b * d;

				te[0] = c * e;
				te[4] = -f;
				te[8] = d * e;

				te[1] = ac * f + bd;
				te[5] = a * e;
				te[9] = ad * f - bc;

				te[2] = bc * f - ad;
				te[6] = b * e;
				te[10] = bd * f + ac;

			}

			// last column
			te[3] = 0;
			te[7] = 0;
			te[11] = 0;

			// bottom row
			te[12] = 0;
			te[13] = 0;
			te[14] = 0;
			te[15] = 1;

			return this;

		},

		setRotationFromQuaternion: function setRotationFromQuaternion(q) {

			THREE.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');

			return this.makeRotationFromQuaternion(q);

		},

		makeRotationFromQuaternion: function makeRotationFromQuaternion(q) {

			var te = this.elements;

			var x = q.x,y = q.y,z = q.z,w = q.w;
			var x2 = x + x,y2 = y + y,z2 = z + z;
			var xx = x * x2,xy = x * y2,xz = x * z2;
			var yy = y * y2,yz = y * z2,zz = z * z2;
			var wx = w * x2,wy = w * y2,wz = w * z2;

			te[0] = 1 - (yy + zz);
			te[4] = xy - wz;
			te[8] = xz + wy;

			te[1] = xy + wz;
			te[5] = 1 - (xx + zz);
			te[9] = yz - wx;

			te[2] = xz - wy;
			te[6] = yz + wx;
			te[10] = 1 - (xx + yy);

			// last column
			te[3] = 0;
			te[7] = 0;
			te[11] = 0;

			// bottom row
			te[12] = 0;
			te[13] = 0;
			te[14] = 0;
			te[15] = 1;

			return this;

		},

		lookAt: function () {

			var x = new THREE.Vector3();
			var y = new THREE.Vector3();
			var z = new THREE.Vector3();

			return function (eye, target, up) {

				var te = this.elements;

				z.subVectors(eye, target).normalize();

				if (z.length() === 0) {

					z.z = 1;

				}

				x.crossVectors(up, z).normalize();

				if (x.length() === 0) {

					z.x += 0.0001;
					x.crossVectors(up, z).normalize();

				}

				y.crossVectors(z, x);


				te[0] = x.x;te[4] = y.x;te[8] = z.x;
				te[1] = x.y;te[5] = y.y;te[9] = z.y;
				te[2] = x.z;te[6] = y.z;te[10] = z.z;

				return this;

			};

		}(),

		multiply: function multiply(m, n) {

			if (n !== undefined) {

				THREE.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
				return this.multiplyMatrices(m, n);

			}

			return this.multiplyMatrices(this, m);

		},

		multiplyMatrices: function multiplyMatrices(a, b) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[0],a12 = ae[4],a13 = ae[8],a14 = ae[12];
			var a21 = ae[1],a22 = ae[5],a23 = ae[9],a24 = ae[13];
			var a31 = ae[2],a32 = ae[6],a33 = ae[10],a34 = ae[14];
			var a41 = ae[3],a42 = ae[7],a43 = ae[11],a44 = ae[15];

			var b11 = be[0],b12 = be[4],b13 = be[8],b14 = be[12];
			var b21 = be[1],b22 = be[5],b23 = be[9],b24 = be[13];
			var b31 = be[2],b32 = be[6],b33 = be[10],b34 = be[14];
			var b41 = be[3],b42 = be[7],b43 = be[11],b44 = be[15];

			te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyToArray: function multiplyToArray(a, b, r) {

			var te = this.elements;

			this.multiplyMatrices(a, b);

			r[0] = te[0];r[1] = te[1];r[2] = te[2];r[3] = te[3];
			r[4] = te[4];r[5] = te[5];r[6] = te[6];r[7] = te[7];
			r[8] = te[8];r[9] = te[9];r[10] = te[10];r[11] = te[11];
			r[12] = te[12];r[13] = te[13];r[14] = te[14];r[15] = te[15];

			return this;

		},

		multiplyScalar: function multiplyScalar(s) {

			var te = this.elements;

			te[0] *= s;te[4] *= s;te[8] *= s;te[12] *= s;
			te[1] *= s;te[5] *= s;te[9] *= s;te[13] *= s;
			te[2] *= s;te[6] *= s;te[10] *= s;te[14] *= s;
			te[3] *= s;te[7] *= s;te[11] *= s;te[15] *= s;

			return this;

		},

		multiplyVector3: function multiplyVector3(vector) {

			THREE.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.');
			return vector.applyProjection(this);

		},

		multiplyVector4: function multiplyVector4(vector) {

			THREE.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
			return vector.applyMatrix4(this);

		},

		multiplyVector3Array: function multiplyVector3Array(a) {

			THREE.warn('THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');
			return this.applyToVector3Array(a);

		},

		applyToVector3Array: function () {

			var v1 = new THREE.Vector3();

			return function (array, offset, length) {

				if (offset === undefined) offset = 0;
				if (length === undefined) length = array.length;

				for (var i = 0, j = offset; i < length; i += 3, j += 3) {

					v1.x = array[j];
					v1.y = array[j + 1];
					v1.z = array[j + 2];

					v1.applyMatrix4(this);

					array[j] = v1.x;
					array[j + 1] = v1.y;
					array[j + 2] = v1.z;

				}

				return array;

			};

		}(),

		rotateAxis: function rotateAxis(v) {

			THREE.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');

			v.transformDirection(this);

		},

		crossVector: function crossVector(vector) {

			THREE.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
			return vector.applyMatrix4(this);

		},

		determinant: function determinant() {

			var te = this.elements;

			var n11 = te[0],n12 = te[4],n13 = te[8],n14 = te[12];
			var n21 = te[1],n22 = te[5],n23 = te[9],n24 = te[13];
			var n31 = te[2],n32 = te[6],n33 = te[10],n34 = te[14];
			var n41 = te[3],n42 = te[7],n43 = te[11],n44 = te[15];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
				+n14 * n23 * n32 -
				n13 * n24 * n32 -
				n14 * n22 * n33 +
				n12 * n24 * n33 +
				n13 * n22 * n34 -
				n12 * n23 * n34) +

				n42 * (
				+n11 * n23 * n34 -
				n11 * n24 * n33 +
				n14 * n21 * n33 -
				n13 * n21 * n34 +
				n13 * n24 * n31 -
				n14 * n23 * n31) +

				n43 * (
				+n11 * n24 * n32 -
				n11 * n22 * n34 -
				n14 * n21 * n32 +
				n12 * n21 * n34 +
				n14 * n22 * n31 -
				n12 * n24 * n31) +

				n44 * (
				-n13 * n22 * n31 -
				n11 * n23 * n32 +
				n11 * n22 * n33 +
				n13 * n21 * n32 -
				n12 * n21 * n33 +
				n12 * n23 * n31));




		},

		transpose: function transpose() {

			var te = this.elements;
			var tmp;

			tmp = te[1];te[1] = te[4];te[4] = tmp;
			tmp = te[2];te[2] = te[8];te[8] = tmp;
			tmp = te[6];te[6] = te[9];te[9] = tmp;

			tmp = te[3];te[3] = te[12];te[12] = tmp;
			tmp = te[7];te[7] = te[13];te[13] = tmp;
			tmp = te[11];te[11] = te[14];te[14] = tmp;

			return this;

		},

		flattenToArrayOffset: function flattenToArrayOffset(array, offset) {

			var te = this.elements;

			array[offset] = te[0];
			array[offset + 1] = te[1];
			array[offset + 2] = te[2];
			array[offset + 3] = te[3];

			array[offset + 4] = te[4];
			array[offset + 5] = te[5];
			array[offset + 6] = te[6];
			array[offset + 7] = te[7];

			array[offset + 8] = te[8];
			array[offset + 9] = te[9];
			array[offset + 10] = te[10];
			array[offset + 11] = te[11];

			array[offset + 12] = te[12];
			array[offset + 13] = te[13];
			array[offset + 14] = te[14];
			array[offset + 15] = te[15];

			return array;

		},

		getPosition: function () {

			var v1 = new THREE.Vector3();

			return function () {

				THREE.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');

				var te = this.elements;
				return v1.set(te[12], te[13], te[14]);

			};

		}(),

		setPosition: function setPosition(v) {

			var te = this.elements;

			te[12] = v.x;
			te[13] = v.y;
			te[14] = v.z;

			return this;

		},

		getInverse: function getInverse(m, throwOnInvertible) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements;
			var me = m.elements;

			var n11 = me[0],n12 = me[4],n13 = me[8],n14 = me[12];
			var n21 = me[1],n22 = me[5],n23 = me[9],n24 = me[13];
			var n31 = me[2],n32 = me[6],n33 = me[10],n34 = me[14];
			var n41 = me[3],n42 = me[7],n43 = me[11],n44 = me[15];

			te[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
			te[4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
			te[8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
			te[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
			te[1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
			te[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
			te[9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
			te[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
			te[2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
			te[6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
			te[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
			te[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
			te[3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
			te[7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
			te[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
			te[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;

			var det = n11 * te[0] + n21 * te[4] + n31 * te[8] + n41 * te[12];

			if (det == 0) {

				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

				if (throwOnInvertible || false) {

					throw new Error(msg);

				} else {

					THREE.warn(msg);

				}

				this.identity();

				return this;
			}

			this.multiplyScalar(1 / det);

			return this;

		},

		translate: function translate(v) {

			THREE.error('THREE.Matrix4: .translate() has been removed.');

		},

		rotateX: function rotateX(angle) {

			THREE.error('THREE.Matrix4: .rotateX() has been removed.');

		},

		rotateY: function rotateY(angle) {

			THREE.error('THREE.Matrix4: .rotateY() has been removed.');

		},

		rotateZ: function rotateZ(angle) {

			THREE.error('THREE.Matrix4: .rotateZ() has been removed.');

		},

		rotateByAxis: function rotateByAxis(axis, angle) {

			THREE.error('THREE.Matrix4: .rotateByAxis() has been removed.');

		},

		scale: function scale(v) {

			var te = this.elements;
			var x = v.x,y = v.y,z = v.z;

			te[0] *= x;te[4] *= y;te[8] *= z;
			te[1] *= x;te[5] *= y;te[9] *= z;
			te[2] *= x;te[6] *= y;te[10] *= z;
			te[3] *= x;te[7] *= y;te[11] *= z;

			return this;

		},

		getMaxScaleOnAxis: function getMaxScaleOnAxis() {

			var te = this.elements;

			var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
			var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
			var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];

			return Math.sqrt(Math.max(scaleXSq, Math.max(scaleYSq, scaleZSq)));

		},

		makeTranslation: function makeTranslation(x, y, z) {

			this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1);



			return this;

		},

		makeRotationX: function makeRotationX(theta) {

			var c = Math.cos(theta),s = Math.sin(theta);

			this.set(

			1, 0, 0, 0,
			0, c, -s, 0,
			0, s, c, 0,
			0, 0, 0, 1);



			return this;

		},

		makeRotationY: function makeRotationY(theta) {

			var c = Math.cos(theta),s = Math.sin(theta);

			this.set(

			c, 0, s, 0,
			0, 1, 0, 0,
			-s, 0, c, 0,
			0, 0, 0, 1);



			return this;

		},

		makeRotationZ: function makeRotationZ(theta) {

			var c = Math.cos(theta),s = Math.sin(theta);

			this.set(

			c, -s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1);



			return this;

		},

		makeRotationAxis: function makeRotationAxis(axis, angle) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos(angle);
			var s = Math.sin(angle);
			var t = 1 - c;
			var x = axis.x,y = axis.y,z = axis.z;
			var tx = t * x,ty = t * y;

			this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1);



			return this;

		},

		makeScale: function makeScale(x, y, z) {

			this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1);



			return this;

		},

		compose: function compose(position, quaternion, scale) {

			this.makeRotationFromQuaternion(quaternion);
			this.scale(scale);
			this.setPosition(position);

			return this;

		},

		decompose: function () {

			var vector = new THREE.Vector3();
			var matrix = new THREE.Matrix4();

			return function (position, quaternion, scale) {

				var te = this.elements;

				var sx = vector.set(te[0], te[1], te[2]).length();
				var sy = vector.set(te[4], te[5], te[6]).length();
				var sz = vector.set(te[8], te[9], te[10]).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if (det < 0) {
					sx = -sx;
				}

				position.x = te[12];
				position.y = te[13];
				position.z = te[14];

				// scale the rotation part

				matrix.elements.set(this.elements); // at this point matrix is incomplete so we can't use .copy()

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[0] *= invSX;
				matrix.elements[1] *= invSX;
				matrix.elements[2] *= invSX;

				matrix.elements[4] *= invSY;
				matrix.elements[5] *= invSY;
				matrix.elements[6] *= invSY;

				matrix.elements[8] *= invSZ;
				matrix.elements[9] *= invSZ;
				matrix.elements[10] *= invSZ;

				quaternion.setFromRotationMatrix(matrix);

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makeFrustum: function makeFrustum(left, right, bottom, top, near, far) {

			var te = this.elements;
			var x = 2 * near / (right - left);
			var y = 2 * near / (top - bottom);

			var a = (right + left) / (right - left);
			var b = (top + bottom) / (top - bottom);
			var c = -(far + near) / (far - near);
			var d = -2 * far * near / (far - near);

			te[0] = x;te[4] = 0;te[8] = a;te[12] = 0;
			te[1] = 0;te[5] = y;te[9] = b;te[13] = 0;
			te[2] = 0;te[6] = 0;te[10] = c;te[14] = d;
			te[3] = 0;te[7] = 0;te[11] = -1;te[15] = 0;

			return this;

		},

		makePerspective: function makePerspective(fov, aspect, near, far) {

			var ymax = near * Math.tan(THREE.Math.degToRad(fov * 0.5));
			var ymin = -ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;

			return this.makeFrustum(xmin, xmax, ymin, ymax, near, far);

		},

		makeOrthographic: function makeOrthographic(left, right, top, bottom, near, far) {

			var te = this.elements;
			var w = right - left;
			var h = top - bottom;
			var p = far - near;

			var x = (right + left) / w;
			var y = (top + bottom) / h;
			var z = (far + near) / p;

			te[0] = 2 / w;te[4] = 0;te[8] = 0;te[12] = -x;
			te[1] = 0;te[5] = 2 / h;te[9] = 0;te[13] = -y;
			te[2] = 0;te[6] = 0;te[10] = -2 / p;te[14] = -z;
			te[3] = 0;te[7] = 0;te[11] = 0;te[15] = 1;

			return this;

		},

		fromArray: function fromArray(array) {

			this.elements.set(array);

			return this;

		},

		toArray: function toArray() {

			var te = this.elements;

			return [
			te[0], te[1], te[2], te[3],
			te[4], te[5], te[6], te[7],
			te[8], te[9], te[10], te[11],
			te[12], te[13], te[14], te[15]];


		},

		clone: function clone() {

			return new THREE.Matrix4().fromArray(this.elements);

		} };



	// File:src/math/Sphere.js

	/**
	 * @author bhouston / http://exocortex.com
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Sphere = function (center, radius) {

		this.center = center !== undefined ? center : new THREE.Vector3();
		this.radius = radius !== undefined ? radius : 0;

	};

	THREE.Sphere.prototype = {

		constructor: THREE.Sphere,

		set: function set(center, radius) {

			this.center.copy(center);
			this.radius = radius;

			return this;
		},

		setFromPoints: function () {

			var box = new THREE.Box3();

			return function (points, optionalCenter) {

				var center = this.center;

				if (optionalCenter !== undefined) {

					center.copy(optionalCenter);

				} else {

					box.setFromPoints(points).center(center);

				}

				var maxRadiusSq = 0;

				for (var i = 0, il = points.length; i < il; i++) {

					maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));

				}

				this.radius = Math.sqrt(maxRadiusSq);

				return this;

			};

		}(),

		copy: function copy(sphere) {

			this.center.copy(sphere.center);
			this.radius = sphere.radius;

			return this;

		},

		empty: function empty() {

			return this.radius <= 0;

		},

		containsPoint: function containsPoint(point) {

			return point.distanceToSquared(this.center) <= this.radius * this.radius;

		},

		distanceToPoint: function distanceToPoint(point) {

			return point.distanceTo(this.center) - this.radius;

		},

		intersectsSphere: function intersectsSphere(sphere) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;

		},

		clampPoint: function clampPoint(point, optionalTarget) {

			var deltaLengthSq = this.center.distanceToSquared(point);

			var result = optionalTarget || new THREE.Vector3();
			result.copy(point);

			if (deltaLengthSq > this.radius * this.radius) {

				result.sub(this.center).normalize();
				result.multiplyScalar(this.radius).add(this.center);

			}

			return result;

		},

		getBoundingBox: function getBoundingBox(optionalTarget) {

			var box = optionalTarget || new THREE.Box3();

			box.set(this.center, this.center);
			box.expandByScalar(this.radius);

			return box;

		},

		applyMatrix4: function applyMatrix4(matrix) {

			this.center.applyMatrix4(matrix);
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function translate(offset) {

			this.center.add(offset);

			return this;

		},

		equals: function equals(sphere) {

			return sphere.center.equals(this.center) && sphere.radius === this.radius;

		},

		clone: function clone() {

			return new THREE.Sphere().copy(this);

		} };



	// File:src/math/Frustum.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://exocortex.com
	 */

	THREE.Frustum = function (p0, p1, p2, p3, p4, p5) {

		this.planes = [

		p0 !== undefined ? p0 : new THREE.Plane(),
		p1 !== undefined ? p1 : new THREE.Plane(),
		p2 !== undefined ? p2 : new THREE.Plane(),
		p3 !== undefined ? p3 : new THREE.Plane(),
		p4 !== undefined ? p4 : new THREE.Plane(),
		p5 !== undefined ? p5 : new THREE.Plane()];



	};

	THREE.Frustum.prototype = {

		constructor: THREE.Frustum,

		set: function set(p0, p1, p2, p3, p4, p5) {

			var planes = this.planes;

			planes[0].copy(p0);
			planes[1].copy(p1);
			planes[2].copy(p2);
			planes[3].copy(p3);
			planes[4].copy(p4);
			planes[5].copy(p5);

			return this;

		},

		copy: function copy(frustum) {

			var planes = this.planes;

			for (var i = 0; i < 6; i++) {

				planes[i].copy(frustum.planes[i]);

			}

			return this;

		},

		setFromMatrix: function setFromMatrix(m) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[0],me1 = me[1],me2 = me[2],me3 = me[3];
			var me4 = me[4],me5 = me[5],me6 = me[6],me7 = me[7];
			var me8 = me[8],me9 = me[9],me10 = me[10],me11 = me[11];
			var me12 = me[12],me13 = me[13],me14 = me[14],me15 = me[15];

			planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
			planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
			planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
			planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
			planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
			planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new THREE.Sphere();

			return function (object) {

				var geometry = object.geometry;

				if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

				sphere.copy(geometry.boundingSphere);
				sphere.applyMatrix4(object.matrixWorld);

				return this.intersectsSphere(sphere);

			};

		}(),

		intersectsSphere: function intersectsSphere(sphere) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = -sphere.radius;

			for (var i = 0; i < 6; i++) {

				var distance = planes[i].distanceToPoint(center);

				if (distance < negRadius) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new THREE.Vector3(),
			p2 = new THREE.Vector3();

			return function (box) {

				var planes = this.planes;

				for (var i = 0; i < 6; i++) {

					var plane = planes[i];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint(p1);
					var d2 = plane.distanceToPoint(p2);

					// if both outside plane, no intersection

					if (d1 < 0 && d2 < 0) {

						return false;

					}
				}

				return true;
			};

		}(),


		containsPoint: function containsPoint(point) {

			var planes = this.planes;

			for (var i = 0; i < 6; i++) {

				if (planes[i].distanceToPoint(point) < 0) {

					return false;

				}

			}

			return true;

		},

		clone: function clone() {

			return new THREE.Frustum().copy(this);

		} };



	// File:src/math/Plane.js

	/**
	 * @author bhouston / http://exocortex.com
	 */

	THREE.Plane = function (normal, constant) {

		this.normal = normal !== undefined ? normal : new THREE.Vector3(1, 0, 0);
		this.constant = constant !== undefined ? constant : 0;

	};

	THREE.Plane.prototype = {

		constructor: THREE.Plane,

		set: function set(normal, constant) {

			this.normal.copy(normal);
			this.constant = constant;

			return this;

		},

		setComponents: function setComponents(x, y, z, w) {

			this.normal.set(x, y, z);
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(normal, point) {

			this.normal.copy(normal);
			this.constant = -point.dot(this.normal); // must be this.normal, not normal, as this.normal is normalized

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();

			return function (a, b, c) {

				var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint(normal, a);

				return this;

			};

		}(),


		copy: function copy(plane) {

			this.normal.copy(plane.normal);
			this.constant = plane.constant;

			return this;

		},

		normalize: function normalize() {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar(inverseNormalLength);
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function negate() {

			this.constant *= -1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function distanceToPoint(point) {

			return this.normal.dot(point) + this.constant;

		},

		distanceToSphere: function distanceToSphere(sphere) {

			return this.distanceToPoint(sphere.center) - sphere.radius;

		},

		projectPoint: function projectPoint(point, optionalTarget) {

			return this.orthoPoint(point, optionalTarget).sub(point).negate();

		},

		orthoPoint: function orthoPoint(point, optionalTarget) {

			var perpendicularMagnitude = this.distanceToPoint(point);

			var result = optionalTarget || new THREE.Vector3();
			return result.copy(this.normal).multiplyScalar(perpendicularMagnitude);

		},

		isIntersectionLine: function isIntersectionLine(line) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint(line.start);
			var endSign = this.distanceToPoint(line.end);

			return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;

		},

		intersectLine: function () {

			var v1 = new THREE.Vector3();

			return function (line, optionalTarget) {

				var result = optionalTarget || new THREE.Vector3();

				var direction = line.delta(v1);

				var denominator = this.normal.dot(direction);

				if (denominator == 0) {

					// line is coplanar, return origin
					if (this.distanceToPoint(line.start) == 0) {

						return result.copy(line.start);

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = -(line.start.dot(this.normal) + this.constant) / denominator;

				if (t < 0 || t > 1) {

					return undefined;

				}

				return result.copy(direction).multiplyScalar(t).add(line.start);

			};

		}(),


		coplanarPoint: function coplanarPoint(optionalTarget) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy(this.normal).multiplyScalar(-this.constant);

		},

		applyMatrix4: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
			var m1 = new THREE.Matrix3();

			return function (matrix, optionalNormalMatrix) {

				// compute new normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);
				var newNormal = v1.copy(this.normal).applyMatrix3(normalMatrix);

				var newCoplanarPoint = this.coplanarPoint(v2);
				newCoplanarPoint.applyMatrix4(matrix);

				this.setFromNormalAndCoplanarPoint(newNormal, newCoplanarPoint);

				return this;

			};

		}(),

		translate: function translate(offset) {

			this.constant = this.constant - offset.dot(this.normal);

			return this;

		},

		equals: function equals(plane) {

			return plane.normal.equals(this.normal) && plane.constant == this.constant;

		},

		clone: function clone() {

			return new THREE.Plane().copy(this);

		} };



	// File:src/math/Math.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Math = {

		generateUUID: function () {

			// http://www.broofa.com/Tools/Math.uuid.htm

			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
			var uuid = new Array(36);
			var rnd = 0,r;

			return function () {

				for (var i = 0; i < 36; i++) {

					if (i == 8 || i == 13 || i == 18 || i == 23) {

						uuid[i] = '-';

					} else if (i == 14) {

						uuid[i] = '4';

					} else {

						if (rnd <= 0x02) rnd = 0x2000000 + Math.random() * 0x1000000 | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];

					}
				}

				return uuid.join('');

			};

		}(),

		// Clamp value to range <a, b>

		clamp: function clamp(x, a, b) {

			return x < a ? a : x > b ? b : x;

		},

		// Clamp value to range <a, inf)

		clampBottom: function clampBottom(x, a) {

			return x < a ? a : x;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function mapLinear(x, a1, a2, b1, b2) {

			return b1 + (x - a1) * (b2 - b1) / (a2 - a1);

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function smoothstep(x, min, max) {

			if (x <= min) return 0;
			if (x >= max) return 1;

			x = (x - min) / (max - min);

			return x * x * (3 - 2 * x);

		},

		smootherstep: function smootherstep(x, min, max) {

			if (x <= min) return 0;
			if (x >= max) return 1;

			x = (x - min) / (max - min);

			return x * x * x * (x * (x * 6 - 15) + 10);

		},

		// Random float from <0, 1> with 16 bits of randomness
		// (standard Math.random() creates repetitive patterns when applied over larger space)

		random16: function random16() {

			return (65280 * Math.random() + 255 * Math.random()) / 65535;

		},

		// Random integer from <low, high> interval

		randInt: function randInt(low, high) {

			return Math.floor(this.randFloat(low, high));

		},

		// Random float from <low, high> interval

		randFloat: function randFloat(low, high) {

			return low + Math.random() * (high - low);

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function randFloatSpread(range) {

			return range * (0.5 - Math.random());

		},

		degToRad: function () {

			var degreeToRadiansFactor = Math.PI / 180;

			return function (degrees) {

				return degrees * degreeToRadiansFactor;

			};

		}(),

		radToDeg: function () {

			var radianToDegreesFactor = 180 / Math.PI;

			return function (radians) {

				return radians * radianToDegreesFactor;

			};

		}(),

		isPowerOfTwo: function isPowerOfTwo(value) {

			return (value & value - 1) === 0 && value !== 0;

		},

		nextPowerOfTwo: function nextPowerOfTwo(value) {

			value--;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value++;

			return value;

		} };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)(module)))

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 68 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });var fbuf = new Float32Array(1);
	var ibuf = new Uint32Array(fbuf.buffer);
	var tmp = new Uint16Array(1);
	var hp = new Uint16Array(1);

	var FloatToHalf = exports.FloatToHalf = function FloatToHalf(f) {

	    fbuf[0] = f;
	    var x = ibuf[0];
	    var i = 0;

	    if ((x & 0x7FFFFFFF) === 0) {// Signed zero
	        hp[i++] = x >> 16; // Return the signed zero
	    } else {// Not zero
	        var xs = x & 0x80000000; // Pick off sign bit
	        var xe = x & 0x7F800000; // Pick off exponent bits
	        var xm = x & 0x007FFFFF; // Pick off mantissa bits
	        if (xe === 0) {// Denormal will underflow, return a signed zero
	            hp[i++] = xs >> 16;
	        } else if (xe == 0x7F800000) {// Inf or NaN (all the exponent bits are set)
	            if (xm === 0) {// If mantissa is zero ...
	                hp[i++] = xs >> 16 | 0x7C00; // Signed Inf
	            } else {
	                hp[i++] = 0xFE00; // NaN, only 1st mantissa bit set
	            }
	        } else {// Normalized number
	            var hm, he;
	            var hs = xs >> 16; // Sign bit
	            var hes = (0 | xe >> 23) - 127 + 15; // Exponent unbias the single, then bias the halfp
	            if (hes >= 0x1F) {// Overflow
	                hp[i++] = xs >> 16 | 0x7C00; // Signed Inf
	            } else if (hes <= 0) {// Underflow
	                if (14 - hes > 24) {// Mantissa shifted all the way off & no rounding possibility
	                    hm = 0; // Set mantissa to zero
	                } else {
	                    xm |= 0x00800000; // Add the hidden leading bit
	                    hm = xm >> 14 - hes; // Mantissa
	                    tmp[0] = hm;hm = tmp[0];

	                    if (xm >> 13 - hes & 0x00000001) // Check for rounding
	                        hm += 1; // Round, might overflow into exp bit, but this is OK
	                }
	                hp[i++] = hs | hm; // Combine sign bit and mantissa bits, biased exponent is zero
	            } else {
	                he = hes << 10; // Exponent
	                tmp[0] = he;he = tmp[0];

	                hm = xm >> 13; // Mantissa
	                tmp[0] = hm;hm = tmp[0];

	                if (xm & 0x00001000) // Check for rounding
	                    hp[i++] = (hs | he | hm) + 1; // Round, might overflow to inf, this is OK
	                else
	                    hp[i++] = hs | he | hm; // No rounding
	            }
	        }
	    }

	    return hp[0];
	};


	var HalfToFloat = exports.HalfToFloat = function HalfToFloat(source)
	{
	    var target;

	    var h = source & 0xFFFF;
	    if ((h & 0x7FFF) === 0) {// Signed zero
	        target = h << 16; // Return the signed zero
	    } else {// Not zero
	        var hs = h & 0x8000; // Pick off sign bit
	        var he = h & 0x7C00; // Pick off exponent bits
	        var hm = h & 0x03FF; // Pick off mantissa bits
	        if (he === 0) {// Denormal will convert to normalized
	            var e = -1; // The following loop figures out how much extra to adjust the exponent
	            do {
	                e++;
	                hm <<= 1;
	            } while ((hm & 0x0400) === 0); // Shift until leading bit overflows into exponent bit
	            var xs = hs << 16; // Sign bit
	            var xes = (he << 16 >> 26) - 15 + 127 - e; // Exponent unbias the halfp, then bias the single
	            var xe = xes << 23; // Exponent
	            var xm = (hm & 0x03FF) << 13; // Mantissa
	            target = xs | xe | xm; // Combine sign bit, exponent bits, and mantissa bits
	        } else if (he == 0x7C00) {// Inf or NaN (all the exponent bits are set)
	            if (hm === 0) {// If mantissa is zero ...
	                target = hs << 16 | 0x7F800000; // Signed Inf
	            } else {
	                target = 0xFFC00000; // NaN, only 1st mantissa bit set
	            }
	        } else {// Normalized number
	            xs = hs << 16; // Sign bit
	            xes = (he << 16 >> 26) - 15 + 127; // Exponent unbias the halfp, then bias the single
	            xe = xes << 23; // Exponent
	            xm = hm << 13; // Mantissa
	            target = xs | xe | xm; // Combine sign bit, exponent bits, and mantissa bits
	        }
	    }

	    ibuf[0] = target;
	    return fbuf[0];
	};

	var HALF_INT_MAX = exports.HALF_INT_MAX = 58 * 1024 - 2;

	var IntToHalf = exports.IntToHalf = function IntToHalf(i) {

	    if (i > HALF_INT_MAX - 1 || i < 0) {
	        console.log("out of range");
	        return FloatToHalf(NaN);
	    }

	    if (i === 0)
	    return 0;

	    var negate = false;
	    if (i > HALF_INT_MAX / 2 - 1) {
	        negate = true;
	        i -= HALF_INT_MAX / 2 - 1;
	    }

	    var bucket = Math.abs(i / 1024) | 0;
	    var base = Math.pow(2, bucket - 13);

	    var mapped = base + (i - bucket * 1024) * base / 1024;

	    if (negate)
	    mapped = -mapped;

	    return FloatToHalf(mapped);
	};

	var HalfToInt = exports.HalfToInt = function HalfToInt(half) {

	    if (half === 0)
	    return 0;

	    var f = HalfToFloat(half);

	    var negate = false;
	    if (f < 0) {
	        negate = true;
	        f = -f;
	    }

	    var bucket = 0 | Math.floor(Math.log(f) / Math.log(2));
	    var base = Math.pow(2, bucket);

	    var decoded = (f - base) / base * 1024 + (bucket + 13) * 1024;

	    if (negate)
	    decoded += HALF_INT_MAX / 2 - 1;

	    return decoded;
	};

	var HalfTest = exports.HalfTest = function HalfTest() {

	    var tests = [-1 / 255, -0.17, -75, -1789, -0.005];

	    for (var i = 0; i < tests.length; i++) {

	        console.log("input", tests[i], "encoded", FloatToHalf(tests[i]), "decoded", HalfToFloat(FloatToHalf(tests[i])));

	    }

	    for (var i = 0; i < HALF_INT_MAX; i++) {
	        var roundtrip = HalfToInt(IntToHalf(i));
	        if (roundtrip !== i) {
	            console.log("Roundtrip failed for", i, roundtrip);
	        }
	    }

	};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.










	doGeomMerge = doGeomMerge;exports.

























	register = register;var _LmvMatrix = __webpack_require__(30);var _LmvVector = __webpack_require__(28);var _GeomMergeTask = __webpack_require__(70); /**
	                                                                                                                                                                                                  * Main function of ConsolidationWorker. The purpose of this function is to overtake some time-consuming
	                                                                                                                                                                                                  * work from mergeGeometries (see Consolidation.js), e.g., baking transforms into vertex-positions and normals.
	                                                                                                                                                                                                  *  @param {Object}      context
	                                                                                                                                                                                                  *  @param {MergeTask[]} context.tasks - Each MergeTask provides the input data to process a single consolidated mesh.
	                                                                                                                                                                                                  *                                       See ParallelGeomMerge.js for details.
	                                                                                                                                                                                                  */function doGeomMerge(context) {// Since we are running in the worker script, use LmvVector/LmvMatrix to run the MergeTask
	    var matrix = new _LmvMatrix.LmvMatrix4();var vec = new _LmvVector.LmvVector3();var results = [];for (var i = 0; i < context.tasks.length; i++) {var task = context.tasks[i];var result = _GeomMergeTask.GeomMergeTask.prototype.run.call(task, matrix, vec);results.push(result);} // add result array buffers to transferlist to avoid copying
	    var transferList = [];for (var i = 0; i < results.length; i++) {transferList.push(results[i].vb.buffer);transferList.push(results[i].vertexIds.buffer);} // send back result
	    context.worker.postMessage(results, transferList);}function register(workerMain) {workerMain.register("MERGE_GEOMETRY", { doOperation: doGeomMerge });}

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.











	GeomMergeTask = GeomMergeTask;exports.

























































	writeIdToBuffer = writeIdToBuffer; /**
	                                    * A GeomMergeTask is used for mesh consolidation. It fills vertex buffer and id buffer of a consolidated mesh
	                                    * based on a set of compatible input meshes.
	                                    *
	                                    * GeomMergeTask is shared by main wgs script and worker script, so that the same code can be used for single-threaded
	                                    * and multi-threaded consolidation.
	                                    */ // unique task ids
	var _nextTaskId = 1;function createTaskId() {return _nextTaskId++;}function GeomMergeTask() {// Interleaved vertex buffers as Float32Array.
	    this.vb = null; // floats per vertex
	    this.vbstride = 0; // offsets in floats where to find position/normal in vertex buffer
	    this.posOffset = 0;this.normalOffset = 0; // matrices per src-geom (Float32Array with 16 floats per matrix)
	    this.matrices = null;this.ranges = null; // must be an Uint32Array that we can efficiently hand-over to the worker
	    this.dbIds = null; // unique task-id used to find BufferGeometry when a merged vb is returned from worker
	    this.id = createTaskId();} /**
	                                *  Packs a Vector3 normal vector into 2 components. This is a CPU-side implementation of PackNormalsShaderChunk
	                                *  (see ShaderChunks.js)
	                                *
	                                *   @param {THREE.Vector3|LmvVector3} normal - InOut normal vector.
	                                *
	                                *  Note that 'normal' must be normalized!
	                                */function encodeNormal(normal) {normal.x = 0.5 * (1.0 + Math.atan2(normal.y, normal.x) / Math.PI);normal.y = 0.5 * (1.0 + normal.z);normal.z = 0.0; // not used for result
	} /**
	   * @param {THREE.Vector3|LmvVector3} normal - InOut normal vector. Input z is ignored.
	   */function decodeNormal(normal) {var angX = 2.0 * normal.x - 1.0;var angY = 2.0 * normal.y - 1.0;var scthX = Math.sin(angX * Math.PI);var scthY = Math.cos(angX * Math.PI);var scphiX = Math.sqrt(1.0 - angY * angY);var scphiY = angY;normal.x = scthY * scphiX;normal.y = scthX * scphiX;normal.z = scphiY;} /**
	                                                                                                                                                                                                                                                                                                                   *  Writes a dbId into 4 subsequent bytes of an Uint8Array. (4th is only for alignment and always 0)
	                                                                                                                                                                                                                                                                                                                   *   @param {Number}     dbId
	                                                                                                                                                                                                                                                                                                                   *   @param {Uint8Array} bufferUint8 - view into the vertex buffer that we write to.
	                                                                                                                                                                                                                                                                                                                   *   @param {Number}     writeIndex  - Index into the uint8 array where we write the first byte.
	                                                                                                                                                                                                                                                                                                                   */function writeIdToBuffer(dbId, bufferUint8, writeIndex) {bufferUint8[writeIndex++] = dbId & 0xff;bufferUint8[writeIndex++] = dbId >> 8 & 0xff;bufferUint8[writeIndex++] = dbId >> 16 & 0xff;bufferUint8[writeIndex] = 0; // dbIds are only vec3 in the shader
	} // We don't have THREE.Matrix3 in a worker, so that we cannot use getNormalTransform()
	function getNormalMatrix(matrix, dstMatrix) {// eliminate translation part
	    dstMatrix.copy(matrix);dstMatrix[12] = 0;dstMatrix[13] = 0;dstMatrix[14] = 0; // tranpose of inverse
	    return dstMatrix.getInverse(dstMatrix).transpose();} /**
	                                                          *  Transforms positions and normals of a vertex buffer range.
	                                                          *
	                                                          *  NOTE: Only interleaved buffers with packed normals are supported.
	                                                          *
	                                                          *   @param {GeomInfo}      geom
	                                                          *   @param {Uint16Array}   vbUint16     - additional uint16-view to interleaved vertex-buffer
	                                                          *   @param {LmvMatrix4}    matrix
	                                                          *   @param {Number}        [rangeStart] - First vertex to transform. (default: 0)
	                                                          *   @param {Number}        [rangeEnd]   - End of vertex range.       (default: #vertices)
	                                                          *   @param {LmvMatrix4}    tmpMatrix    - reused tmp matrix
	                                                          *   @param {LmvVector3}    tmpVec       - reused tmp vector
	                                                          */var transformVertexRange = function transformVertexRange(geom, vbUint16, matrix, rangeStart, rangeEnd, tmpMatrix, tmpVec) {// transform positions
	    var posOffset = geom.posOffset;for (var i = rangeStart; i < rangeEnd; i++) {// read vertex position i
	        var offset = i * geom.vbstride + posOffset;tmpVec.set(geom.vb[offset], geom.vb[offset + 1], geom.vb[offset + 2]);tmpVec.applyMatrix4(matrix); // write vertex position i
	        geom.vb[offset] = tmpVec.x;geom.vb[offset + 1] = tmpVec.y;
	        geom.vb[offset + 2] = tmpVec.z;
	    }

	    // transform normals (if available)
	    if (geom.normalOffset !== -1) {

	        // To transform normals, we need an Uint16-view to the data.
	        // Packed normals are 2-component Uint16-vectors.
	        var uint16PerVertex = geom.vbstride * 2; // Multiply by 2, because vbstride and itemOffset
	        var uint16NormalOffset = geom.normalOffset * 2; // are counting 32Bit floats.
	        var maxUint16 = 0xFFFF;

	        // compute normal transform
	        var normalMatrix = getNormalMatrix(matrix, tmpMatrix);

	        // transform normal vectors
	        for (i = rangeStart; i < rangeEnd; i++) {
	            // read byte-normal of vertex i
	            var normalIndex = i * uint16PerVertex + uint16NormalOffset;
	            tmpVec.set(vbUint16[normalIndex], vbUint16[normalIndex + 1], 0.0);

	            // decode to vec3 with components in [0,1]
	            tmpVec.divideScalar(maxUint16);
	            decodeNormal(tmpVec);

	            // Note that normalMatrix is a LmvMatrix4 (although we only use 3x3 matrix)
	            tmpVec.applyMatrix4(normalMatrix);

	            // Note that encodeNormal requires normalized values. Although a decodedNormal is
	            // always normalized, the normalMatrix may involve a scaling.
	            tmpVec.normalize();

	            // encode back to 2-component uint16
	            encodeNormal(tmpVec);
	            tmpVec.multiplyScalar(maxUint16);

	            // write back to vertex buffer
	            vbUint16[normalIndex] = tmpVec.x;
	            vbUint16[normalIndex + 1] = tmpVec.y;
	        }
	    }
	};

	// read matrix i from Float32 array to target LmvMatrix4
	function getMatrix(index, array, target) {
	    // TypedArray.set does not support a srcOffset parameter. So we have to use manual copy here.
	    var offset = 16 * index;
	    for (var i = 0; i < 16; i++) {
	        target.elements[i] = array[i + offset];
	    }
	}

	/**
	   *  Run merge task. This can be done using Vector/Matrix types from THREE (in main) or LmvVector/LmvMatrix (worker).
	   *  To define which types to use while keeping the code independent, a preallocated matrix/vector must be provided.
	   *
	   *  @param {LmvMatrix4|THREE.Matrix4} matrix
	   *  @param {LmvVector3|THREE.Vector3} vector
	   *  @returns {Object} - merge result r, containing
	   *                        {number}       r.id:        task id
	   *                        {Float32Array} r.vb:        merged interleaved vertex buffer
	   *                        {Uint8Array}   r.vertexIds: buffer for separate per-vertex id attribute
	   */
	GeomMergeTask.prototype.run = function (matrix, vec) {

	    var vb = this.vb;
	    var vertexCount = vb.length / this.vbstride;

	    var tmpMatrix = matrix.clone();

	    // create buffer for per-vertex ids of consolidated mesh
	    var IDBytesPerVertex = 3;
	    var dstIds = new Uint8Array(IDBytesPerVertex * vertexCount);

	    // to transform normals, we need an Uint16-view to the interleaved vertex buffer.
	    // packed normals are 2-component Uin16-vectors.
	    var hasNormals = this.normalOffset !== -1;
	    var vbUint16 = hasNormals ? new Uint16Array(vb.buffer, vb.byteOffset, vb.length * 2) : null;

	    // transform vertex-range and write ids. Each range corresponds to a source fragment geometry
	    var ranges = this.ranges;
	    var matrices = this.matrices;
	    var numRanges = ranges.length - 1; // note that ranges contains an extra element for the last range end
	    for (var j = 0; j < numRanges; j++) {

	        // get vertex range corresponding to src geom i
	        var rangeBegin = ranges[j];
	        var rangeEnd = ranges[j + 1];

	        // get matrix for src geom i
	        getMatrix(j, matrices, matrix);

	        // transform vertex positions and normals in this range
	        transformVertexRange(this, vbUint16, matrix, rangeBegin, rangeEnd, tmpMatrix, vec);

	        // assign dbId to all vertices of this range
	        var dstIdsByteOffset = rangeBegin * IDBytesPerVertex;
	        var rangeLength = rangeEnd - rangeBegin;
	        var dbId = this.dbIds[j];
	        for (var k = 0; k < rangeLength; k++) {
	            writeIdToBuffer(dbId, dstIds, dstIdsByteOffset);
	            dstIdsByteOffset += IDBytesPerVertex;
	        }
	    }

	    // return result object. It contains everything we need to finish a single consolidated mesh.
	    return {
	        taskId: this.id,
	        vb: this.vb, // note that we have to pass back the byte-view
	        vertexIds: dstIds };

	};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.







































































































































































































































































































	register = register;var _FrustumIntersector = __webpack_require__(72);var _three = __webpack_require__(66);var THREE = _interopRequireWildcard(_three);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}"use strict";var FRAGMENTS_STRIDE = 6; // not necessary, just for prototyping stats gathering
	//var _stat_weighttime_t1, _stat_weighttime_t0, _stat_sorttime_t1, _stat_sorttime_t0, _stat_rbtime_t1, _stat_rbtime_t0;
	// set to true to show PF list order
	//var _showGeometryPFlist = false;
	/**
	 * All rendering and other scene related data associated with a 3D model or 2D Drawing.
	 * This variant creates a sorted order and render batches based on the frustum view.
	 * @constructor
	 */function SBLOrderCalculator() {var _tmpBox = new THREE.Box3();var _frags;var _buildfragCount;var _pixelCullingThreshold = 1;var _numPFs;var _minPF, _maxPF;var _pfWeight;var _pfInverse;var _fragWeights;var _visibleCount;var _frustum = new _FrustumIntersector.FrustumIntersector();var _frs = new THREE.Frustum();var _changed = true; // number of visible PFs after culling
	    var _pfVisible = 0;this.setFragments = function (fragments) {_frags = fragments;_buildfragCount = fragments.packIds.length;_minPF = Infinity, _maxPF = -Infinity; // Get the pack Id range
	        for (var i = 0; i < _buildfragCount; i++) {var pf = _frags.packIds[i];_minPF = Math.min(_minPF, pf);_maxPF = Math.max(_maxPF, pf);}_numPFs = _maxPF + 1;if (_numPFs < 0) return { error: "Empty fragment list" };_pfWeight = new Float32Array(_numPFs);_pfInverse = new Int32Array(_numPFs);_fragWeights = new Float32Array(_buildfragCount);_visibleCount = _buildfragCount;_changed = true;};function getFragmentBox(index, dst) {var off = index * FRAGMENTS_STRIDE;var src = _frags.boxes;dst.min.x = src[off];dst.min.y = src[off + 1];dst.min.z = src[off + 2];dst.max.x = src[off + 3];dst.max.y = src[off + 4];dst.max.z = src[off + 5];}function weightAndSort() {//_stat_weighttime_t0 = performance.now();
	        var i, tmp;_pfVisible = _numPFs;var pfOrder = new Int32Array(_numPFs);var fragOrder = new Int32Array(_buildfragCount); // by default, the load order is the LMVTK order if no other strategy sets it.
	        for (i = 0; i < _numPFs; i++) {pfOrder[i] = i;}_visibleCount = 0;var pixelCullArea = _pixelCullingThreshold / _frustum.areaConv;var initialWeight = 0;for (i = 0; i < _numPFs; i++) {_pfWeight[i] = initialWeight;}var weight;for (i = 0; i < _buildfragCount; i++) {// For the distance methods, we run through all fragments again and discard ones with weight of 0.
	            // So we must initialize and not throw away without setting the weight to 0.
	            _fragWeights[i] = 0;getFragmentBox(i, _tmpBox);var intersects = _frustum.intersectsBox(_tmpBox); // we always use culling
	            if (intersects !== _FrustumIntersector.FrustumIntersector.OUTSIDE) {// weight by screen size
	                weight = _frustum.projectedBoxArea(_tmpBox, intersects === _FrustumIntersector.FrustumIntersector.CONTAINS); //_fragWeights[i] = BVHModule.box_area(this.finfo.boxes, this.finfo.boxStride*i);
	                // is it not tiny?
	                if (weight > pixelCullArea) {// is strategy sorting by packIds?
	                    _pfWeight[_frags.packIds[i]] += weight;fragOrder[_visibleCount++] = i;}}} //_stat_sorttime_t0 = performance.now();
	        //_first_transparent = _fragCount - _numTransparent;
	        /*
	        if ( _showGeometryPFlist ) {
	            console.log( "Unsorted PF list:" );
	            for (i = 0; i < _numPFs; i++) {
	                console.log( "  geometry PF " + i + " has a weight of " + _pfWeight[i]);
	            }
	        }
	        */ // sort the PF list - needed only if we move to returning the PF order instead of fragments
	        Array.prototype.sort.call(pfOrder, function (a, b) {return _pfWeight[b] - _pfWeight[a];}); //if ( _showGeometryPFlist ) {
	        //    console.log( "Sorted PF list:" );
	        //    for (i = 0; i < _numPFs; i++) {
	        //        console.log( "  " +i+ ": geometry PF " + pfOrder[i] + " has a weight of " + _pfWeight[pfOrder[i]]);
	        //    }
	        //}
	        // Now sort the fragments by their PF order. Give each fragment
	        // the weight of the PF it's in, then sort.
	        // pfOrder is the ideal order for loading PFs, by whatever our criterion is.
	        // Given the packId of the fragment, _frags.packIds[tmp[i]], we
	        // want to set the fragment's weight to the *place* in this "ideal" PF order.
	        // For example, if pfOrder is 12,20,88, it means that any fragment in PF=12
	        // wants a weight of 0, PF=20 a weight of 1, PF=88 a weight of 2, etc.
	        // So we need to take the pfOrder and make the inverse lookup:
	        // _pfInverse[12] = 0, _pfInverse[20] = 1, _pfInverse[88] = 2.
	        // Set the weights to be the PF order numbers, sort low to high.
	        for (i = 0; i < _numPFs && _pfWeight[pfOrder[i]] > 0; i++) {_pfInverse[pfOrder[i]] = i;}_pfVisible = i;tmp = fragOrder.subarray(0, _visibleCount);for (i = 0; i < _visibleCount; i++) {//_fragWeights[i] = pfOrder[_frags.packIds[fragOrder[i]]];
	            _fragWeights[tmp[i]] = _pfInverse[_frags.packIds[tmp[i]]];}Array.prototype.sort.call(tmp, function (a, b) {return _fragWeights[a] - _fragWeights[b];}); // purely for code debugging - walk through all fragments and look for one's position
	        /*
	        for (i = 0; i < _visibleCount; i++) {
	            //_fragWeights[i] = pfOrder[_frags.packIds[fragOrder[i]]];
	            if ( tmp[i] === 7812 )
	                tmp[i] === 7812;
	        }
	        */ //_stat_sorttime_t1 = performance.now();
	        //_stat_weighttime_t1 = performance.now();
	        return { fragOrder: fragOrder, packOrder: pfOrder, pfVisible: _pfVisible };}function buildList() {// given fragment bounding boxes and frustum, figure out a value for each fragment and sort them
	        return weightAndSort();}function frustumsEqual(frs, f2) {var i;for (i = 0; i < 6; i++) {var p1 = frs.planes[i];var p2 = f2.planes[i];if (p1.constant !== p2.constant) return false;if (!p1.normal.equals(p2.normal)) return false;}return true;}this.calculateStep = function () {if (!_changed) return {};_changed = false; //var t0 = performance.now();
	        var loadOrder = buildList(); //var t1 = performance.now();
	        //console.log("SBL total build time: " + trimPrecision(t1 - t0) + " for strategy PACKFILE_SUMMED_EXACT" );
	        //console.log("    for weighting: " + trimPrecision((_stat_weighttime_t1-_stat_weighttime_t0)-(_stat_sorttime_t1-_stat_sorttime_t0))
	        //    + ", for sorting: " + trimPrecision(_stat_sorttime_t1-_stat_sorttime_t0)
	        //    + ", for render batch creation: " + trimPrecision(_stat_rbtime_t1-_stat_rbtime_t0));
	        //
	        //console.log("  PF stats: for " + _numPFs + " PFs, " + _pfVisible + " have anything visible; "
	        //+ trimPrecision(100*_pfVisible/_numPFs) + "% visible.");
	        return loadOrder;}; // for making console.log floats show just a few digits of precision
	    //function trimPrecision(val) {
	    //    var mul = 1;
	    //    if ( val >= 1 ) {
	    //        // two decimal places precision for numbers >= 1
	    //        mul = 100;
	    //    } else {
	    //        // untested... TODO. Idea is to give significant bits, i.e. 0.0001123123
	    //        // should have log10 of -3.9... goes to -4, goes to 4, 10^6 is 1000000,
	    //        // gives 112.3123, rounds to 112, then goes back to 0.000112.
	    //        mul = Math.pow(10,2+Math.floor(-Math.log10(val)));
	    //    }
	    //    return Math.round(val*mul)/mul;
	    //}
	    // restart iterator
	    this.setFrustum = function (camera, cullingThreshold) {_frustum.reset(camera);_changed = _changed || !frustumsEqual(_frs, _frustum.frustum);_frs.copy(_frustum.frustum);if (typeof cullingThreshold == 'number' && _pixelCullingThreshold != cullingThreshold) {_pixelCullingThreshold = cullingThreshold;_changed = true;}return true;};}function calculateLoadOrder(worker, id) {worker.lmv_timer = 0;var result = worker.lmv_calculator.calculateStep();if (result) {var transfer = result.fragOrder ? result.packOrder ? [result.fragOrder.buffer, result.packOrder.buffer] : [result.fragOrder.buffer] : result.packOrder ? [result.packOrder.buffer] : undefined;result.id = id;worker.postMessage(result, transfer);} else {worker.lmv_timer = setTimeout(calculateLoadOrder, 1, worker, id);}}function sendError(worker, error) {if (error) worker.postMessage(error);}function clearWorkTimer(worker) {if (worker.lmv_timer) {clearTimeout(worker.lmv_timer);worker.lmv_timer = 0;}}function doLoadOrder(loadContext) {// Get worker where we keep our work
	    var worker = loadContext.worker;var calculator = worker.lmv_calculator;if (!calculator) worker.lmv_calculator = calculator = new SBLOrderCalculator();clearWorkTimer(worker); // Set the fragment data when we get it
	    if (loadContext.fragments) {sendError(worker, calculator.setFragments(loadContext.fragments));} // Calculate the load order when we get a frustum
	    if (loadContext.camera) {calculator.setFrustum(loadContext.camera, loadContext.pixelCullingThreshold);worker.lmv_timer = setTimeout(calculateLoadOrder, 1, worker, loadContext.id);}}function register(workerMain) {workerMain.register("CALCULATE_LOAD_ORDER", { doOperation: doLoadOrder });}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.CONTAINMENT_UNKNOWN = exports.CONTAINS = exports.INTERSECTS = exports.OUTSIDE = undefined;exports.










































	FrustumIntersector = FrustumIntersector;var _three = __webpack_require__(66);var THREE = _interopRequireWildcard(_three);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}} // Rearranged logically, base 3. X is 1's digit, Y is 10's digit, Z is 100's digit.
	// low/medium/high value is 0/1/2. So the center of the 3x3x3 space is == 111 base 3 == 13.
	// old 64-position code, which is what the comment indices are based on
	// var pos = ((this.eye.x < box.min.x) ?  1 : 0)   // 1 = left
	//         + ((this.eye.x > box.max.x) ?  2 : 0)   // 2 = right
	//         + ((this.eye.y < box.min.y) ?  4 : 0)   // 4 = bottom
	//         + ((this.eye.y > box.max.y) ?  8 : 0)   // 8 = top
	//         + ((this.eye.z < box.min.z) ? 16 : 0)   // 16 = front
	//         + ((this.eye.z > box.max.z) ? 32 : 0);  // 32 = back
	var _boxIndexList = // [27][7]
	[[1, 5, 4, 7, 3, 2, 6], //21 front, bottom, left
	[0, 3, 2, 1, 5, 4, 6], //20 front, bottom
	[0, 3, 2, 6, 5, 4, 6], //22 front, bottom, right
	[0, 4, 7, 3, 2, 1, 6], //17 front, left
	[0, 3, 2, 1, -1, -1, 4], //16 front
	[0, 3, 2, 6, 5, 1, 6], //18 front, right
	[0, 4, 7, 6, 2, 1, 6], //25 front, top, left
	[0, 3, 7, 6, 2, 1, 6], //24 front, top
	[0, 3, 7, 6, 5, 1, 6], //26 front, top, right
	[0, 1, 5, 4, 7, 3, 6], // 5 bottom, left
	[0, 1, 5, 4, -1, -1, 4], // 4 bottom
	[0, 1, 2, 6, 5, 4, 6], // 6 bottom, right
	[0, 4, 7, 3, -1, -1, 4], // 1 left
	[-1, -1, -1, -1, -1, -1, 0], // 0 inside
	[1, 2, 6, 5, -1, -1, 4], // 2 right
	[0, 4, 7, 6, 2, 3, 6], // 9 top, left 
	[2, 3, 7, 6, -1, -1, 4], // 8 top
	[1, 2, 3, 7, 6, 5, 6], //10 top, right
	[0, 1, 5, 6, 7, 3, 6], //37 back, bottom, left
	[0, 1, 5, 6, 7, 4, 6], //36 back, bottom
	[0, 1, 2, 6, 7, 4, 6], //38 back, bottom, right
	[0, 4, 5, 6, 7, 3, 6], //33 back, left
	[4, 5, 6, 7, -1, -1, 4], //32 back
	[1, 2, 6, 7, 4, 5, 6], //34 back, right
	[0, 4, 5, 6, 2, 3, 6], //41 back, top, left
	[2, 3, 7, 4, 5, 6, 6], //40 back, top
	[1, 2, 3, 7, 4, 5, 6] //42 back, top, right
	]; //Encapsulates frustum-box intersection logic
	function FrustumIntersector() {this.frustum = new THREE.Frustum();this.viewProj = new THREE.Matrix4();this.viewDir = [0, 0, 1];this.ar = 1.0;this.viewport = new THREE.Vector3(1, 1, 1);this.areaConv = 1;this.areaCullThreshold = 1; // The pixel size of the object projected on screen, will be culled if less than this value.
	    this.eye = new THREE.Vector3();this.perspective = false; // assume orthographic camera to match viewProj
	}var OUTSIDE = exports.OUTSIDE = 0;var INTERSECTS = exports.INTERSECTS = 1;var CONTAINS = exports.CONTAINS = 2;var CONTAINMENT_UNKNOWN = exports.CONTAINMENT_UNKNOWN = -1;FrustumIntersector.OUTSIDE = OUTSIDE;FrustumIntersector.INTERSECTS = INTERSECTS;FrustumIntersector.CONTAINS = CONTAINS;FrustumIntersector.CONTAINMENT_UNKNOWN = CONTAINMENT_UNKNOWN; // @param {THREE.Vector4[]} [cutPlanes]
	FrustumIntersector.prototype.reset = function (camera, cutPlanes) {this.viewProj.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);this.perspective = camera.isPerspective;this.frustum.setFromMatrix(this.viewProj);var vm = camera.matrixWorldInverse.elements;this.ar = camera.aspect;this.viewDir[0] = -vm[2];this.viewDir[1] = -vm[6];this.viewDir[2] = -vm[10];this.eye.x = camera.position.x;this.eye.y = camera.position.y;this.eye.z = camera.position.z;this.areaConv = camera.clientWidth * camera.clientHeight / 4;this.cutPlanes = cutPlanes;};FrustumIntersector.prototype.projectedArea = function () {var points;var tmpBox;

	    function init_three() {
	        if (!points) {
	            points = [
	            new THREE.Vector3(),
	            new THREE.Vector3(),
	            new THREE.Vector3(),
	            new THREE.Vector3(),
	            new THREE.Vector3(),
	            new THREE.Vector3(),
	            new THREE.Vector3(),
	            new THREE.Vector3()];

	            tmpBox = new THREE.Box2();
	        }
	    }

	    function applyProjection(p, m) {

	        var x = p.x,y = p.y,z = p.z;
	        var e = m.elements;

	        var w = e[3] * x + e[7] * y + e[11] * z + e[15];

	        //This is the difference between this function and
	        //the normal THREE.Vector3.applyProjection. We avoid
	        //inverting the positions of points behind the camera,
	        //otherwise our screen area computation can result in
	        //boxes getting clipped out when they are in fact partially visible.
	        if (w < 0)
	        w = -w;

	        var d = 1.0 / w;

	        p.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;
	        p.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;

	        //We also don't need the Z
	        //p.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;
	    }

	    return function (box) {

	        if (box.empty())
	        return 0;

	        init_three();

	        var matrix = this.viewProj;

	        // NOTE: I am using a binary pattern to specify all 2^3 combinations below
	        points[0].set(box.min.x, box.min.y, box.min.z); // 000
	        points[1].set(box.min.x, box.min.y, box.max.z); // 001
	        points[2].set(box.min.x, box.max.y, box.min.z); // 010
	        points[3].set(box.min.x, box.max.y, box.max.z); // 011
	        points[4].set(box.max.x, box.min.y, box.min.z); // 100
	        points[5].set(box.max.x, box.min.y, box.max.z); // 101
	        points[6].set(box.max.x, box.max.y, box.min.z); // 110
	        points[7].set(box.max.x, box.max.y, box.max.z); // 111

	        for (var i = 0; i < 8; i++) {
	            applyProjection(points[i], matrix);}

	        tmpBox.makeEmpty();
	        tmpBox.setFromPoints(points);

	        // Clamp both min and max value between [-1.0, 1.0]
	        if (tmpBox.min.x < -1.0)
	        tmpBox.min.x = -1.0;
	        if (tmpBox.min.x > 1.0)
	        tmpBox.min.x = 1.0;
	        if (tmpBox.min.y < -1.0)
	        tmpBox.min.y = -1.0;
	        if (tmpBox.min.y > 1.0)
	        tmpBox.min.y = 1.0;

	        if (tmpBox.max.x > 1.0)
	        tmpBox.max.x = 1.0;
	        if (tmpBox.max.x < -1.0)
	        tmpBox.max.x = -1.0;
	        if (tmpBox.max.y > 1.0)
	        tmpBox.max.y = 1.0;
	        if (tmpBox.max.y < -1.0)
	        tmpBox.max.y = -1.0;

	        return (tmpBox.max.x - tmpBox.min.x) * (tmpBox.max.y - tmpBox.min.y);
	    };

	}();

	// A more precise estimator, based on https://github.com/erich666/jgt-code/blob/master/Volume_04/Number_2/Schmalstieg1999/bboxarea.cxx
	// Schmalstieg, Dieter, and Robert F. Tobler, "Fast Projected Area Computation for Three-Dimensional Bounding Boxes," journal of graphics tools, 4(2):37-43, 1999.
	// Note: this code assumes that the silhouette corners will all project to be in front of the viewer. We do Take
	// corrective action if this is not the case, but it's of a "well, negate the value" nature, not a true clip fix.
	// It is assumed that frustum culling has already been applied, so that such cases should be rare.
	// So, for example, a long terrain tile below the viewer may get the corners behind the viewer transformed to be some
	// semi-arbitrary corner locations in front. ProjectedArea has the same problem. Since this method is used just to get
	// a rough idea of the importance of a fragment, we don't spend a lot of time on fixing this. If a corner is detected
	// as behind the eye, we could instead return an area of 4, i.e., it fills the screen.
	FrustumIntersector.prototype.projectedBoxArea = function () {

	    var points, pointsSwap;
	    var sizeClippedPolygon;

	    function init_three() {
	        if (!points) {
	            // maximum of 6 points in silhouette, plus 4 points, one for each clip edge
	            points = [];
	            pointsSwap = [];
	            for (var i = 0; i < 10; i++) {
	                points.push(new THREE.Vector3());
	                pointsSwap.push(new THREE.Vector3());
	            }
	        }
	    }

	    // TODO: same as projectedArea - should this implementation be a derived class? How to do that in javascript?
	    function applyProjection(p, m) {

	        var x = p.x,y = p.y,z = p.z;
	        var e = m.elements;

	        var w = e[3] * x + e[7] * y + e[11] * z + e[15];

	        //This is the difference between this function and
	        //the normal THREE.Vector3.applyProjection. We avoid
	        //inverting the positions of points behind the camera,
	        //otherwise our screen area computation can result in
	        //boxes getting clipped out when they are in fact partially visible.
	        if (w < 0)
	        w = -w;

	        var d = 1.0 / w;

	        p.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;
	        p.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;

	        //We also don't need the Z
	        //p.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;
	    }

	    // Optimized to clip against -1 to 1 NDC in X and Y.
	    // NOTE: this modifies the clipPolygon being passed in, as the
	    // code takes four passes (for each edge of the screen) and ping-pongs
	    // the data between clipPolygon (really, the "points" array) and pointsSwap, a temporary buffer.
	    // Doing so saves us from having to copy data or duplicate code.
	    function clip(clipPolygon, sizePolygon) {
	        var polygonSource = clipPolygon;
	        var polygonDest = pointsSwap;
	        var polygonSwap;
	        var prevPt, thisPt, prevIn, thisIn;
	        var numPt, numClip;
	        var newSizePolygon;

	        var testInside = function testInside(pt) {
	            switch (numClip) {
	                case 0:
	                    return pt.x >= -1;
	                case 1:
	                    return pt.x <= 1;
	                case 2:
	                    return pt.y >= -1;
	                case 3:
	                    return pt.y <= 1;}

	        };
	        var savePoint = function savePoint(pt) {
	            polygonDest[newSizePolygon].x = pt.x;
	            polygonDest[newSizePolygon++].y = pt.y;
	        };
	        var saveIntersect = function saveIntersect() {
	            var ptx, pty;
	            switch (numClip) {
	                case 0:
	                    ptx = -1;
	                    pty = prevPt.y + (thisPt.y - prevPt.y) * (ptx - prevPt.x) / (thisPt.x - prevPt.x);
	                    break;
	                case 1:
	                    ptx = 1;
	                    pty = prevPt.y + (thisPt.y - prevPt.y) * (ptx - prevPt.x) / (thisPt.x - prevPt.x);
	                    break;
	                case 2:
	                    pty = -1;
	                    ptx = prevPt.x + (thisPt.x - prevPt.x) * (pty - prevPt.y) / (thisPt.y - prevPt.y);
	                    break;
	                case 3:
	                    pty = 1;
	                    ptx = prevPt.x + (thisPt.x - prevPt.x) * (pty - prevPt.y) / (thisPt.y - prevPt.y);
	                    break;}

	            polygonDest[newSizePolygon].x = ptx;
	            polygonDest[newSizePolygon++].y = pty;
	        };

	        // If polygon size <= 2, it will have no area, so don't care. We need this test to avoid
	        // access polygonSource[-1] when size === 0.
	        for (numClip = 0; numClip < 4 && sizePolygon > 2; numClip++) {
	            newSizePolygon = 0;
	            prevPt = polygonSource[sizePolygon - 1];
	            prevIn = testInside(prevPt);
	            for (numPt = 0; numPt < sizePolygon; numPt++) {
	                thisPt = polygonSource[numPt];
	                thisIn = testInside(thisPt);
	                if (prevIn) {
	                    if (thisIn) {
	                        // edge is entirely in - save point
	                        savePoint(thisPt);
	                    } else {
	                        // edge is exiting - save intersection
	                        saveIntersect();
	                    }
	                } else {
	                    // edge starts out
	                    if (thisIn) {
	                        // edge is entering - save intersection and point
	                        saveIntersect();
	                        savePoint(thisPt);
	                    }
	                    //else {
	                    // edge is still out - save nothing
	                    //}
	                }
	                prevPt = thisPt;
	                prevIn = thisIn;
	            }

	            // swap for next round
	            sizePolygon = newSizePolygon;
	            polygonSwap = polygonSource;
	            polygonSource = polygonDest;
	            polygonDest = polygonSwap;
	        }
	        sizeClippedPolygon = sizePolygon;
	        return polygonSource;
	    }

	    // if not specified, perform clip
	    return function (box, doNotClip) {

	        if (box.empty())
	        return 0;

	        init_three();

	        var matrix = this.viewProj;

	        //compute the array index to classify eye with respect to the 6 defining planes
	        //of the bbox, 0-26
	        var pos;
	        if (this.perspective) {
	            if (this.eye.x >= box.min.x) {
	                pos = this.eye.x > box.max.x ? 2 : 1;
	            } else {
	                pos = 0;
	            }
	            if (this.eye.y >= box.min.y) {
	                pos += this.eye.y > box.max.y ? 6 : 3;
	            }
	            if (this.eye.z >= box.min.z) {
	                pos += this.eye.z > box.max.z ? 18 : 9;
	            }
	        } else {
	            if (this.viewDir[0] <= 0) {
	                pos = this.viewDir[0] < 0 ? 2 : 1;
	            } else {
	                pos = 0;
	            }
	            if (this.viewDir[1] <= 0) {
	                pos += this.viewDir[1] < 0 ? 6 : 3;
	            }
	            if (this.viewDir[2] <= 0) {
	                pos += this.viewDir[2] < 0 ? 18 : 9;
	            }
	        }

	        // 13 indicates eye location is inside box, index 1+3+9, so return full screen area
	        if (pos === 13) {
	            return 4;
	        }
	        var num = _boxIndexList[pos][6]; //look up number of vertices in outline

	        //generate 8 corners of the bbox, as needed
	        // run through "num" points and create and transform just those
	        var i;
	        for (i = 0; i < num; i++) {
	            var idx = _boxIndexList[pos][i];
	            // tricksiness here: order is (though this is left-handed; we use right-handed)
	            // (min[0],min[1],min[2]); //     7+------+6
	            // (max[0],min[1],min[2]); //     /|     /|
	            // (max[0],max[1],min[2]); //    / |    / |
	            // (min[0],max[1],min[2]); //   / 4+---/--+5
	            // (min[0],min[1],max[2]); // 3+------+2 /    y   z
	            // (max[0],min[1],max[2]); //  | /    | /     |  /
	            // (max[0],max[1],max[2]); //  |/     |/      |/
	            // (min[0],max[1],max[2]); // 0+------+1      *---x

	            points[i].set(
	            (idx + 1) % 4 < 2 ? box.min.x : box.max.x,
	            idx % 4 < 2 ? box.min.y : box.max.y,
	            idx < 4 ? box.min.z : box.max.z);

	            applyProjection(points[i], matrix);
	        }

	        var sum = 0;
	        // always clip if needed; TODO: make more efficient, i.e., don't alloc each time.
	        if (doNotClip) {
	            sum = (points[num - 1].x - points[0].x) * (points[num - 1].y + points[0].y);
	            for (i = 0; i < num - 1; i++) {
	                sum += (points[i].x - points[i + 1].x) * (points[i].y + points[i + 1].y);}
	        } else {
	            var clippedPolygon = clip(points, num);
	            // see if clipped polygon has anything returned at all; if not, area is 0
	            if (sizeClippedPolygon >= 3) {
	                sum = (clippedPolygon[sizeClippedPolygon - 1].x - clippedPolygon[0].x) * (clippedPolygon[sizeClippedPolygon - 1].y + clippedPolygon[0].y);
	                for (i = 0; i < sizeClippedPolygon - 1; i++) {
	                    sum += (clippedPolygon[i].x - clippedPolygon[i + 1].x) * (clippedPolygon[i].y + clippedPolygon[i + 1].y);}
	            }
	        }

	        // avoid winding order left-handed/right-handed headaches by taking abs(); fixes clockwise loops
	        return Math.abs(sum * 0.5); //return computed value corrected by 0.5
	    };

	}();

	FrustumIntersector.prototype.estimateDepth = function (bbox) {

	    var e = this.viewProj.elements;

	    // Take center of box and find its distance from the eye.
	    var x = (bbox.min.x + bbox.max.x) / 2.0;
	    var y = (bbox.min.y + bbox.max.y) / 2.0;
	    var z = (bbox.min.z + bbox.max.z) / 2.0;

	    // not used: var w = e[3] * x + e[7] * y + e[11] * z + e[15];

	    var d = 1.0 / (e[3] * x + e[7] * y + e[11] * z + e[15]);

	    return (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;

	};

	FrustumIntersector.prototype.intersectsBox = function () {

	    //Copied from three.js and modified to return separate
	    //value for full containment versus intersection.
	    //Return values: 0 -> outside, 1 -> intersects, 2 -> contains
	    var p1, p2;

	    function init_three() {
	        if (!p1) {
	            p1 = new THREE.Vector3();
	            p2 = new THREE.Vector3();
	        }
	    }

	    return function (box) {

	        init_three();

	        var planes = this.frustum.planes;
	        var contained = 0;

	        for (var i = 0; i < 6; i++) {

	            var plane = planes[i];

	            p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
	            p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
	            p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
	            p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
	            p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
	            p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

	            var d1 = plane.distanceToPoint(p1);
	            var d2 = plane.distanceToPoint(p2);

	            // if both outside plane, no intersection

	            if (d1 < 0 && d2 < 0) {

	                return FrustumIntersector.OUTSIDE;

	            }

	            if (d1 > 0 && d2 > 0) {

	                contained++;

	            }
	        }

	        return contained == 6 ? FrustumIntersector.CONTAINS : FrustumIntersector.INTERSECTS;
	    };


	}();

	function getCorner(box, i, target) {
	    target.x = i & 1 ? box.max.x : box.min.x;
	    target.y = i & 2 ? box.max.y : box.min.y;
	    target.z = i & 4 ? box.max.z : box.min.z;
	    return target;
	}

	function pointOutsideCutPlane(point, cutPlane) {
	    var dp = point.x * cutPlane.x + point.y * cutPlane.y + point.z * cutPlane.z + cutPlane.w;
	    return dp > 1e-6;
	}

	var boxOutsideCutPlane = function () {

	    var _tmp;
	    return function (box, plane) {

	        if (!_tmp) _tmp = new THREE.Vector3();

	        // for each corner...
	        for (var i = 0; i < 8; i++) {
	            // stop if corner i is outside
	            var corner = getCorner(box, i, _tmp);
	            if (!pointOutsideCutPlane(corner, plane)) {
	                return false;
	            }
	        }
	        // all corners are in the outer half-space
	        return true;
	    };
	}();

	// Returns true if the given box is fully in the outer half-space of an active cut plane
	FrustumIntersector.prototype.boxOutsideCutPlanes = function (box) {
	    if (!this.cutPlanes) {
	        return false;
	    }

	    for (var i = 0; i < this.cutPlanes.length; i++) {
	        var plane = this.cutPlanes[i];
	        if (boxOutsideCutPlane(box, plane)) {
	            return true;
	        }
	    }
	    return false;
	};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.






	doDecompressDelta = doDecompressDelta;exports.























	register = register;var _base = __webpack_require__(74);var base64 = _interopRequireWildcard(_base);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}var pako = __webpack_require__(8); //FUSION SPECIFIC
	function doDecompressDelta(loadContext) {var _this = loadContext.worker; // Step1:decode the compressed data
	    var compressData = base64.decode(loadContext.delta);compressData = compressData.split('').map(function (e) {return e.charCodeAt(0);}); //Step2:decompress the data
	    var output = pako.inflate(compressData); //Step3:convert byte array to string
	    var json = "";for (var i = 0; i < output.length; i++) {json += String.fromCharCode(output[i]);} //Step4:parse scene json
	    json = JSON.parse(json);_this.postMessage({ cbId: loadContext.cbId, index: loadContext.index, res: json });}function register(workerMain) {workerMain.register("DECOMPRESS_DELTA", { doOperation: doDecompressDelta });}

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; /*! https://mths.be/base64 v<%= version %> by @mathias | MIT license */
	;(function (root) {

		// Detect free variables `exports`.
		var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports;

		// Detect free variable `module`.
		var freeModule = ( false ? 'undefined' : _typeof(module)) == 'object' && module &&
		module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code, and use
		// it as `root`.
		var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var InvalidCharacterError = function InvalidCharacterError(message) {
			this.message = message;
		};
		InvalidCharacterError.prototype = new Error();
		InvalidCharacterError.prototype.name = 'InvalidCharacterError';

		var error = function error(message) {
			// Note: the error messages used throughout this file match those used by
			// the native `atob`/`btoa` implementation in Chromium.
			throw new InvalidCharacterError(message);
		};

		var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		// http://whatwg.org/html/common-microsyntaxes.html#space-character
		var REGEX_SPACE_CHARACTERS = /<%= spaceCharacters %>/g;

		// `decode` is designed to be fully compatible with `atob` as described in the
		// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
		// The optimized base64-decoding algorithm used is based on @atk’s excellent
		// implementation. https://gist.github.com/atk/1020396
		var decode = function decode(input) {
			input = String(input).
			replace(REGEX_SPACE_CHARACTERS, '');
			var length = input.length;
			if (length % 4 == 0) {
				input = input.replace(/==?$/, '');
				length = input.length;
			}
			if (
			length % 4 == 1 ||
			// http://whatwg.org/C#alphanumeric-ascii-characters
			/[^+a-zA-Z0-9/]/.test(input))
			{
				error(
				'Invalid character: the string to be decoded is not correctly encoded.');

			}
			var bitCounter = 0;
			var bitStorage;
			var buffer;
			var output = '';
			var position = -1;
			while (++position < length) {
				buffer = TABLE.indexOf(input.charAt(position));
				bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
				// Unless this is the first of a group of 4 characters…
				if (bitCounter++ % 4) {
					// …convert the first 8 bits to a single ASCII character.
					output += String.fromCharCode(
					0xFF & bitStorage >> (-2 * bitCounter & 6));

				}
			}
			return output;
		};

		// `encode` is designed to be fully compatible with `btoa` as described in the
		// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
		var encode = function encode(input) {
			input = String(input);
			if (/[^\0-\xFF]/.test(input)) {
				// Note: no need to special-case astral symbols here, as surrogates are
				// matched, and the input is supposed to only contain ASCII anyway.
				error(
				'The string to be encoded contains characters outside of the ' +
				'Latin1 range.');

			}
			var padding = input.length % 3;
			var output = '';
			var position = -1;
			var a;
			var b;
			var c;
			var d;
			var buffer;
			// Make sure any padding is handled outside of the loop.
			var length = input.length - padding;

			while (++position < length) {
				// Read three bytes, i.e. 24 bits.
				a = input.charCodeAt(position) << 16;
				b = input.charCodeAt(++position) << 8;
				c = input.charCodeAt(++position);
				buffer = a + b + c;
				// Turn the 24 bits into four chunks of 6 bits each, and append the
				// matching character for each of them to the output.
				output +=
				TABLE.charAt(buffer >> 18 & 0x3F) +
				TABLE.charAt(buffer >> 12 & 0x3F) +
				TABLE.charAt(buffer >> 6 & 0x3F) +
				TABLE.charAt(buffer & 0x3F);

			}

			if (padding == 2) {
				a = input.charCodeAt(position) << 8;
				b = input.charCodeAt(++position);
				buffer = a + b;
				output +=
				TABLE.charAt(buffer >> 10) +
				TABLE.charAt(buffer >> 4 & 0x3F) +
				TABLE.charAt(buffer << 2 & 0x3F) +
				'=';

			} else if (padding == 1) {
				buffer = input.charCodeAt(position);
				output +=
				TABLE.charAt(buffer >> 2) +
				TABLE.charAt(buffer << 4 & 0x3F) +
				'==';

			}

			return output;
		};

		var base64 = {
			'encode': encode,
			'decode': decode,
			'version': '<%= version %>' };


		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
		"function" == 'function' &&
		_typeof(__webpack_require__(75)) == 'object' &&
		__webpack_require__(75))
		{
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return base64;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && !freeExports.nodeType) {
			if (freeModule) {// in Node.js or RingoJS v0.8.0+
				freeModule.exports = base64;
			} else {// in Narwhal or RingoJS v0.7.0-
				for (var key in base64) {
					base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
				}
			}
		} else {// in Rhino or a web browser
			root.base64 = base64;
		}

	})(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)(module), (function() { return this; }())))

/***/ }),
/* 75 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * ScalarisWorker - read Scalaris format
	 * Protofile format: https://git.autodesk.com/Chimera/components-ProtoFile.
	 * Protofile: refrer to res/protobuf/scalaris.proto
	 */
	"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.


























































































































































































































































































































































































































































































	register = register;var _ErrorCodes = __webpack_require__(6);var _Xhr = __webpack_require__(2);var _LmvVector = __webpack_require__(28);var protobuf = __webpack_require__(77);var ByteBuffer = __webpack_require__(121);function guardFunction(loadContext, func) {try {func();} catch (exc) {loadContext.worker.raiseError(_ErrorCodes.ErrorCodes.BAD_DATA, "Unhandled exception while loading Scalaris data", { "url": loadContext.url, "exception": exc.toString(), "stack": exc.stack });loadContext.worker.postMessage(null);}}function doLoadScalaris(loadContext) {var _this = loadContext.worker;_this.postMessage({ progress: 0.01 }); //Tell the main thread we are alive
	  function onSuccess(result) {guardFunction(loadContext, function () {var geometry = parseScalarisData(loadContext, result);if (geometry) {var message = { geometry: { indices: geometry.attributes.index.array.buffer, normals: geometry.attributes.normal.array.buffer, vertices: geometry.attributes.position.array.buffer, meshCount: 1, offsets: geometry.offsets, min: geometry.min, max: geometry.max, stressMin: geometry.stressMin, stressMax: geometry.stressMax, stressData: geometry.stressData } };self.postMessage(message, [message.geometry.indices, message.geometry.normals, message.geometry.vertices]);}_this.postMessage({ progress: 1 });});}var splitUrl = loadContext.url.split('?');var url = splitUrl[0];loadContext.queryParams = loadContext.queryParams ? loadContext.queryParams + '&' + splitUrl[1] : splitUrl[1];var options = { responseType: "arraybuffer" };function loadProto(file) {return new Promise(function (resolve, reject) {protobuf.load(file, function (err, root) {resolve(root);});});}loadProto(loadContext.scalarisProtoPath).then(function (root) {_this.root = root;_Xhr.ViewingService.getItem(loadContext, url, onSuccess, loadContext.onFailureCallback, options);});} // ----------------------------------------------------------------------------
	// Scalaris type registery (message's index + message’s name)
	var messageTypes = { 0: "Mesh", 1: "ElementData", 2: "NodeData", 3: "Scalar", 4: "ValueData", 5: "StringData", 6: "Texture" };var ReadContext = function ReadContext(root, onProgress) {this.m_protoRoot = root;this.m_prefixParsed = false;this.m_headerParsed = false;this.m_data = null;this.m_onProgress = function () {if (this.m_data && onProgress) {var progress = this.m_data.offset / this.m_data.limit; // In doLoadScalaris() we set an initial progress=0.01, and we finish off with progress=1,
	      // so we want all of our intermediate progress values to fall in between.
	      onProgress(Math.max(0.01, Math.min(progress, 0.999)));}};this.m_vertices = null;this.m_triangles = null;this.m_vertexNormals = null;this.m_faceNormals = null;this.m_vertexColors = null;this.m_vmStress = null;this.m_min = new _LmvVector.LmvVector3(Infinity, Infinity, Infinity);this.m_max = new _LmvVector.LmvVector3(-Infinity, -Infinity, -Infinity);this.m_stressMin = Infinity;this.m_stressMax = -Infinity;this.m_refs = {};};ReadContext.prototype.constructor = ReadContext;ReadContext.prototype.parseData = function (data) {this.m_data = data;return this.doParseData(false);};ReadContext.prototype.flush = function () {this.doParseData(true);};ReadContext.prototype.doParseData = function (flsh) {// Prefix (preamble)
	  if (!this.m_prefixParsed && (!this.doParsePrefix(flsh) || !this.m_data.remaining())) {return false;} // Header.
	  if (!this.m_headerParsed && (!this.doParseHeader(flsh) || !this.m_data.remaining())) {return false;} // Payload is a sequence of:
	  // -> varint32 message index,
	  // -> varint32 message size,
	  // -> encoded message of the specified size and type.
	  while (this.m_data.remaining()) {// Stop if we don't have enough data (unless flushing).
	    if (!flsh && this.m_data.remaining() < 32) {break;} // Try to read the next message.
	    var msgRead = false; // Read the message index and data size.
	    var msgIndex = this.m_data.readVarint32();var dataSize = this.m_data.readVarint32();var remaining = this.m_data.remaining();if (dataSize <= remaining) {// Handle the message.
	      this.handleMessage(msgIndex, dataSize);msgRead = true;} // Update the offset.
	    if (msgRead) {this.m_data.skip(dataSize);} else {// Wait for more data.
	      break;}this.m_onProgress();}return true;};ReadContext.prototype.doParsePrefix = function (flsh) {// Stop if we don't have enough data (unless flushing).
	  if (!flsh && this.m_data.remaining() < 8) {return false;} // Try to read the prefix (preamble).
	  // Preamble format:
	  // -> a 4-byte little-endian magic number,
	  // -> a 4-byte little-endian metadata size,
	  // -> a non-null-terminated JSON string of the specified size.
	  var magic = this.m_data.readUint32(); //console.log("Magic number =", magic.toString(16));
	  if (magic !== 0x1972) {console.log("\n Invalid Scalaris file.");return false;}var metadataSize = this.m_data.readUint32(); // Read the prefix if possible.
	  var remaining = this.m_data.remaining();if (metadataSize <= remaining) {// TODO: readString(metadataSize) and do something with it
	    this.m_data.skip(metadataSize);this.m_prefixParsed = true;}return true;};ReadContext.prototype.doParseHeader = function (flsh) {// Stop if we don't have enough data (unless flushing).
	  if (!flsh && this.m_data.remaining() < 24) {return false;} // Try to read the header message.
	  // Get the varint32 size of the encoding of the Header message.
	  var dataSize = this.m_data.readVarint32();var remaining = this.m_data.remaining();if (dataSize <= remaining) {// TODO: decode the encoded header message.
	    this.m_data.skip(dataSize);this.m_headerParsed = true;}return true;};ReadContext.prototype.handleMessage = function (msgIndex, dataSize) {try {var type = messageTypes[msgIndex];var def = this.m_protoRoot.lookupType("Scalaris." + type);var msg = def.decode(new Uint8Array(this.m_data.buffer, this.m_data.offset, dataSize)); // Encoded message of the specified size and type.
	    //console.log("Message type =", def.name, " index =", index, " size =", data.limit, " value =", JSON.stringify(msg, null, 2));
	    switch (type) {case "Mesh":this.m_refs[msg.ref] = msg;break;case "NodeData":this._parseNodeDataMsg(msg);break;case "ElementData":this._parseElementDataMsg(msg);break;case "Scalar":this.m_refs[msg.ref] = msg;break;case "ValueData":this._parseValueDataMsg(msg);break;}} catch (e) {console.log("Error: failed to parse message of type", def.name, e);}};ReadContext.prototype._parseNodeDataMsg = function (msg) {// Number of all vertices in this mesh.
	  var meshInfo = this.m_refs[msg.ref];var numVerticesAll = meshInfo.nodes;var offset = msg.offset || 0;if (!offset) {this.m_vertices = new Float32Array(numVerticesAll * 3);} // Number of vertices in this chunk.
	  var numVertices = msg.data.length;for (var i = 0; i < numVertices; i++) {var vertex = msg.data[i].values;var index = (offset + i) * 3;for (var j = 0; j < 3; j++) {this.m_vertices[index + j] = vertex[j];}this._updateBBox(vertex);}};ReadContext.prototype._parseElementDataMsg = function (msg) {var meshInfo = this.m_refs[msg.ref];var numTrianglesAll = meshInfo.elements;var offset = msg.offset || 0;if (!offset) {this.m_triangles = new Uint32Array(numTrianglesAll * 3);}var numTriangles = msg.data.length;for (var i = 0; i < numTriangles; i++) {var triangle = msg.data[i];if (triangle.type === 5) {// TODO Fix 5 for "TRIANGLE"
	      var index = (offset + i) * 3;for (var j = 0; j < 3; j++) {this.m_triangles[index + j] = triangle.nodes[j];}}}};ReadContext.prototype._updateBBox = function (vertex) {if (vertex[0] < this.m_min.x) {this.m_min.x = vertex[0];}if (vertex[0] > this.m_max.x) {this.m_max.x = vertex[0];}if (vertex[1] < this.m_min.y) {this.m_min.y = vertex[1];}if (vertex[1] > this.m_max.y) {this.m_max.y = vertex[1];}if (vertex[2] < this.m_min.z) {this.m_min.z = vertex[2];}if (vertex[2] > this.m_max.z) {this.m_max.z = vertex[2];}};ReadContext.prototype._updateVMStress = function (value) {if (value < this.m_stressMin) {this.m_stressMin = value;}if (value > this.m_stressMax) {this.m_stressMax = value;}};ReadContext.prototype._parseValueData = function (valueArray, msg, scalarMsg) {var offset = msg.offset || 0;var numValues = msg.data.length;var numComponents = scalarMsg.components;var vmStress = false;if (scalarMsg.name === 'VMStress') {vmStress = true;}for (var i = 0; i < numValues; i++) {var index = (offset + i) * numComponents;for (var j = 0; j < numComponents; j++) {var value = msg.data[i].values[j];valueArray[index + j] = value;if (vmStress) {this._updateVMStress(value);}}}};ReadContext.prototype._parseValueDataMsg = function (msg) {var dataInfo = this.m_refs[msg.ref];var valueCount = dataInfo.tuples;var componentsCount = dataInfo.components;var offset = msg.offset || 0;var valueArray = null;switch (dataInfo.name) {case "Normals":if (dataInfo.parent === 2) {// TODO: 2 == "NODE" from the proto file
	        if (!offset) {this.m_vertexNormals = new Float32Array(valueCount * componentsCount);}valueArray = this.m_vertexNormals;} /* else if (dataInfo.parent === 1) { // TODO: 1 == "CELL" from the proto file
	                                                                                                                                 if (offset === 0) {
	                                                                                                                                   this.m_faceNormals = new Float32Array(valueCount * componentsCount);
	                                                                                                                                 }
	                                                                                                                                 valueArray = this.m_faceNormals;
	                                                                                                                                 } */break;case "Colors": /* if (offset === 0) {
	                                                                                                                                                            this.m_vertexColors = new Float32Array(valueCount * componentsCount);
	                                                                                                                                                          }
	                                                                                                                                                          valueArray = this.m_vertexColors; */break;case "VMStress":if (dataInfo.parent === 2) {if (!offset) {this.m_vmStress = new Float32Array(valueCount * componentsCount);}valueArray = this.m_vmStress;}break;case "TCoords":break;case "EdgeIds":break;case "LoopIds":break;case "NodeIds":break;case "OriginalIds":break;case "BodyIds":break;case "SurfaceIds":break;}if (valueArray) {this._parseValueData(valueArray, msg, dataInfo);}}; // ----------------------------------------------------------------------------
	function readScalarisData(worker, stream) {var bb = new ByteBuffer(0, true, false);bb.buffer = stream.buffer;bb.offset = 0;bb.limit = stream.byteLength;bb.view = stream.byteLength > 0 ? new DataView(stream.buffer) : null;var io = new ReadContext(worker.root, function (progress) {worker.postMessage({ progress: progress });});var status = io.parseData(bb);if (!status) {console.log("\nError: Failed to load the scalaris data");return null;}if (!io.m_vertexNormals && io.m_triangles && io.m_triangles.length > 2) {io.m_vertexNormals = new Float32Array(io.m_vertices.length);var pA = new _LmvVector.LmvVector3(),pB = new _LmvVector.LmvVector3(),pC = new _LmvVector.LmvVector3();var cb = new _LmvVector.LmvVector3(),ab = new _LmvVector.LmvVector3();var posA = 0,posB = 0,posC = 0;var numTriangles = io.m_triangles.length;for (var i = 0; i < numTriangles; i += 3) {posA = io.m_triangles[i] * 3;posB = io.m_triangles[i + 1] * 3;posC = io.m_triangles[i + 2] * 3;pA.set(io.m_vertices[posA], io.m_vertices[posA + 1], io.m_vertices[posA + 2]);pB.set(io.m_vertices[posB], io.m_vertices[posB + 1], io.m_vertices[posB + 2]);pC.set(io.m_vertices[posC], io.m_vertices[posC + 1], io.m_vertices[posC + 2]);cb.subVectors(pC, pB);ab.subVectors(pA, pB);cb.cross(ab);cb.normalize();io.m_vertexNormals[posA] = io.m_vertexNormals[posB] = io.m_vertexNormals[posC] = cb.x;io.m_vertexNormals[posA + 1] = io.m_vertexNormals[posB + 1] = io.m_vertexNormals[posC + 1] = cb.y;io.m_vertexNormals[posA + 2] = io.m_vertexNormals[posB + 2] = io.m_vertexNormals[posC + 2] = cb.z;}}if (io.m_vertices && io.m_vertices.length) {return { attributes: { index: { itemSize: 1, array: io.m_triangles }, position: { itemSize: 3, array: io.m_vertices }, normal: { itemSize: 3, array: io.m_vertexNormals } }, min: io.m_min, max: io.m_max, stressMin: io.m_stressMin, stressMax: io.m_stressMax, stressData: io.m_vmStress, offsets: [] };}return null;}function parseScalarisData(loadContext, scalarisData) {var worker = loadContext.worker;return readScalarisData(worker, scalarisData);}function register(workerMain) {workerMain.register("LOAD_SCALARIS", { doOperation: doLoadScalaris });}

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	// full library entry point.

	"use strict";
	module.exports = __webpack_require__(78);


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var protobuf = module.exports = __webpack_require__(79);

	protobuf.build = "full";

	// Parser
	protobuf.tokenize         = __webpack_require__(118);
	protobuf.parse            = __webpack_require__(119);
	protobuf.common           = __webpack_require__(120);

	// Configure parser
	protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var protobuf = module.exports = __webpack_require__(80);

	protobuf.build = "light";

	/**
	 * A node-style callback as used by {@link load} and {@link Root#load}.
	 * @typedef LoadCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any, otherwise `null`
	 * @param {Root} [root] Root, if there hasn't been an error
	 * @returns {undefined}
	 */

	/**
	 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {Root} root Root namespace, defaults to create a new one if omitted.
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 * @see {@link Root#load}
	 */
	function load(filename, root, callback) {
	    if (typeof root === "function") {
	        callback = root;
	        root = new protobuf.Root();
	    } else if (!root)
	        root = new protobuf.Root();
	    return root.load(filename, callback);
	}

	/**
	 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
	 * @name load
	 * @function
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 * @see {@link Root#load}
	 * @variation 2
	 */
	// function load(filename:string, callback:LoadCallback):undefined

	/**
	 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
	 * @name load
	 * @function
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
	 * @returns {Promise<Root>} Promise
	 * @see {@link Root#load}
	 * @variation 3
	 */
	// function load(filename:string, [root:Root]):Promise<Root>

	protobuf.load = load;

	/**
	 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
	 * @returns {Root} Root namespace
	 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
	 * @see {@link Root#loadSync}
	 */
	function loadSync(filename, root) {
	    if (!root)
	        root = new protobuf.Root();
	    return root.loadSync(filename);
	}

	protobuf.loadSync = loadSync;

	// Serialization
	protobuf.encoder          = __webpack_require__(97);
	protobuf.decoder          = __webpack_require__(113);
	protobuf.verifier         = __webpack_require__(114);
	protobuf.converter        = __webpack_require__(115);

	// Reflection
	protobuf.ReflectionObject = __webpack_require__(99);
	protobuf.Namespace        = __webpack_require__(105);
	protobuf.Root             = __webpack_require__(117);
	protobuf.Enum             = __webpack_require__(98);
	protobuf.Type             = __webpack_require__(104);
	protobuf.Field            = __webpack_require__(106);
	protobuf.OneOf            = __webpack_require__(108);
	protobuf.MapField         = __webpack_require__(109);
	protobuf.Service          = __webpack_require__(110);
	protobuf.Method           = __webpack_require__(111);

	// Runtime
	protobuf.Message          = __webpack_require__(112);
	protobuf.wrappers         = __webpack_require__(116);

	// Utility
	protobuf.types            = __webpack_require__(107);
	protobuf.util             = __webpack_require__(100);

	// Set up possibly cyclic reflection dependencies
	protobuf.ReflectionObject._configure(protobuf.Root);
	protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
	protobuf.Root._configure(protobuf.Type);
	protobuf.Field._configure(protobuf.Type);


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var protobuf = exports;

	/**
	 * Build type, one of `"full"`, `"light"` or `"minimal"`.
	 * @name build
	 * @type {string}
	 * @const
	 */
	protobuf.build = "minimal";

	// Serialization
	protobuf.Writer       = __webpack_require__(81);
	protobuf.BufferWriter = __webpack_require__(91);
	protobuf.Reader       = __webpack_require__(92);
	protobuf.BufferReader = __webpack_require__(93);

	// Utility
	protobuf.util         = __webpack_require__(82);
	protobuf.rpc          = __webpack_require__(94);
	protobuf.roots        = __webpack_require__(96);
	protobuf.configure    = configure;

	/* istanbul ignore next */
	/**
	 * Reconfigures the library according to the environment.
	 * @returns {undefined}
	 */
	function configure() {
	    protobuf.Reader._configure(protobuf.BufferReader);
	    protobuf.util._configure();
	}

	// Set up buffer utility according to the environment
	protobuf.Writer._configure(protobuf.BufferWriter);
	configure();


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Writer;

	var util      = __webpack_require__(82);

	var BufferWriter; // cyclic

	var LongBits  = util.LongBits,
	    base64    = util.base64,
	    utf8      = util.utf8;

	/**
	 * Constructs a new writer operation instance.
	 * @classdesc Scheduled writer operation.
	 * @constructor
	 * @param {function(*, Uint8Array, number)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {*} val Value to write
	 * @ignore
	 */
	function Op(fn, len, val) {

	    /**
	     * Function to call.
	     * @type {function(Uint8Array, number, *)}
	     */
	    this.fn = fn;

	    /**
	     * Value byte length.
	     * @type {number}
	     */
	    this.len = len;

	    /**
	     * Next operation.
	     * @type {Writer.Op|undefined}
	     */
	    this.next = undefined;

	    /**
	     * Value to write.
	     * @type {*}
	     */
	    this.val = val; // type varies
	}

	/* istanbul ignore next */
	function noop() {} // eslint-disable-line no-empty-function

	/**
	 * Constructs a new writer state instance.
	 * @classdesc Copied writer state.
	 * @memberof Writer
	 * @constructor
	 * @param {Writer} writer Writer to copy state from
	 * @ignore
	 */
	function State(writer) {

	    /**
	     * Current head.
	     * @type {Writer.Op}
	     */
	    this.head = writer.head;

	    /**
	     * Current tail.
	     * @type {Writer.Op}
	     */
	    this.tail = writer.tail;

	    /**
	     * Current buffer length.
	     * @type {number}
	     */
	    this.len = writer.len;

	    /**
	     * Next state.
	     * @type {State|null}
	     */
	    this.next = writer.states;
	}

	/**
	 * Constructs a new writer instance.
	 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 */
	function Writer() {

	    /**
	     * Current length.
	     * @type {number}
	     */
	    this.len = 0;

	    /**
	     * Operations head.
	     * @type {Object}
	     */
	    this.head = new Op(noop, 0, 0);

	    /**
	     * Operations tail
	     * @type {Object}
	     */
	    this.tail = this.head;

	    /**
	     * Linked forked states.
	     * @type {Object|null}
	     */
	    this.states = null;

	    // When a value is written, the writer calculates its byte length and puts it into a linked
	    // list of operations to perform when finish() is called. This both allows us to allocate
	    // buffers of the exact required size and reduces the amount of work we have to do compared
	    // to first calculating over objects and then encoding over objects. In our case, the encoding
	    // part is just a linked list walk calling operations with already prepared values.
	}

	/**
	 * Creates a new writer.
	 * @function
	 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
	 */
	Writer.create = util.Buffer
	    ? function create_buffer_setup() {
	        return (Writer.create = function create_buffer() {
	            return new BufferWriter();
	        })();
	    }
	    /* istanbul ignore next */
	    : function create_array() {
	        return new Writer();
	    };

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */
	Writer.alloc = function alloc(size) {
	    return new util.Array(size);
	};

	// Use Uint8Array buffer pool in the browser, just like node does with buffers
	/* istanbul ignore else */
	if (util.Array !== Array)
	    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

	/**
	 * Pushes a new operation to the queue.
	 * @param {function(Uint8Array, number, *)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @returns {Writer} `this`
	 * @private
	 */
	Writer.prototype._push = function push(fn, len, val) {
	    this.tail = this.tail.next = new Op(fn, len, val);
	    this.len += len;
	    return this;
	};

	function writeByte(val, buf, pos) {
	    buf[pos] = val & 255;
	}

	function writeVarint32(val, buf, pos) {
	    while (val > 127) {
	        buf[pos++] = val & 127 | 128;
	        val >>>= 7;
	    }
	    buf[pos] = val;
	}

	/**
	 * Constructs a new varint writer operation instance.
	 * @classdesc Scheduled varint writer operation.
	 * @extends Op
	 * @constructor
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @ignore
	 */
	function VarintOp(len, val) {
	    this.len = len;
	    this.next = undefined;
	    this.val = val;
	}

	VarintOp.prototype = Object.create(Op.prototype);
	VarintOp.prototype.fn = writeVarint32;

	/**
	 * Writes an unsigned 32 bit value as a varint.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.uint32 = function write_uint32(value) {
	    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
	    // uint32 is by far the most frequently used operation and benefits significantly from this.
	    this.len += (this.tail = this.tail.next = new VarintOp(
	        (value = value >>> 0)
	                < 128       ? 1
	        : value < 16384     ? 2
	        : value < 2097152   ? 3
	        : value < 268435456 ? 4
	        :                     5,
	    value)).len;
	    return this;
	};

	/**
	 * Writes a signed 32 bit value as a varint.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.int32 = function write_int32(value) {
	    return value < 0
	        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
	        : this.uint32(value);
	};

	/**
	 * Writes a 32 bit value as a varint, zig-zag encoded.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sint32 = function write_sint32(value) {
	    return this.uint32((value << 1 ^ value >> 31) >>> 0);
	};

	function writeVarint64(val, buf, pos) {
	    while (val.hi) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
	        val.hi >>>= 7;
	    }
	    while (val.lo > 127) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = val.lo >>> 7;
	    }
	    buf[pos++] = val.lo;
	}

	/**
	 * Writes an unsigned 64 bit value as a varint.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.uint64 = function write_uint64(value) {
	    var bits = LongBits.from(value);
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a signed 64 bit value as a varint.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.int64 = Writer.prototype.uint64;

	/**
	 * Writes a signed 64 bit value as a varint, zig-zag encoded.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sint64 = function write_sint64(value) {
	    var bits = LongBits.from(value).zzEncode();
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a boolish value as a varint.
	 * @param {boolean} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bool = function write_bool(value) {
	    return this._push(writeByte, 1, value ? 1 : 0);
	};

	function writeFixed32(val, buf, pos) {
	    buf[pos    ] =  val         & 255;
	    buf[pos + 1] =  val >>> 8   & 255;
	    buf[pos + 2] =  val >>> 16  & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	/**
	 * Writes an unsigned 32 bit value as fixed 32 bits.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fixed32 = function write_fixed32(value) {
	    return this._push(writeFixed32, 4, value >>> 0);
	};

	/**
	 * Writes a signed 32 bit value as fixed 32 bits.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sfixed32 = Writer.prototype.fixed32;

	/**
	 * Writes an unsigned 64 bit value as fixed 64 bits.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.fixed64 = function write_fixed64(value) {
	    var bits = LongBits.from(value);
	    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
	};

	/**
	 * Writes a signed 64 bit value as fixed 64 bits.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sfixed64 = Writer.prototype.fixed64;

	/**
	 * Writes a float (32 bit).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.float = function write_float(value) {
	    return this._push(util.float.writeFloatLE, 4, value);
	};

	/**
	 * Writes a double (64 bit float).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.double = function write_double(value) {
	    return this._push(util.float.writeDoubleLE, 8, value);
	};

	var writeBytes = util.Array.prototype.set
	    ? function writeBytes_set(val, buf, pos) {
	        buf.set(val, pos); // also works for plain array values
	    }
	    /* istanbul ignore next */
	    : function writeBytes_for(val, buf, pos) {
	        for (var i = 0; i < val.length; ++i)
	            buf[pos + i] = val[i];
	    };

	/**
	 * Writes a sequence of bytes.
	 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bytes = function write_bytes(value) {
	    var len = value.length >>> 0;
	    if (!len)
	        return this._push(writeByte, 1, 0);
	    if (util.isString(value)) {
	        var buf = Writer.alloc(len = base64.length(value));
	        base64.decode(value, buf, 0);
	        value = buf;
	    }
	    return this.uint32(len)._push(writeBytes, len, value);
	};

	/**
	 * Writes a string.
	 * @param {string} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.string = function write_string(value) {
	    var len = utf8.length(value);
	    return len
	        ? this.uint32(len)._push(utf8.write, len, value)
	        : this._push(writeByte, 1, 0);
	};

	/**
	 * Forks this writer's state by pushing it to a stack.
	 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fork = function fork() {
	    this.states = new State(this);
	    this.head = this.tail = new Op(noop, 0, 0);
	    this.len = 0;
	    return this;
	};

	/**
	 * Resets this instance to the last state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.reset = function reset() {
	    if (this.states) {
	        this.head   = this.states.head;
	        this.tail   = this.states.tail;
	        this.len    = this.states.len;
	        this.states = this.states.next;
	    } else {
	        this.head = this.tail = new Op(noop, 0, 0);
	        this.len  = 0;
	    }
	    return this;
	};

	/**
	 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.ldelim = function ldelim() {
	    var head = this.head,
	        tail = this.tail,
	        len  = this.len;
	    this.reset().uint32(len);
	    if (len) {
	        this.tail.next = head.next; // skip noop
	        this.tail = tail;
	        this.len += len;
	    }
	    return this;
	};

	/**
	 * Finishes the write operation.
	 * @returns {Uint8Array} Finished buffer
	 */
	Writer.prototype.finish = function finish() {
	    var head = this.head.next, // skip noop
	        buf  = this.constructor.alloc(this.len),
	        pos  = 0;
	    while (head) {
	        head.fn(head.val, buf, pos);
	        pos += head.len;
	        head = head.next;
	    }
	    // this.head = this.tail = null;
	    return buf;
	};

	Writer._configure = function(BufferWriter_) {
	    BufferWriter = BufferWriter_;
	};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	var util = exports;

	// used to return a Promise where callback is omitted
	util.asPromise = __webpack_require__(83);

	// converts to / from base64 encoded strings
	util.base64 = __webpack_require__(84);

	// base class of rpc.Service
	util.EventEmitter = __webpack_require__(85);

	// float handling accross browsers
	util.float = __webpack_require__(86);

	// requires modules optionally and hides the call from bundlers
	util.inquire = __webpack_require__(87);

	// converts to / from utf8 encoded strings
	util.utf8 = __webpack_require__(88);

	// provides a node-like buffer pool in the browser
	util.pool = __webpack_require__(89);

	// utility to work with the low and high bits of a 64 bit value
	util.LongBits = __webpack_require__(90);

	// global object reference
	util.global = typeof window !== "undefined" && window
	           || typeof global !== "undefined" && global
	           || typeof self   !== "undefined" && self
	           || this; // eslint-disable-line no-invalid-this

	/**
	 * An immuable empty array.
	 * @memberof util
	 * @type {Array.<*>}
	 * @const
	 */
	util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

	/**
	 * An immutable empty object.
	 * @type {Object}
	 * @const
	 */
	util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

	/**
	 * Whether running within node or not.
	 * @memberof util
	 * @type {boolean}
	 * @const
	 */
	util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);

	/**
	 * Tests if the specified value is an integer.
	 * @function
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is an integer
	 */
	util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
	    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
	};

	/**
	 * Tests if the specified value is a string.
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is a string
	 */
	util.isString = function isString(value) {
	    return typeof value === "string" || value instanceof String;
	};

	/**
	 * Tests if the specified value is a non-null object.
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is a non-null object
	 */
	util.isObject = function isObject(value) {
	    return value && typeof value === "object";
	};

	/**
	 * Checks if a property on a message is considered to be present.
	 * This is an alias of {@link util.isSet}.
	 * @function
	 * @param {Object} obj Plain object or message instance
	 * @param {string} prop Property name
	 * @returns {boolean} `true` if considered to be present, otherwise `false`
	 */
	util.isset =

	/**
	 * Checks if a property on a message is considered to be present.
	 * @param {Object} obj Plain object or message instance
	 * @param {string} prop Property name
	 * @returns {boolean} `true` if considered to be present, otherwise `false`
	 */
	util.isSet = function isSet(obj, prop) {
	    var value = obj[prop];
	    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
	        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
	    return false;
	};

	/**
	 * Any compatible Buffer instance.
	 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
	 * @interface Buffer
	 * @extends Uint8Array
	 */

	/**
	 * Node's Buffer class if available.
	 * @type {Constructor<Buffer>}
	 */
	util.Buffer = (function() {
	    try {
	        var Buffer = util.inquire("buffer").Buffer;
	        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
	        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
	    } catch (e) {
	        /* istanbul ignore next */
	        return null;
	    }
	})();

	// Internal alias of or polyfull for Buffer.from.
	util._Buffer_from = null;

	// Internal alias of or polyfill for Buffer.allocUnsafe.
	util._Buffer_allocUnsafe = null;

	/**
	 * Creates a new buffer of whatever type supported by the environment.
	 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
	 * @returns {Uint8Array|Buffer} Buffer
	 */
	util.newBuffer = function newBuffer(sizeOrArray) {
	    /* istanbul ignore next */
	    return typeof sizeOrArray === "number"
	        ? util.Buffer
	            ? util._Buffer_allocUnsafe(sizeOrArray)
	            : new util.Array(sizeOrArray)
	        : util.Buffer
	            ? util._Buffer_from(sizeOrArray)
	            : typeof Uint8Array === "undefined"
	                ? sizeOrArray
	                : new Uint8Array(sizeOrArray);
	};

	/**
	 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
	 * @type {Constructor<Uint8Array>}
	 */
	util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

	/**
	 * Any compatible Long instance.
	 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
	 * @interface Long
	 * @property {number} low Low bits
	 * @property {number} high High bits
	 * @property {boolean} unsigned Whether unsigned or not
	 */

	/**
	 * Long.js's Long class if available.
	 * @type {Constructor<Long>}
	 */
	util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
	         || /* istanbul ignore next */ util.global.Long
	         || util.inquire("long");

	/**
	 * Regular expression used to verify 2 bit (`bool`) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key2Re = /^true|false|0|1$/;

	/**
	 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

	/**
	 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

	/**
	 * Converts a number or long to an 8 characters long hash string.
	 * @param {Long|number} value Value to convert
	 * @returns {string} Hash
	 */
	util.longToHash = function longToHash(value) {
	    return value
	        ? util.LongBits.from(value).toHash()
	        : util.LongBits.zeroHash;
	};

	/**
	 * Converts an 8 characters long hash string to a long or number.
	 * @param {string} hash Hash
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long|number} Original value
	 */
	util.longFromHash = function longFromHash(hash, unsigned) {
	    var bits = util.LongBits.fromHash(hash);
	    if (util.Long)
	        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
	    return bits.toNumber(Boolean(unsigned));
	};

	/**
	 * Merges the properties of the source object into the destination object.
	 * @memberof util
	 * @param {Object.<string,*>} dst Destination object
	 * @param {Object.<string,*>} src Source object
	 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
	 * @returns {Object.<string,*>} Destination object
	 */
	function merge(dst, src, ifNotSet) { // used by converters
	    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
	        if (dst[keys[i]] === undefined || !ifNotSet)
	            dst[keys[i]] = src[keys[i]];
	    return dst;
	}

	util.merge = merge;

	/**
	 * Converts the first character of a string to lower case.
	 * @param {string} str String to convert
	 * @returns {string} Converted string
	 */
	util.lcFirst = function lcFirst(str) {
	    return str.charAt(0).toLowerCase() + str.substring(1);
	};

	/**
	 * Creates a custom error constructor.
	 * @memberof util
	 * @param {string} name Error name
	 * @returns {Constructor<Error>} Custom error constructor
	 */
	function newError(name) {

	    function CustomError(message, properties) {

	        if (!(this instanceof CustomError))
	            return new CustomError(message, properties);

	        // Error.call(this, message);
	        // ^ just returns a new error instance because the ctor can be called as a function

	        Object.defineProperty(this, "message", { get: function() { return message; } });

	        /* istanbul ignore next */
	        if (Error.captureStackTrace) // node
	            Error.captureStackTrace(this, CustomError);
	        else
	            Object.defineProperty(this, "stack", { value: (new Error()).stack || "" });

	        if (properties)
	            merge(this, properties);
	    }

	    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

	    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

	    CustomError.prototype.toString = function toString() {
	        return this.name + ": " + this.message;
	    };

	    return CustomError;
	}

	util.newError = newError;

	/**
	 * Constructs a new protocol error.
	 * @classdesc Error subclass indicating a protocol specifc error.
	 * @memberof util
	 * @extends Error
	 * @template T extends Message<T>
	 * @constructor
	 * @param {string} message Error message
	 * @param {Object.<string,*>} [properties] Additional properties
	 * @example
	 * try {
	 *     MyMessage.decode(someBuffer); // throws if required fields are missing
	 * } catch (e) {
	 *     if (e instanceof ProtocolError && e.instance)
	 *         console.log("decoded so far: " + JSON.stringify(e.instance));
	 * }
	 */
	util.ProtocolError = newError("ProtocolError");

	/**
	 * So far decoded message instance.
	 * @name util.ProtocolError#instance
	 * @type {Message<T>}
	 */

	/**
	 * A OneOf getter as returned by {@link util.oneOfGetter}.
	 * @typedef OneOfGetter
	 * @type {function}
	 * @returns {string|undefined} Set field name, if any
	 */

	/**
	 * Builds a getter for a oneof's present field name.
	 * @param {string[]} fieldNames Field names
	 * @returns {OneOfGetter} Unbound getter
	 */
	util.oneOfGetter = function getOneOf(fieldNames) {
	    var fieldMap = {};
	    for (var i = 0; i < fieldNames.length; ++i)
	        fieldMap[fieldNames[i]] = 1;

	    /**
	     * @returns {string|undefined} Set field name, if any
	     * @this Object
	     * @ignore
	     */
	    return function() { // eslint-disable-line consistent-return
	        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
	            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
	                return keys[i];
	    };
	};

	/**
	 * A OneOf setter as returned by {@link util.oneOfSetter}.
	 * @typedef OneOfSetter
	 * @type {function}
	 * @param {string|undefined} value Field name
	 * @returns {undefined}
	 */

	/**
	 * Builds a setter for a oneof's present field name.
	 * @param {string[]} fieldNames Field names
	 * @returns {OneOfSetter} Unbound setter
	 */
	util.oneOfSetter = function setOneOf(fieldNames) {

	    /**
	     * @param {string} name Field name
	     * @returns {undefined}
	     * @this Object
	     * @ignore
	     */
	    return function(name) {
	        for (var i = 0; i < fieldNames.length; ++i)
	            if (fieldNames[i] !== name)
	                delete this[fieldNames[i]];
	    };
	};

	/**
	 * Default conversion options used for {@link Message#toJSON} implementations.
	 *
	 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
	 *
	 * - Longs become strings
	 * - Enums become string keys
	 * - Bytes become base64 encoded strings
	 * - (Sub-)Messages become plain objects
	 * - Maps become plain objects with all string keys
	 * - Repeated fields become arrays
	 * - NaN and Infinity for float and double fields become strings
	 *
	 * @type {IConversionOptions}
	 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
	 */
	util.toJSONOptions = {
	    longs: String,
	    enums: String,
	    bytes: String,
	    json: true
	};

	// Sets up buffer utility according to the environment (called in index-minimal)
	util._configure = function() {
	    var Buffer = util.Buffer;
	    /* istanbul ignore if */
	    if (!Buffer) {
	        util._Buffer_from = util._Buffer_allocUnsafe = null;
	        return;
	    }
	    // because node 4.x buffers are incompatible & immutable
	    // see: https://github.com/dcodeIO/protobuf.js/pull/665
	    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
	        /* istanbul ignore next */
	        function Buffer_from(value, encoding) {
	            return new Buffer(value, encoding);
	        };
	    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
	        /* istanbul ignore next */
	        function Buffer_allocUnsafe(size) {
	            return new Buffer(size);
	        };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = asPromise;

	/**
	 * Callback as used by {@link util.asPromise}.
	 * @typedef asPromiseCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {...*} params Additional arguments
	 * @returns {undefined}
	 */

	/**
	 * Returns a promise from a node-style callback function.
	 * @memberof util
	 * @param {asPromiseCallback} fn Function to call
	 * @param {*} ctx Function context
	 * @param {...*} params Function arguments
	 * @returns {Promise<*>} Promisified function
	 */
	function asPromise(fn, ctx/*, varargs */) {
	    var params  = new Array(arguments.length - 1),
	        offset  = 0,
	        index   = 2,
	        pending = true;
	    while (index < arguments.length)
	        params[offset++] = arguments[index++];
	    return new Promise(function executor(resolve, reject) {
	        params[offset] = function callback(err/*, varargs */) {
	            if (pending) {
	                pending = false;
	                if (err)
	                    reject(err);
	                else {
	                    var params = new Array(arguments.length - 1),
	                        offset = 0;
	                    while (offset < params.length)
	                        params[offset++] = arguments[offset];
	                    resolve.apply(null, params);
	                }
	            }
	        };
	        try {
	            fn.apply(ctx || null, params);
	        } catch (err) {
	            if (pending) {
	                pending = false;
	                reject(err);
	            }
	        }
	    });
	}


/***/ }),
/* 84 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * A minimal base64 implementation for number arrays.
	 * @memberof util
	 * @namespace
	 */
	var base64 = exports;

	/**
	 * Calculates the byte length of a base64 encoded string.
	 * @param {string} string Base64 encoded string
	 * @returns {number} Byte length
	 */
	base64.length = function length(string) {
	    var p = string.length;
	    if (!p)
	        return 0;
	    var n = 0;
	    while (--p % 4 > 1 && string.charAt(p) === "=")
	        ++n;
	    return Math.ceil(string.length * 3) / 4 - n;
	};

	// Base64 encoding table
	var b64 = new Array(64);

	// Base64 decoding table
	var s64 = new Array(123);

	// 65..90, 97..122, 48..57, 43, 47
	for (var i = 0; i < 64;)
	    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

	/**
	 * Encodes a buffer to a base64 encoded string.
	 * @param {Uint8Array} buffer Source buffer
	 * @param {number} start Source start
	 * @param {number} end Source end
	 * @returns {string} Base64 encoded string
	 */
	base64.encode = function encode(buffer, start, end) {
	    var parts = null,
	        chunk = [];
	    var i = 0, // output index
	        j = 0, // goto index
	        t;     // temporary
	    while (start < end) {
	        var b = buffer[start++];
	        switch (j) {
	            case 0:
	                chunk[i++] = b64[b >> 2];
	                t = (b & 3) << 4;
	                j = 1;
	                break;
	            case 1:
	                chunk[i++] = b64[t | b >> 4];
	                t = (b & 15) << 2;
	                j = 2;
	                break;
	            case 2:
	                chunk[i++] = b64[t | b >> 6];
	                chunk[i++] = b64[b & 63];
	                j = 0;
	                break;
	        }
	        if (i > 8191) {
	            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	            i = 0;
	        }
	    }
	    if (j) {
	        chunk[i++] = b64[t];
	        chunk[i++] = 61;
	        if (j === 1)
	            chunk[i++] = 61;
	    }
	    if (parts) {
	        if (i)
	            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	        return parts.join("");
	    }
	    return String.fromCharCode.apply(String, chunk.slice(0, i));
	};

	var invalidEncoding = "invalid encoding";

	/**
	 * Decodes a base64 encoded string to a buffer.
	 * @param {string} string Source string
	 * @param {Uint8Array} buffer Destination buffer
	 * @param {number} offset Destination offset
	 * @returns {number} Number of bytes written
	 * @throws {Error} If encoding is invalid
	 */
	base64.decode = function decode(string, buffer, offset) {
	    var start = offset;
	    var j = 0, // goto index
	        t;     // temporary
	    for (var i = 0; i < string.length;) {
	        var c = string.charCodeAt(i++);
	        if (c === 61 && j > 1)
	            break;
	        if ((c = s64[c]) === undefined)
	            throw Error(invalidEncoding);
	        switch (j) {
	            case 0:
	                t = c;
	                j = 1;
	                break;
	            case 1:
	                buffer[offset++] = t << 2 | (c & 48) >> 4;
	                t = c;
	                j = 2;
	                break;
	            case 2:
	                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
	                t = c;
	                j = 3;
	                break;
	            case 3:
	                buffer[offset++] = (t & 3) << 6 | c;
	                j = 0;
	                break;
	        }
	    }
	    if (j === 1)
	        throw Error(invalidEncoding);
	    return offset - start;
	};

	/**
	 * Tests if the specified string appears to be base64 encoded.
	 * @param {string} string String to test
	 * @returns {boolean} `true` if probably base64 encoded, otherwise false
	 */
	base64.test = function test(string) {
	    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
	};


/***/ }),
/* 85 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = EventEmitter;

	/**
	 * Constructs a new event emitter instance.
	 * @classdesc A minimal event emitter.
	 * @memberof util
	 * @constructor
	 */
	function EventEmitter() {

	    /**
	     * Registered listeners.
	     * @type {Object.<string,*>}
	     * @private
	     */
	    this._listeners = {};
	}

	/**
	 * Registers an event listener.
	 * @param {string} evt Event name
	 * @param {function} fn Listener
	 * @param {*} [ctx] Listener context
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.on = function on(evt, fn, ctx) {
	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
	        fn  : fn,
	        ctx : ctx || this
	    });
	    return this;
	};

	/**
	 * Removes an event listener or any matching listeners if arguments are omitted.
	 * @param {string} [evt] Event name. Removes all listeners if omitted.
	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.off = function off(evt, fn) {
	    if (evt === undefined)
	        this._listeners = {};
	    else {
	        if (fn === undefined)
	            this._listeners[evt] = [];
	        else {
	            var listeners = this._listeners[evt];
	            for (var i = 0; i < listeners.length;)
	                if (listeners[i].fn === fn)
	                    listeners.splice(i, 1);
	                else
	                    ++i;
	        }
	    }
	    return this;
	};

	/**
	 * Emits an event by calling its listeners with the specified arguments.
	 * @param {string} evt Event name
	 * @param {...*} args Arguments
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.emit = function emit(evt) {
	    var listeners = this._listeners[evt];
	    if (listeners) {
	        var args = [],
	            i = 1;
	        for (; i < arguments.length;)
	            args.push(arguments[i++]);
	        for (i = 0; i < listeners.length;)
	            listeners[i].fn.apply(listeners[i++].ctx, args);
	    }
	    return this;
	};


/***/ }),
/* 86 */
/***/ (function(module, exports) {

	"use strict";

	module.exports = factory(factory);

	/**
	 * Reads / writes floats / doubles from / to buffers.
	 * @name util.float
	 * @namespace
	 */

	/**
	 * Writes a 32 bit float to a buffer using little endian byte order.
	 * @name util.float.writeFloatLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 32 bit float to a buffer using big endian byte order.
	 * @name util.float.writeFloatBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 32 bit float from a buffer using little endian byte order.
	 * @name util.float.readFloatLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 32 bit float from a buffer using big endian byte order.
	 * @name util.float.readFloatBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Writes a 64 bit double to a buffer using little endian byte order.
	 * @name util.float.writeDoubleLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 64 bit double to a buffer using big endian byte order.
	 * @name util.float.writeDoubleBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 64 bit double from a buffer using little endian byte order.
	 * @name util.float.readDoubleLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 64 bit double from a buffer using big endian byte order.
	 * @name util.float.readDoubleBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	// Factory function for the purpose of node-based testing in modified global environments
	function factory(exports) {

	    // float: typed array
	    if (typeof Float32Array !== "undefined") (function() {

	        var f32 = new Float32Array([ -0 ]),
	            f8b = new Uint8Array(f32.buffer),
	            le  = f8b[3] === 128;

	        function writeFloat_f32_cpy(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	        }

	        function writeFloat_f32_rev(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[3];
	            buf[pos + 1] = f8b[2];
	            buf[pos + 2] = f8b[1];
	            buf[pos + 3] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

	        function readFloat_f32_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            return f32[0];
	        }

	        function readFloat_f32_rev(buf, pos) {
	            f8b[3] = buf[pos    ];
	            f8b[2] = buf[pos + 1];
	            f8b[1] = buf[pos + 2];
	            f8b[0] = buf[pos + 3];
	            return f32[0];
	        }

	        /* istanbul ignore next */
	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

	    // float: ieee754
	    })(); else (function() {

	        function writeFloat_ieee754(writeUint, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0)
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
	            else if (isNaN(val))
	                writeUint(2143289344, buf, pos);
	            else if (val > 3.4028234663852886e+38) // +-Infinity
	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
	            else if (val < 1.1754943508222875e-38) // denormal
	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
	            else {
	                var exponent = Math.floor(Math.log(val) / Math.LN2),
	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
	            }
	        }

	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

	        function readFloat_ieee754(readUint, buf, pos) {
	            var uint = readUint(buf, pos),
	                sign = (uint >> 31) * 2 + 1,
	                exponent = uint >>> 23 & 255,
	                mantissa = uint & 8388607;
	            return exponent === 255
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 1.401298464324817e-45 * mantissa
	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
	        }

	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

	    })();

	    // double: typed array
	    if (typeof Float64Array !== "undefined") (function() {

	        var f64 = new Float64Array([-0]),
	            f8b = new Uint8Array(f64.buffer),
	            le  = f8b[7] === 128;

	        function writeDouble_f64_cpy(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	            buf[pos + 4] = f8b[4];
	            buf[pos + 5] = f8b[5];
	            buf[pos + 6] = f8b[6];
	            buf[pos + 7] = f8b[7];
	        }

	        function writeDouble_f64_rev(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[7];
	            buf[pos + 1] = f8b[6];
	            buf[pos + 2] = f8b[5];
	            buf[pos + 3] = f8b[4];
	            buf[pos + 4] = f8b[3];
	            buf[pos + 5] = f8b[2];
	            buf[pos + 6] = f8b[1];
	            buf[pos + 7] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

	        function readDouble_f64_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            f8b[4] = buf[pos + 4];
	            f8b[5] = buf[pos + 5];
	            f8b[6] = buf[pos + 6];
	            f8b[7] = buf[pos + 7];
	            return f64[0];
	        }

	        function readDouble_f64_rev(buf, pos) {
	            f8b[7] = buf[pos    ];
	            f8b[6] = buf[pos + 1];
	            f8b[5] = buf[pos + 2];
	            f8b[4] = buf[pos + 3];
	            f8b[3] = buf[pos + 4];
	            f8b[2] = buf[pos + 5];
	            f8b[1] = buf[pos + 6];
	            f8b[0] = buf[pos + 7];
	            return f64[0];
	        }

	        /* istanbul ignore next */
	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

	    // double: ieee754
	    })(); else (function() {

	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0) {
	                writeUint(0, buf, pos + off0);
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
	            } else if (isNaN(val)) {
	                writeUint(0, buf, pos + off0);
	                writeUint(2146959360, buf, pos + off1);
	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
	                writeUint(0, buf, pos + off0);
	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
	            } else {
	                var mantissa;
	                if (val < 2.2250738585072014e-308) { // denormal
	                    mantissa = val / 5e-324;
	                    writeUint(mantissa >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
	                } else {
	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
	                    if (exponent === 1024)
	                        exponent = 1023;
	                    mantissa = val * Math.pow(2, -exponent);
	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
	                }
	            }
	        }

	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
	            var lo = readUint(buf, pos + off0),
	                hi = readUint(buf, pos + off1);
	            var sign = (hi >> 31) * 2 + 1,
	                exponent = hi >>> 20 & 2047,
	                mantissa = 4294967296 * (hi & 1048575) + lo;
	            return exponent === 2047
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 5e-324 * mantissa
	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
	        }

	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

	    })();

	    return exports;
	}

	// uint helpers

	function writeUintLE(val, buf, pos) {
	    buf[pos    ] =  val        & 255;
	    buf[pos + 1] =  val >>> 8  & 255;
	    buf[pos + 2] =  val >>> 16 & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	function writeUintBE(val, buf, pos) {
	    buf[pos    ] =  val >>> 24;
	    buf[pos + 1] =  val >>> 16 & 255;
	    buf[pos + 2] =  val >>> 8  & 255;
	    buf[pos + 3] =  val        & 255;
	}

	function readUintLE(buf, pos) {
	    return (buf[pos    ]
	          | buf[pos + 1] << 8
	          | buf[pos + 2] << 16
	          | buf[pos + 3] << 24) >>> 0;
	}

	function readUintBE(buf, pos) {
	    return (buf[pos    ] << 24
	          | buf[pos + 1] << 16
	          | buf[pos + 2] << 8
	          | buf[pos + 3]) >>> 0;
	}


/***/ }),
/* 87 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = inquire;

	/**
	 * Requires a module only if available.
	 * @memberof util
	 * @param {string} moduleName Module to require
	 * @returns {?Object} Required module if available and not empty, otherwise `null`
	 */
	function inquire(moduleName) {
	    try {
	        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
	        if (mod && (mod.length || Object.keys(mod).length))
	            return mod;
	    } catch (e) {} // eslint-disable-line no-empty
	    return null;
	}


/***/ }),
/* 88 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * A minimal UTF8 implementation for number arrays.
	 * @memberof util
	 * @namespace
	 */
	var utf8 = exports;

	/**
	 * Calculates the UTF8 byte length of a string.
	 * @param {string} string String
	 * @returns {number} Byte length
	 */
	utf8.length = function utf8_length(string) {
	    var len = 0,
	        c = 0;
	    for (var i = 0; i < string.length; ++i) {
	        c = string.charCodeAt(i);
	        if (c < 128)
	            len += 1;
	        else if (c < 2048)
	            len += 2;
	        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
	            ++i;
	            len += 4;
	        } else
	            len += 3;
	    }
	    return len;
	};

	/**
	 * Reads UTF8 bytes as a string.
	 * @param {Uint8Array} buffer Source buffer
	 * @param {number} start Source start
	 * @param {number} end Source end
	 * @returns {string} String read
	 */
	utf8.read = function utf8_read(buffer, start, end) {
	    var len = end - start;
	    if (len < 1)
	        return "";
	    var parts = null,
	        chunk = [],
	        i = 0, // char offset
	        t;     // temporary
	    while (start < end) {
	        t = buffer[start++];
	        if (t < 128)
	            chunk[i++] = t;
	        else if (t > 191 && t < 224)
	            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
	        else if (t > 239 && t < 365) {
	            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
	            chunk[i++] = 0xD800 + (t >> 10);
	            chunk[i++] = 0xDC00 + (t & 1023);
	        } else
	            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
	        if (i > 8191) {
	            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	            i = 0;
	        }
	    }
	    if (parts) {
	        if (i)
	            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	        return parts.join("");
	    }
	    return String.fromCharCode.apply(String, chunk.slice(0, i));
	};

	/**
	 * Writes a string as UTF8 bytes.
	 * @param {string} string Source string
	 * @param {Uint8Array} buffer Destination buffer
	 * @param {number} offset Destination offset
	 * @returns {number} Bytes written
	 */
	utf8.write = function utf8_write(string, buffer, offset) {
	    var start = offset,
	        c1, // character 1
	        c2; // character 2
	    for (var i = 0; i < string.length; ++i) {
	        c1 = string.charCodeAt(i);
	        if (c1 < 128) {
	            buffer[offset++] = c1;
	        } else if (c1 < 2048) {
	            buffer[offset++] = c1 >> 6       | 192;
	            buffer[offset++] = c1       & 63 | 128;
	        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
	            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
	            ++i;
	            buffer[offset++] = c1 >> 18      | 240;
	            buffer[offset++] = c1 >> 12 & 63 | 128;
	            buffer[offset++] = c1 >> 6  & 63 | 128;
	            buffer[offset++] = c1       & 63 | 128;
	        } else {
	            buffer[offset++] = c1 >> 12      | 224;
	            buffer[offset++] = c1 >> 6  & 63 | 128;
	            buffer[offset++] = c1       & 63 | 128;
	        }
	    }
	    return offset - start;
	};


/***/ }),
/* 89 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = pool;

	/**
	 * An allocator as used by {@link util.pool}.
	 * @typedef PoolAllocator
	 * @type {function}
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */

	/**
	 * A slicer as used by {@link util.pool}.
	 * @typedef PoolSlicer
	 * @type {function}
	 * @param {number} start Start offset
	 * @param {number} end End offset
	 * @returns {Uint8Array} Buffer slice
	 * @this {Uint8Array}
	 */

	/**
	 * A general purpose buffer pool.
	 * @memberof util
	 * @function
	 * @param {PoolAllocator} alloc Allocator
	 * @param {PoolSlicer} slice Slicer
	 * @param {number} [size=8192] Slab size
	 * @returns {PoolAllocator} Pooled allocator
	 */
	function pool(alloc, slice, size) {
	    var SIZE   = size || 8192;
	    var MAX    = SIZE >>> 1;
	    var slab   = null;
	    var offset = SIZE;
	    return function pool_alloc(size) {
	        if (size < 1 || size > MAX)
	            return alloc(size);
	        if (offset + size > SIZE) {
	            slab = alloc(SIZE);
	            offset = 0;
	        }
	        var buf = slice.call(slab, offset, offset += size);
	        if (offset & 7) // align to 32 bit
	            offset = (offset | 7) + 1;
	        return buf;
	    };
	}


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = LongBits;

	var util = __webpack_require__(82);

	/**
	 * Constructs new long bits.
	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
	 * @memberof util
	 * @constructor
	 * @param {number} lo Low 32 bits, unsigned
	 * @param {number} hi High 32 bits, unsigned
	 */
	function LongBits(lo, hi) {

	    // note that the casts below are theoretically unnecessary as of today, but older statically
	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

	    /**
	     * Low bits.
	     * @type {number}
	     */
	    this.lo = lo >>> 0;

	    /**
	     * High bits.
	     * @type {number}
	     */
	    this.hi = hi >>> 0;
	}

	/**
	 * Zero bits.
	 * @memberof util.LongBits
	 * @type {util.LongBits}
	 */
	var zero = LongBits.zero = new LongBits(0, 0);

	zero.toNumber = function() { return 0; };
	zero.zzEncode = zero.zzDecode = function() { return this; };
	zero.length = function() { return 1; };

	/**
	 * Zero hash.
	 * @memberof util.LongBits
	 * @type {string}
	 */
	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

	/**
	 * Constructs new long bits from the specified number.
	 * @param {number} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.fromNumber = function fromNumber(value) {
	    if (value === 0)
	        return zero;
	    var sign = value < 0;
	    if (sign)
	        value = -value;
	    var lo = value >>> 0,
	        hi = (value - lo) / 4294967296 >>> 0;
	    if (sign) {
	        hi = ~hi >>> 0;
	        lo = ~lo >>> 0;
	        if (++lo > 4294967295) {
	            lo = 0;
	            if (++hi > 4294967295)
	                hi = 0;
	        }
	    }
	    return new LongBits(lo, hi);
	};

	/**
	 * Constructs new long bits from a number, long or string.
	 * @param {Long|number|string} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.from = function from(value) {
	    if (typeof value === "number")
	        return LongBits.fromNumber(value);
	    if (util.isString(value)) {
	        /* istanbul ignore else */
	        if (util.Long)
	            value = util.Long.fromString(value);
	        else
	            return LongBits.fromNumber(parseInt(value, 10));
	    }
	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
	};

	/**
	 * Converts this long bits to a possibly unsafe JavaScript number.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {number} Possibly unsafe number
	 */
	LongBits.prototype.toNumber = function toNumber(unsigned) {
	    if (!unsigned && this.hi >>> 31) {
	        var lo = ~this.lo + 1 >>> 0,
	            hi = ~this.hi     >>> 0;
	        if (!lo)
	            hi = hi + 1 >>> 0;
	        return -(lo + hi * 4294967296);
	    }
	    return this.lo + this.hi * 4294967296;
	};

	/**
	 * Converts this long bits to a long.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long} Long
	 */
	LongBits.prototype.toLong = function toLong(unsigned) {
	    return util.Long
	        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
	        /* istanbul ignore next */
	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
	};

	var charCodeAt = String.prototype.charCodeAt;

	/**
	 * Constructs new long bits from the specified 8 characters long hash.
	 * @param {string} hash Hash
	 * @returns {util.LongBits} Bits
	 */
	LongBits.fromHash = function fromHash(hash) {
	    if (hash === zeroHash)
	        return zero;
	    return new LongBits(
	        ( charCodeAt.call(hash, 0)
	        | charCodeAt.call(hash, 1) << 8
	        | charCodeAt.call(hash, 2) << 16
	        | charCodeAt.call(hash, 3) << 24) >>> 0
	    ,
	        ( charCodeAt.call(hash, 4)
	        | charCodeAt.call(hash, 5) << 8
	        | charCodeAt.call(hash, 6) << 16
	        | charCodeAt.call(hash, 7) << 24) >>> 0
	    );
	};

	/**
	 * Converts this long bits to a 8 characters long hash.
	 * @returns {string} Hash
	 */
	LongBits.prototype.toHash = function toHash() {
	    return String.fromCharCode(
	        this.lo        & 255,
	        this.lo >>> 8  & 255,
	        this.lo >>> 16 & 255,
	        this.lo >>> 24      ,
	        this.hi        & 255,
	        this.hi >>> 8  & 255,
	        this.hi >>> 16 & 255,
	        this.hi >>> 24
	    );
	};

	/**
	 * Zig-zag encodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzEncode = function zzEncode() {
	    var mask =   this.hi >> 31;
	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Zig-zag decodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzDecode = function zzDecode() {
	    var mask = -(this.lo & 1);
	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Calculates the length of this longbits when encoded as a varint.
	 * @returns {number} Length
	 */
	LongBits.prototype.length = function length() {
	    var part0 =  this.lo,
	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
	        part2 =  this.hi >>> 24;
	    return part2 === 0
	         ? part1 === 0
	           ? part0 < 16384
	             ? part0 < 128 ? 1 : 2
	             : part0 < 2097152 ? 3 : 4
	           : part1 < 16384
	             ? part1 < 128 ? 5 : 6
	             : part1 < 2097152 ? 7 : 8
	         : part2 < 128 ? 9 : 10;
	};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = BufferWriter;

	// extends Writer
	var Writer = __webpack_require__(81);
	(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

	var util = __webpack_require__(82);

	var Buffer = util.Buffer;

	/**
	 * Constructs a new buffer writer instance.
	 * @classdesc Wire format writer using node buffers.
	 * @extends Writer
	 * @constructor
	 */
	function BufferWriter() {
	    Writer.call(this);
	}

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Buffer} Buffer
	 */
	BufferWriter.alloc = function alloc_buffer(size) {
	    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
	};

	var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set"
	    ? function writeBytesBuffer_set(val, buf, pos) {
	        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
	                           // also works for plain array values
	    }
	    /* istanbul ignore next */
	    : function writeBytesBuffer_copy(val, buf, pos) {
	        if (val.copy) // Buffer values
	            val.copy(buf, pos, 0, val.length);
	        else for (var i = 0; i < val.length;) // plain array values
	            buf[pos++] = val[i++];
	    };

	/**
	 * @override
	 */
	BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
	    if (util.isString(value))
	        value = util._Buffer_from(value, "base64");
	    var len = value.length >>> 0;
	    this.uint32(len);
	    if (len)
	        this._push(writeBytesBuffer, len, value);
	    return this;
	};

	function writeStringBuffer(val, buf, pos) {
	    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
	        util.utf8.write(val, buf, pos);
	    else
	        buf.utf8Write(val, pos);
	}

	/**
	 * @override
	 */
	BufferWriter.prototype.string = function write_string_buffer(value) {
	    var len = Buffer.byteLength(value);
	    this.uint32(len);
	    if (len)
	        this._push(writeStringBuffer, len, value);
	    return this;
	};


	/**
	 * Finishes the write operation.
	 * @name BufferWriter#finish
	 * @function
	 * @returns {Buffer} Finished buffer
	 */


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Reader;

	var util      = __webpack_require__(82);

	var BufferReader; // cyclic

	var LongBits  = util.LongBits,
	    utf8      = util.utf8;

	/* istanbul ignore next */
	function indexOutOfRange(reader, writeLength) {
	    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
	}

	/**
	 * Constructs a new reader instance using the specified buffer.
	 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 * @param {Uint8Array} buffer Buffer to read from
	 */
	function Reader(buffer) {

	    /**
	     * Read buffer.
	     * @type {Uint8Array}
	     */
	    this.buf = buffer;

	    /**
	     * Read buffer position.
	     * @type {number}
	     */
	    this.pos = 0;

	    /**
	     * Read buffer length.
	     * @type {number}
	     */
	    this.len = buffer.length;
	}

	var create_array = typeof Uint8Array !== "undefined"
	    ? function create_typed_array(buffer) {
	        if (buffer instanceof Uint8Array || Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    }
	    /* istanbul ignore next */
	    : function create_array(buffer) {
	        if (Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    };

	/**
	 * Creates a new reader using the specified buffer.
	 * @function
	 * @param {Uint8Array|Buffer} buffer Buffer to read from
	 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
	 * @throws {Error} If `buffer` is not a valid buffer
	 */
	Reader.create = util.Buffer
	    ? function create_buffer_setup(buffer) {
	        return (Reader.create = function create_buffer(buffer) {
	            return util.Buffer.isBuffer(buffer)
	                ? new BufferReader(buffer)
	                /* istanbul ignore next */
	                : create_array(buffer);
	        })(buffer);
	    }
	    /* istanbul ignore next */
	    : create_array;

	Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

	/**
	 * Reads a varint as an unsigned 32 bit value.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.uint32 = (function read_uint32_setup() {
	    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
	    return function read_uint32() {
	        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

	        /* istanbul ignore if */
	        if ((this.pos += 5) > this.len) {
	            this.pos = this.len;
	            throw indexOutOfRange(this, 10);
	        }
	        return value;
	    };
	})();

	/**
	 * Reads a varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.int32 = function read_int32() {
	    return this.uint32() | 0;
	};

	/**
	 * Reads a zig-zag encoded varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.sint32 = function read_sint32() {
	    var value = this.uint32();
	    return value >>> 1 ^ -(value & 1) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readLongVarint() {
	    // tends to deopt with local vars for octet etc.
	    var bits = new LongBits(0, 0);
	    var i = 0;
	    if (this.len - this.pos > 4) { // fast route (lo)
	        for (; i < 4; ++i) {
	            // 1st..4th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 5th
	        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
	        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
	        if (this.buf[this.pos++] < 128)
	            return bits;
	        i = 0;
	    } else {
	        for (; i < 3; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 1st..3th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 4th
	        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
	        return bits;
	    }
	    if (this.len - this.pos > 4) { // fast route (hi)
	        for (; i < 5; ++i) {
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    } else {
	        for (; i < 5; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    }
	    /* istanbul ignore next */
	    throw Error("invalid varint encoding");
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads a varint as a signed 64 bit value.
	 * @name Reader#int64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as an unsigned 64 bit value.
	 * @name Reader#uint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a zig-zag encoded varint as a signed 64 bit value.
	 * @name Reader#sint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as a boolean.
	 * @returns {boolean} Value read
	 */
	Reader.prototype.bool = function read_bool() {
	    return this.uint32() !== 0;
	};

	function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
	    return (buf[end - 4]
	          | buf[end - 3] << 8
	          | buf[end - 2] << 16
	          | buf[end - 1] << 24) >>> 0;
	}

	/**
	 * Reads fixed 32 bits as an unsigned 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.fixed32 = function read_fixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4);
	};

	/**
	 * Reads fixed 32 bits as a signed 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.sfixed32 = function read_sfixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readFixed64(/* this: Reader */) {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 8);

	    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads fixed 64 bits.
	 * @name Reader#fixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads zig-zag encoded fixed 64 bits.
	 * @name Reader#sfixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a float (32 bit) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.float = function read_float() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util.float.readFloatLE(this.buf, this.pos);
	    this.pos += 4;
	    return value;
	};

	/**
	 * Reads a double (64 bit float) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.double = function read_double() {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util.float.readDoubleLE(this.buf, this.pos);
	    this.pos += 8;
	    return value;
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @returns {Uint8Array} Value read
	 */
	Reader.prototype.bytes = function read_bytes() {
	    var length = this.uint32(),
	        start  = this.pos,
	        end    = this.pos + length;

	    /* istanbul ignore if */
	    if (end > this.len)
	        throw indexOutOfRange(this, length);

	    this.pos += length;
	    if (Array.isArray(this.buf)) // plain array
	        return this.buf.slice(start, end);
	    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
	        ? new this.buf.constructor(0)
	        : this._slice.call(this.buf, start, end);
	};

	/**
	 * Reads a string preceeded by its byte length as a varint.
	 * @returns {string} Value read
	 */
	Reader.prototype.string = function read_string() {
	    var bytes = this.bytes();
	    return utf8.read(bytes, 0, bytes.length);
	};

	/**
	 * Skips the specified number of bytes if specified, otherwise skips a varint.
	 * @param {number} [length] Length if known, otherwise a varint is assumed
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skip = function skip(length) {
	    if (typeof length === "number") {
	        /* istanbul ignore if */
	        if (this.pos + length > this.len)
	            throw indexOutOfRange(this, length);
	        this.pos += length;
	    } else {
	        do {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	        } while (this.buf[this.pos++] & 128);
	    }
	    return this;
	};

	/**
	 * Skips the next element of the specified wire type.
	 * @param {number} wireType Wire type received
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skipType = function(wireType) {
	    switch (wireType) {
	        case 0:
	            this.skip();
	            break;
	        case 1:
	            this.skip(8);
	            break;
	        case 2:
	            this.skip(this.uint32());
	            break;
	        case 3:
	            while ((wireType = this.uint32() & 7) !== 4) {
	                this.skipType(wireType);
	            }
	            break;
	        case 5:
	            this.skip(4);
	            break;

	        /* istanbul ignore next */
	        default:
	            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
	    }
	    return this;
	};

	Reader._configure = function(BufferReader_) {
	    BufferReader = BufferReader_;

	    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
	    util.merge(Reader.prototype, {

	        int64: function read_int64() {
	            return readLongVarint.call(this)[fn](false);
	        },

	        uint64: function read_uint64() {
	            return readLongVarint.call(this)[fn](true);
	        },

	        sint64: function read_sint64() {
	            return readLongVarint.call(this).zzDecode()[fn](false);
	        },

	        fixed64: function read_fixed64() {
	            return readFixed64.call(this)[fn](true);
	        },

	        sfixed64: function read_sfixed64() {
	            return readFixed64.call(this)[fn](false);
	        }

	    });
	};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = BufferReader;

	// extends Reader
	var Reader = __webpack_require__(92);
	(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

	var util = __webpack_require__(82);

	/**
	 * Constructs a new buffer reader instance.
	 * @classdesc Wire format reader using node buffers.
	 * @extends Reader
	 * @constructor
	 * @param {Buffer} buffer Buffer to read from
	 */
	function BufferReader(buffer) {
	    Reader.call(this, buffer);

	    /**
	     * Read buffer.
	     * @name BufferReader#buf
	     * @type {Buffer}
	     */
	}

	/* istanbul ignore else */
	if (util.Buffer)
	    BufferReader.prototype._slice = util.Buffer.prototype.slice;

	/**
	 * @override
	 */
	BufferReader.prototype.string = function read_string_buffer() {
	    var len = this.uint32(); // modifies pos
	    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @name BufferReader#bytes
	 * @function
	 * @returns {Buffer} Value read
	 */


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * Streaming RPC helpers.
	 * @namespace
	 */
	var rpc = exports;

	/**
	 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
	 * @typedef RPCImpl
	 * @type {function}
	 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
	 * @param {Uint8Array} requestData Request data
	 * @param {RPCImplCallback} callback Callback function
	 * @returns {undefined}
	 * @example
	 * function rpcImpl(method, requestData, callback) {
	 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
	 *         throw Error("no such method");
	 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
	 *         callback(err, responseData);
	 *     });
	 * }
	 */

	/**
	 * Node-style callback as used by {@link RPCImpl}.
	 * @typedef RPCImplCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any, otherwise `null`
	 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
	 * @returns {undefined}
	 */

	rpc.Service = __webpack_require__(95);


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Service;

	var util = __webpack_require__(82);

	// Extends EventEmitter
	(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

	/**
	 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
	 *
	 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
	 * @typedef rpc.ServiceMethodCallback
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {TRes} [response] Response message
	 * @returns {undefined}
	 */

	/**
	 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
	 * @typedef rpc.ServiceMethod
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
	 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
	 */

	/**
	 * Constructs a new RPC service instance.
	 * @classdesc An RPC service as returned by {@link Service#create}.
	 * @exports rpc.Service
	 * @extends util.EventEmitter
	 * @constructor
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 */
	function Service(rpcImpl, requestDelimited, responseDelimited) {

	    if (typeof rpcImpl !== "function")
	        throw TypeError("rpcImpl must be a function");

	    util.EventEmitter.call(this);

	    /**
	     * RPC implementation. Becomes `null` once the service is ended.
	     * @type {RPCImpl|null}
	     */
	    this.rpcImpl = rpcImpl;

	    /**
	     * Whether requests are length-delimited.
	     * @type {boolean}
	     */
	    this.requestDelimited = Boolean(requestDelimited);

	    /**
	     * Whether responses are length-delimited.
	     * @type {boolean}
	     */
	    this.responseDelimited = Boolean(responseDelimited);
	}

	/**
	 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
	 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
	 * @param {Constructor<TReq>} requestCtor Request constructor
	 * @param {Constructor<TRes>} responseCtor Response constructor
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
	 * @returns {undefined}
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 */
	Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

	    if (!request)
	        throw TypeError("request must be specified");

	    var self = this;
	    if (!callback)
	        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

	    if (!self.rpcImpl) {
	        setTimeout(function() { callback(Error("already ended")); }, 0);
	        return undefined;
	    }

	    try {
	        return self.rpcImpl(
	            method,
	            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
	            function rpcCallback(err, response) {

	                if (err) {
	                    self.emit("error", err, method);
	                    return callback(err);
	                }

	                if (response === null) {
	                    self.end(/* endedByRPC */ true);
	                    return undefined;
	                }

	                if (!(response instanceof responseCtor)) {
	                    try {
	                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
	                    } catch (err) {
	                        self.emit("error", err, method);
	                        return callback(err);
	                    }
	                }

	                self.emit("data", response, method);
	                return callback(null, response);
	            }
	        );
	    } catch (err) {
	        self.emit("error", err, method);
	        setTimeout(function() { callback(err); }, 0);
	        return undefined;
	    }
	};

	/**
	 * Ends this service and emits the `end` event.
	 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
	 * @returns {rpc.Service} `this`
	 */
	Service.prototype.end = function end(endedByRPC) {
	    if (this.rpcImpl) {
	        if (!endedByRPC) // signal end to rpcImpl
	            this.rpcImpl(null, null, null);
	        this.rpcImpl = null;
	        this.emit("end").off();
	    }
	    return this;
	};


/***/ }),
/* 96 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = {};

	/**
	 * Named roots.
	 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
	 * Can also be used manually to make roots available accross modules.
	 * @name roots
	 * @type {Object.<string,Root>}
	 * @example
	 * // pbjs -r myroot -o compiled.js ...
	 *
	 * // in another module:
	 * require("./compiled.js");
	 *
	 * // in any subsequent module:
	 * var root = protobuf.roots["myroot"];
	 */


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = encoder;

	var Enum     = __webpack_require__(98),
	    types    = __webpack_require__(107),
	    util     = __webpack_require__(100);

	/**
	 * Generates a partial message type encoder.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {number} fieldIndex Field index
	 * @param {string} ref Variable reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genTypePartial(gen, field, fieldIndex, ref) {
	    return field.resolvedType.group
	        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
	        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
	}

	/**
	 * Generates an encoder specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	function encoder(mtype) {
	    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
	    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
	    ("if(!w)")
	        ("w=Writer.create()");

	    var i, ref;

	    // "when a message is serialized its known fields should be written sequentially by field number"
	    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

	    for (var i = 0; i < fields.length; ++i) {
	        var field    = fields[i].resolve(),
	            index    = mtype._fieldsArray.indexOf(field),
	            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
	            wireType = types.basic[type];
	            ref      = "m" + util.safeProp(field.name);

	        // Map fields
	        if (field.map) {
	            gen
	    ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name) // !== undefined && !== null
	        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
	            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
	            if (wireType === undefined) gen
	            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
	            else gen
	            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
	            gen
	        ("}")
	    ("}");

	            // Repeated fields
	        } else if (field.repeated) { gen
	    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

	            // Packed repeated
	            if (field.packed && types.packed[type] !== undefined) { gen

	        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
	        ("for(var i=0;i<%s.length;++i)", ref)
	            ("w.%s(%s[i])", type, ref)
	        ("w.ldelim()");

	            // Non-packed
	            } else { gen

	        ("for(var i=0;i<%s.length;++i)", ref);
	                if (wireType === undefined)
	            genTypePartial(gen, field, index, ref + "[i]");
	                else gen
	            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

	            } gen
	    ("}");

	        // Non-repeated
	        } else {
	            if (field.optional) gen
	    ("if(%s!=null&&m.hasOwnProperty(%j))", ref, field.name); // !== undefined && !== null

	            if (wireType === undefined)
	        genTypePartial(gen, field, index, ref);
	            else gen
	        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

	        }
	    }

	    return gen
	    ("return w");
	    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
	}

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Enum;

	// extends ReflectionObject
	var ReflectionObject = __webpack_require__(99);
	((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

	var Namespace = __webpack_require__(105),
	    util = __webpack_require__(100);

	/**
	 * Constructs a new enum instance.
	 * @classdesc Reflected enum.
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {Object.<string,number>} [values] Enum values as an object, by name
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] The comment for this enum
	 * @param {Object.<string,string>} [comments] The value comments for this enum
	 */
	function Enum(name, values, options, comment, comments) {
	    ReflectionObject.call(this, name, options);

	    if (values && typeof values !== "object")
	        throw TypeError("values must be an object");

	    /**
	     * Enum values by id.
	     * @type {Object.<number,string>}
	     */
	    this.valuesById = {};

	    /**
	     * Enum values by name.
	     * @type {Object.<string,number>}
	     */
	    this.values = Object.create(this.valuesById); // toJSON, marker

	    /**
	     * Enum comment text.
	     * @type {string|null}
	     */
	    this.comment = comment;

	    /**
	     * Value comment texts, if any.
	     * @type {Object.<string,string>}
	     */
	    this.comments = comments || {};

	    /**
	     * Reserved ranges, if any.
	     * @type {Array.<number[]|string>}
	     */
	    this.reserved = undefined; // toJSON

	    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
	    // compatible enum. This is used by pbts to write actual enum definitions that work for
	    // static and reflection code alike instead of emitting generic object definitions.

	    if (values)
	        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
	            if (typeof values[keys[i]] === "number") // use forward entries only
	                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
	}

	/**
	 * Enum descriptor.
	 * @interface IEnum
	 * @property {Object.<string,number>} values Enum values
	 * @property {Object.<string,*>} [options] Enum options
	 */

	/**
	 * Constructs an enum from an enum descriptor.
	 * @param {string} name Enum name
	 * @param {IEnum} json Enum descriptor
	 * @returns {Enum} Created enum
	 * @throws {TypeError} If arguments are invalid
	 */
	Enum.fromJSON = function fromJSON(name, json) {
	    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
	    enm.reserved = json.reserved;
	    return enm;
	};

	/**
	 * Converts this enum to an enum descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IEnum} Enum descriptor
	 */
	Enum.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options"  , this.options,
	        "values"   , this.values,
	        "reserved" , this.reserved && this.reserved.length ? this.reserved : undefined,
	        "comment"  , keepComments ? this.comment : undefined,
	        "comments" , keepComments ? this.comments : undefined
	    ]);
	};

	/**
	 * Adds a value to this enum.
	 * @param {string} name Value name
	 * @param {number} id Value id
	 * @param {string} [comment] Comment, if any
	 * @returns {Enum} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If there is already a value with this name or id
	 */
	Enum.prototype.add = function add(name, id, comment) {
	    // utilized by the parser but not by .fromJSON

	    if (!util.isString(name))
	        throw TypeError("name must be a string");

	    if (!util.isInteger(id))
	        throw TypeError("id must be an integer");

	    if (this.values[name] !== undefined)
	        throw Error("duplicate name '" + name + "' in " + this);

	    if (this.isReservedId(id))
	        throw Error("id " + id + " is reserved in " + this);

	    if (this.isReservedName(name))
	        throw Error("name '" + name + "' is reserved in " + this);

	    if (this.valuesById[id] !== undefined) {
	        if (!(this.options && this.options.allow_alias))
	            throw Error("duplicate id " + id + " in " + this);
	        this.values[name] = id;
	    } else
	        this.valuesById[this.values[name] = id] = name;

	    this.comments[name] = comment || null;
	    return this;
	};

	/**
	 * Removes a value from this enum
	 * @param {string} name Value name
	 * @returns {Enum} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If `name` is not a name of this enum
	 */
	Enum.prototype.remove = function remove(name) {

	    if (!util.isString(name))
	        throw TypeError("name must be a string");

	    var val = this.values[name];
	    if (val == null)
	        throw Error("name '" + name + "' does not exist in " + this);

	    delete this.valuesById[val];
	    delete this.values[name];
	    delete this.comments[name];

	    return this;
	};

	/**
	 * Tests if the specified id is reserved.
	 * @param {number} id Id to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Enum.prototype.isReservedId = function isReservedId(id) {
	    return Namespace.isReservedId(this.reserved, id);
	};

	/**
	 * Tests if the specified name is reserved.
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Enum.prototype.isReservedName = function isReservedName(name) {
	    return Namespace.isReservedName(this.reserved, name);
	};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = ReflectionObject;

	ReflectionObject.className = "ReflectionObject";

	var util = __webpack_require__(100);

	var Root; // cyclic

	/**
	 * Constructs a new reflection object instance.
	 * @classdesc Base class of all reflection objects.
	 * @constructor
	 * @param {string} name Object name
	 * @param {Object.<string,*>} [options] Declared options
	 * @abstract
	 */
	function ReflectionObject(name, options) {

	    if (!util.isString(name))
	        throw TypeError("name must be a string");

	    if (options && !util.isObject(options))
	        throw TypeError("options must be an object");

	    /**
	     * Options.
	     * @type {Object.<string,*>|undefined}
	     */
	    this.options = options; // toJSON

	    /**
	     * Unique name within its namespace.
	     * @type {string}
	     */
	    this.name = name;

	    /**
	     * Parent namespace.
	     * @type {Namespace|null}
	     */
	    this.parent = null;

	    /**
	     * Whether already resolved or not.
	     * @type {boolean}
	     */
	    this.resolved = false;

	    /**
	     * Comment text, if any.
	     * @type {string|null}
	     */
	    this.comment = null;

	    /**
	     * Defining file name.
	     * @type {string|null}
	     */
	    this.filename = null;
	}

	Object.defineProperties(ReflectionObject.prototype, {

	    /**
	     * Reference to the root namespace.
	     * @name ReflectionObject#root
	     * @type {Root}
	     * @readonly
	     */
	    root: {
	        get: function() {
	            var ptr = this;
	            while (ptr.parent !== null)
	                ptr = ptr.parent;
	            return ptr;
	        }
	    },

	    /**
	     * Full name including leading dot.
	     * @name ReflectionObject#fullName
	     * @type {string}
	     * @readonly
	     */
	    fullName: {
	        get: function() {
	            var path = [ this.name ],
	                ptr = this.parent;
	            while (ptr) {
	                path.unshift(ptr.name);
	                ptr = ptr.parent;
	            }
	            return path.join(".");
	        }
	    }
	});

	/**
	 * Converts this reflection object to its descriptor representation.
	 * @returns {Object.<string,*>} Descriptor
	 * @abstract
	 */
	ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
	    throw Error(); // not implemented, shouldn't happen
	};

	/**
	 * Called when this object is added to a parent.
	 * @param {ReflectionObject} parent Parent added to
	 * @returns {undefined}
	 */
	ReflectionObject.prototype.onAdd = function onAdd(parent) {
	    if (this.parent && this.parent !== parent)
	        this.parent.remove(this);
	    this.parent = parent;
	    this.resolved = false;
	    var root = parent.root;
	    if (root instanceof Root)
	        root._handleAdd(this);
	};

	/**
	 * Called when this object is removed from a parent.
	 * @param {ReflectionObject} parent Parent removed from
	 * @returns {undefined}
	 */
	ReflectionObject.prototype.onRemove = function onRemove(parent) {
	    var root = parent.root;
	    if (root instanceof Root)
	        root._handleRemove(this);
	    this.parent = null;
	    this.resolved = false;
	};

	/**
	 * Resolves this objects type references.
	 * @returns {ReflectionObject} `this`
	 */
	ReflectionObject.prototype.resolve = function resolve() {
	    if (this.resolved)
	        return this;
	    if (this.root instanceof Root)
	        this.resolved = true; // only if part of a root
	    return this;
	};

	/**
	 * Gets an option value.
	 * @param {string} name Option name
	 * @returns {*} Option value or `undefined` if not set
	 */
	ReflectionObject.prototype.getOption = function getOption(name) {
	    if (this.options)
	        return this.options[name];
	    return undefined;
	};

	/**
	 * Sets an option.
	 * @param {string} name Option name
	 * @param {*} value Option value
	 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
	 * @returns {ReflectionObject} `this`
	 */
	ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
	    if (!ifNotSet || !this.options || this.options[name] === undefined)
	        (this.options || (this.options = {}))[name] = value;
	    return this;
	};

	/**
	 * Sets multiple options.
	 * @param {Object.<string,*>} options Options to set
	 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
	 * @returns {ReflectionObject} `this`
	 */
	ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
	    if (options)
	        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
	            this.setOption(keys[i], options[keys[i]], ifNotSet);
	    return this;
	};

	/**
	 * Converts this instance to its string representation.
	 * @returns {string} Class name[, space, full name]
	 */
	ReflectionObject.prototype.toString = function toString() {
	    var className = this.constructor.className,
	        fullName  = this.fullName;
	    if (fullName.length)
	        return className + " " + fullName;
	    return className;
	};

	// Sets up cyclic dependencies (called in index-light)
	ReflectionObject._configure = function(Root_) {
	    Root = Root_;
	};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * Various utility functions.
	 * @namespace
	 */
	var util = module.exports = __webpack_require__(82);

	var roots = __webpack_require__(96);

	var Type, // cyclic
	    Enum;

	util.codegen = __webpack_require__(101);
	util.fetch   = __webpack_require__(102);
	util.path    = __webpack_require__(103);

	/**
	 * Node's fs module if available.
	 * @type {Object.<string,*>}
	 */
	util.fs = util.inquire("fs");

	/**
	 * Converts an object's values to an array.
	 * @param {Object.<string,*>} object Object to convert
	 * @returns {Array.<*>} Converted array
	 */
	util.toArray = function toArray(object) {
	    if (object) {
	        var keys  = Object.keys(object),
	            array = new Array(keys.length),
	            index = 0;
	        while (index < keys.length)
	            array[index] = object[keys[index++]];
	        return array;
	    }
	    return [];
	};

	/**
	 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
	 * @param {Array.<*>} array Array to convert
	 * @returns {Object.<string,*>} Converted object
	 */
	util.toObject = function toObject(array) {
	    var object = {},
	        index  = 0;
	    while (index < array.length) {
	        var key = array[index++],
	            val = array[index++];
	        if (val !== undefined)
	            object[key] = val;
	    }
	    return object;
	};

	var safePropBackslashRe = /\\/g,
	    safePropQuoteRe     = /"/g;

	/**
	 * Tests whether the specified name is a reserved word in JS.
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	util.isReserved = function isReserved(name) {
	    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
	};

	/**
	 * Returns a safe property accessor for the specified property name.
	 * @param {string} prop Property name
	 * @returns {string} Safe accessor
	 */
	util.safeProp = function safeProp(prop) {
	    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
	        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
	    return "." + prop;
	};

	/**
	 * Converts the first character of a string to upper case.
	 * @param {string} str String to convert
	 * @returns {string} Converted string
	 */
	util.ucFirst = function ucFirst(str) {
	    return str.charAt(0).toUpperCase() + str.substring(1);
	};

	var camelCaseRe = /_([a-z])/g;

	/**
	 * Converts a string to camel case.
	 * @param {string} str String to convert
	 * @returns {string} Converted string
	 */
	util.camelCase = function camelCase(str) {
	    return str.substring(0, 1)
	         + str.substring(1)
	               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
	};

	/**
	 * Compares reflected fields by id.
	 * @param {Field} a First field
	 * @param {Field} b Second field
	 * @returns {number} Comparison value
	 */
	util.compareFieldsById = function compareFieldsById(a, b) {
	    return a.id - b.id;
	};

	/**
	 * Decorator helper for types (TypeScript).
	 * @param {Constructor<T>} ctor Constructor function
	 * @param {string} [typeName] Type name, defaults to the constructor's name
	 * @returns {Type} Reflected type
	 * @template T extends Message<T>
	 * @property {Root} root Decorators root
	 */
	util.decorateType = function decorateType(ctor, typeName) {

	    /* istanbul ignore if */
	    if (ctor.$type) {
	        if (typeName && ctor.$type.name !== typeName) {
	            util.decorateRoot.remove(ctor.$type);
	            ctor.$type.name = typeName;
	            util.decorateRoot.add(ctor.$type);
	        }
	        return ctor.$type;
	    }

	    /* istanbul ignore next */
	    if (!Type)
	        Type = __webpack_require__(104);

	    var type = new Type(typeName || ctor.name);
	    util.decorateRoot.add(type);
	    type.ctor = ctor; // sets up .encode, .decode etc.
	    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
	    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
	    return type;
	};

	var decorateEnumIndex = 0;

	/**
	 * Decorator helper for enums (TypeScript).
	 * @param {Object} object Enum object
	 * @returns {Enum} Reflected enum
	 */
	util.decorateEnum = function decorateEnum(object) {

	    /* istanbul ignore if */
	    if (object.$type)
	        return object.$type;

	    /* istanbul ignore next */
	    if (!Enum)
	        Enum = __webpack_require__(98);

	    var enm = new Enum("Enum" + decorateEnumIndex++, object);
	    util.decorateRoot.add(enm);
	    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
	    return enm;
	};

	/**
	 * Decorator root (TypeScript).
	 * @name util.decorateRoot
	 * @type {Root}
	 * @readonly
	 */
	Object.defineProperty(util, "decorateRoot", {
	    get: function() {
	        return roots["decorated"] || (roots["decorated"] = new (__webpack_require__(117))());
	    }
	});


/***/ }),
/* 101 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = codegen;

	/**
	 * Begins generating a function.
	 * @memberof util
	 * @param {string[]} functionParams Function parameter names
	 * @param {string} [functionName] Function name if not anonymous
	 * @returns {Codegen} Appender that appends code to the function's body
	 */
	function codegen(functionParams, functionName) {

	    /* istanbul ignore if */
	    if (typeof functionParams === "string") {
	        functionName = functionParams;
	        functionParams = undefined;
	    }

	    var body = [];

	    /**
	     * Appends code to the function's body or finishes generation.
	     * @typedef Codegen
	     * @type {function}
	     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
	     * @param {...*} [formatParams] Format parameters
	     * @returns {Codegen|Function} Itself or the generated function if finished
	     * @throws {Error} If format parameter counts do not match
	     */

	    function Codegen(formatStringOrScope) {
	        // note that explicit array handling below makes this ~50% faster

	        // finish the function
	        if (typeof formatStringOrScope !== "string") {
	            var source = toString();
	            if (codegen.verbose)
	                console.log("codegen: " + source); // eslint-disable-line no-console
	            source = "return " + source;
	            if (formatStringOrScope) {
	                var scopeKeys   = Object.keys(formatStringOrScope),
	                    scopeParams = new Array(scopeKeys.length + 1),
	                    scopeValues = new Array(scopeKeys.length),
	                    scopeOffset = 0;
	                while (scopeOffset < scopeKeys.length) {
	                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
	                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
	                }
	                scopeParams[scopeOffset] = source;
	                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
	            }
	            return Function(source)(); // eslint-disable-line no-new-func
	        }

	        // otherwise append to body
	        var formatParams = new Array(arguments.length - 1),
	            formatOffset = 0;
	        while (formatOffset < formatParams.length)
	            formatParams[formatOffset] = arguments[++formatOffset];
	        formatOffset = 0;
	        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
	            var value = formatParams[formatOffset++];
	            switch ($1) {
	                case "d": case "f": return String(Number(value));
	                case "i": return String(Math.floor(value));
	                case "j": return JSON.stringify(value);
	                case "s": return String(value);
	            }
	            return "%";
	        });
	        if (formatOffset !== formatParams.length)
	            throw Error("parameter count mismatch");
	        body.push(formatStringOrScope);
	        return Codegen;
	    }

	    function toString(functionNameOverride) {
	        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
	    }

	    Codegen.toString = toString;
	    return Codegen;
	}

	/**
	 * Begins generating a function.
	 * @memberof util
	 * @function codegen
	 * @param {string} [functionName] Function name if not anonymous
	 * @returns {Codegen} Appender that appends code to the function's body
	 * @variation 2
	 */

	/**
	 * When set to `true`, codegen will log generated code to console. Useful for debugging.
	 * @name util.codegen.verbose
	 * @type {boolean}
	 */
	codegen.verbose = false;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = fetch;

	var asPromise = __webpack_require__(83),
	    inquire   = __webpack_require__(87);

	var fs = inquire("fs");

	/**
	 * Node-style callback as used by {@link util.fetch}.
	 * @typedef FetchCallback
	 * @type {function}
	 * @param {?Error} error Error, if any, otherwise `null`
	 * @param {string} [contents] File contents, if there hasn't been an error
	 * @returns {undefined}
	 */

	/**
	 * Options as used by {@link util.fetch}.
	 * @typedef FetchOptions
	 * @type {Object}
	 * @property {boolean} [binary=false] Whether expecting a binary response
	 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
	 */

	/**
	 * Fetches the contents of a file.
	 * @memberof util
	 * @param {string} filename File path or url
	 * @param {FetchOptions} options Fetch options
	 * @param {FetchCallback} callback Callback function
	 * @returns {undefined}
	 */
	function fetch(filename, options, callback) {
	    if (typeof options === "function") {
	        callback = options;
	        options = {};
	    } else if (!options)
	        options = {};

	    if (!callback)
	        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

	    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
	    if (!options.xhr && fs && fs.readFile)
	        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
	            return err && typeof XMLHttpRequest !== "undefined"
	                ? fetch.xhr(filename, options, callback)
	                : err
	                ? callback(err)
	                : callback(null, options.binary ? contents : contents.toString("utf8"));
	        });

	    // use the XHR version otherwise.
	    return fetch.xhr(filename, options, callback);
	}

	/**
	 * Fetches the contents of a file.
	 * @name util.fetch
	 * @function
	 * @param {string} path File path or url
	 * @param {FetchCallback} callback Callback function
	 * @returns {undefined}
	 * @variation 2
	 */

	/**
	 * Fetches the contents of a file.
	 * @name util.fetch
	 * @function
	 * @param {string} path File path or url
	 * @param {FetchOptions} [options] Fetch options
	 * @returns {Promise<string|Uint8Array>} Promise
	 * @variation 3
	 */

	/**/
	fetch.xhr = function fetch_xhr(filename, options, callback) {
	    var xhr = new XMLHttpRequest();
	    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {

	        if (xhr.readyState !== 4)
	            return undefined;

	        // local cors security errors return status 0 / empty string, too. afaik this cannot be
	        // reliably distinguished from an actually empty file for security reasons. feel free
	        // to send a pull request if you are aware of a solution.
	        if (xhr.status !== 0 && xhr.status !== 200)
	            return callback(Error("status " + xhr.status));

	        // if binary data is expected, make sure that some sort of array is returned, even if
	        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
	        if (options.binary) {
	            var buffer = xhr.response;
	            if (!buffer) {
	                buffer = [];
	                for (var i = 0; i < xhr.responseText.length; ++i)
	                    buffer.push(xhr.responseText.charCodeAt(i) & 255);
	            }
	            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
	        }
	        return callback(null, xhr.responseText);
	    };

	    if (options.binary) {
	        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
	        if ("overrideMimeType" in xhr)
	            xhr.overrideMimeType("text/plain; charset=x-user-defined");
	        xhr.responseType = "arraybuffer";
	    }

	    xhr.open("GET", filename);
	    xhr.send();
	};


/***/ }),
/* 103 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * A minimal path module to resolve Unix, Windows and URL paths alike.
	 * @memberof util
	 * @namespace
	 */
	var path = exports;

	var isAbsolute =
	/**
	 * Tests if the specified path is absolute.
	 * @param {string} path Path to test
	 * @returns {boolean} `true` if path is absolute
	 */
	path.isAbsolute = function isAbsolute(path) {
	    return /^(?:\/|\w+:)/.test(path);
	};

	var normalize =
	/**
	 * Normalizes the specified path.
	 * @param {string} path Path to normalize
	 * @returns {string} Normalized path
	 */
	path.normalize = function normalize(path) {
	    path = path.replace(/\\/g, "/")
	               .replace(/\/{2,}/g, "/");
	    var parts    = path.split("/"),
	        absolute = isAbsolute(path),
	        prefix   = "";
	    if (absolute)
	        prefix = parts.shift() + "/";
	    for (var i = 0; i < parts.length;) {
	        if (parts[i] === "..") {
	            if (i > 0 && parts[i - 1] !== "..")
	                parts.splice(--i, 2);
	            else if (absolute)
	                parts.splice(i, 1);
	            else
	                ++i;
	        } else if (parts[i] === ".")
	            parts.splice(i, 1);
	        else
	            ++i;
	    }
	    return prefix + parts.join("/");
	};

	/**
	 * Resolves the specified include path against the specified origin path.
	 * @param {string} originPath Path to the origin file
	 * @param {string} includePath Include path relative to origin path
	 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
	 * @returns {string} Path to the include file
	 */
	path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
	    if (!alreadyNormalized)
	        includePath = normalize(includePath);
	    if (isAbsolute(includePath))
	        return includePath;
	    if (!alreadyNormalized)
	        originPath = normalize(originPath);
	    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
	};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Type;

	// extends Namespace
	var Namespace = __webpack_require__(105);
	((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

	var Enum      = __webpack_require__(98),
	    OneOf     = __webpack_require__(108),
	    Field     = __webpack_require__(106),
	    MapField  = __webpack_require__(109),
	    Service   = __webpack_require__(110),
	    Message   = __webpack_require__(112),
	    Reader    = __webpack_require__(92),
	    Writer    = __webpack_require__(81),
	    util      = __webpack_require__(100),
	    encoder   = __webpack_require__(97),
	    decoder   = __webpack_require__(113),
	    verifier  = __webpack_require__(114),
	    converter = __webpack_require__(115),
	    wrappers  = __webpack_require__(116);

	/**
	 * Constructs a new reflected message type instance.
	 * @classdesc Reflected message type.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {string} name Message name
	 * @param {Object.<string,*>} [options] Declared options
	 */
	function Type(name, options) {
	    Namespace.call(this, name, options);

	    /**
	     * Message fields.
	     * @type {Object.<string,Field>}
	     */
	    this.fields = {};  // toJSON, marker

	    /**
	     * Oneofs declared within this namespace, if any.
	     * @type {Object.<string,OneOf>}
	     */
	    this.oneofs = undefined; // toJSON

	    /**
	     * Extension ranges, if any.
	     * @type {number[][]}
	     */
	    this.extensions = undefined; // toJSON

	    /**
	     * Reserved ranges, if any.
	     * @type {Array.<number[]|string>}
	     */
	    this.reserved = undefined; // toJSON

	    /*?
	     * Whether this type is a legacy group.
	     * @type {boolean|undefined}
	     */
	    this.group = undefined; // toJSON

	    /**
	     * Cached fields by id.
	     * @type {Object.<number,Field>|null}
	     * @private
	     */
	    this._fieldsById = null;

	    /**
	     * Cached fields as an array.
	     * @type {Field[]|null}
	     * @private
	     */
	    this._fieldsArray = null;

	    /**
	     * Cached oneofs as an array.
	     * @type {OneOf[]|null}
	     * @private
	     */
	    this._oneofsArray = null;

	    /**
	     * Cached constructor.
	     * @type {Constructor<{}>}
	     * @private
	     */
	    this._ctor = null;
	}

	Object.defineProperties(Type.prototype, {

	    /**
	     * Message fields by id.
	     * @name Type#fieldsById
	     * @type {Object.<number,Field>}
	     * @readonly
	     */
	    fieldsById: {
	        get: function() {

	            /* istanbul ignore if */
	            if (this._fieldsById)
	                return this._fieldsById;

	            this._fieldsById = {};
	            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
	                var field = this.fields[names[i]],
	                    id = field.id;

	                /* istanbul ignore if */
	                if (this._fieldsById[id])
	                    throw Error("duplicate id " + id + " in " + this);

	                this._fieldsById[id] = field;
	            }
	            return this._fieldsById;
	        }
	    },

	    /**
	     * Fields of this message as an array for iteration.
	     * @name Type#fieldsArray
	     * @type {Field[]}
	     * @readonly
	     */
	    fieldsArray: {
	        get: function() {
	            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
	        }
	    },

	    /**
	     * Oneofs of this message as an array for iteration.
	     * @name Type#oneofsArray
	     * @type {OneOf[]}
	     * @readonly
	     */
	    oneofsArray: {
	        get: function() {
	            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
	        }
	    },

	    /**
	     * The registered constructor, if any registered, otherwise a generic constructor.
	     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
	     * @name Type#ctor
	     * @type {Constructor<{}>}
	     */
	    ctor: {
	        get: function() {
	            return this._ctor || (this.ctor = Type.generateConstructor(this)());
	        },
	        set: function(ctor) {

	            // Ensure proper prototype
	            var prototype = ctor.prototype;
	            if (!(prototype instanceof Message)) {
	                (ctor.prototype = new Message()).constructor = ctor;
	                util.merge(ctor.prototype, prototype);
	            }

	            // Classes and messages reference their reflected type
	            ctor.$type = ctor.prototype.$type = this;

	            // Mix in static methods
	            util.merge(ctor, Message, true);

	            this._ctor = ctor;

	            // Messages have non-enumerable default values on their prototype
	            var i = 0;
	            for (; i < /* initializes */ this.fieldsArray.length; ++i)
	                this._fieldsArray[i].resolve(); // ensures a proper value

	            // Messages have non-enumerable getters and setters for each virtual oneof field
	            var ctorProperties = {};
	            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
	                ctorProperties[this._oneofsArray[i].resolve().name] = {
	                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
	                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
	                };
	            if (i)
	                Object.defineProperties(ctor.prototype, ctorProperties);
	        }
	    }
	});

	/**
	 * Generates a constructor function for the specified type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	Type.generateConstructor = function generateConstructor(mtype) {
	    /* eslint-disable no-unexpected-multiline */
	    var gen = util.codegen(["p"], mtype.name);
	    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
	    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
	        if ((field = mtype._fieldsArray[i]).map) gen
	            ("this%s={}", util.safeProp(field.name));
	        else if (field.repeated) gen
	            ("this%s=[]", util.safeProp(field.name));
	    return gen
	    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
	        ("this[ks[i]]=p[ks[i]]");
	    /* eslint-enable no-unexpected-multiline */
	};

	function clearCache(type) {
	    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
	    delete type.encode;
	    delete type.decode;
	    delete type.verify;
	    return type;
	}

	/**
	 * Message type descriptor.
	 * @interface IType
	 * @extends INamespace
	 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
	 * @property {Object.<string,IField>} fields Field descriptors
	 * @property {number[][]} [extensions] Extension ranges
	 * @property {number[][]} [reserved] Reserved ranges
	 * @property {boolean} [group=false] Whether a legacy group or not
	 */

	/**
	 * Creates a message type from a message type descriptor.
	 * @param {string} name Message name
	 * @param {IType} json Message type descriptor
	 * @returns {Type} Created message type
	 */
	Type.fromJSON = function fromJSON(name, json) {
	    var type = new Type(name, json.options);
	    type.extensions = json.extensions;
	    type.reserved = json.reserved;
	    var names = Object.keys(json.fields),
	        i = 0;
	    for (; i < names.length; ++i)
	        type.add(
	            ( typeof json.fields[names[i]].keyType !== "undefined"
	            ? MapField.fromJSON
	            : Field.fromJSON )(names[i], json.fields[names[i]])
	        );
	    if (json.oneofs)
	        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
	            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
	    if (json.nested)
	        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
	            var nested = json.nested[names[i]];
	            type.add( // most to least likely
	                ( nested.id !== undefined
	                ? Field.fromJSON
	                : nested.fields !== undefined
	                ? Type.fromJSON
	                : nested.values !== undefined
	                ? Enum.fromJSON
	                : nested.methods !== undefined
	                ? Service.fromJSON
	                : Namespace.fromJSON )(names[i], nested)
	            );
	        }
	    if (json.extensions && json.extensions.length)
	        type.extensions = json.extensions;
	    if (json.reserved && json.reserved.length)
	        type.reserved = json.reserved;
	    if (json.group)
	        type.group = true;
	    if (json.comment)
	        type.comment = json.comment;
	    return type;
	};

	/**
	 * Converts this message type to a message type descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IType} Message type descriptor
	 */
	Type.prototype.toJSON = function toJSON(toJSONOptions) {
	    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options"    , inherited && inherited.options || undefined,
	        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
	        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},
	        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined,
	        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined,
	        "group"      , this.group || undefined,
	        "nested"     , inherited && inherited.nested || undefined,
	        "comment"    , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * @override
	 */
	Type.prototype.resolveAll = function resolveAll() {
	    var fields = this.fieldsArray, i = 0;
	    while (i < fields.length)
	        fields[i++].resolve();
	    var oneofs = this.oneofsArray; i = 0;
	    while (i < oneofs.length)
	        oneofs[i++].resolve();
	    return Namespace.prototype.resolveAll.call(this);
	};

	/**
	 * @override
	 */
	Type.prototype.get = function get(name) {
	    return this.fields[name]
	        || this.oneofs && this.oneofs[name]
	        || this.nested && this.nested[name]
	        || null;
	};

	/**
	 * Adds a nested object to this type.
	 * @param {ReflectionObject} object Nested object to add
	 * @returns {Type} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
	 */
	Type.prototype.add = function add(object) {

	    if (this.get(object.name))
	        throw Error("duplicate name '" + object.name + "' in " + this);

	    if (object instanceof Field && object.extend === undefined) {
	        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
	        // The root object takes care of adding distinct sister-fields to the respective extended
	        // type instead.

	        // avoids calling the getter if not absolutely necessary because it's called quite frequently
	        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
	            throw Error("duplicate id " + object.id + " in " + this);
	        if (this.isReservedId(object.id))
	            throw Error("id " + object.id + " is reserved in " + this);
	        if (this.isReservedName(object.name))
	            throw Error("name '" + object.name + "' is reserved in " + this);

	        if (object.parent)
	            object.parent.remove(object);
	        this.fields[object.name] = object;
	        object.message = this;
	        object.onAdd(this);
	        return clearCache(this);
	    }
	    if (object instanceof OneOf) {
	        if (!this.oneofs)
	            this.oneofs = {};
	        this.oneofs[object.name] = object;
	        object.onAdd(this);
	        return clearCache(this);
	    }
	    return Namespace.prototype.add.call(this, object);
	};

	/**
	 * Removes a nested object from this type.
	 * @param {ReflectionObject} object Nested object to remove
	 * @returns {Type} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If `object` is not a member of this type
	 */
	Type.prototype.remove = function remove(object) {
	    if (object instanceof Field && object.extend === undefined) {
	        // See Type#add for the reason why extension fields are excluded here.

	        /* istanbul ignore if */
	        if (!this.fields || this.fields[object.name] !== object)
	            throw Error(object + " is not a member of " + this);

	        delete this.fields[object.name];
	        object.parent = null;
	        object.onRemove(this);
	        return clearCache(this);
	    }
	    if (object instanceof OneOf) {

	        /* istanbul ignore if */
	        if (!this.oneofs || this.oneofs[object.name] !== object)
	            throw Error(object + " is not a member of " + this);

	        delete this.oneofs[object.name];
	        object.parent = null;
	        object.onRemove(this);
	        return clearCache(this);
	    }
	    return Namespace.prototype.remove.call(this, object);
	};

	/**
	 * Tests if the specified id is reserved.
	 * @param {number} id Id to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Type.prototype.isReservedId = function isReservedId(id) {
	    return Namespace.isReservedId(this.reserved, id);
	};

	/**
	 * Tests if the specified name is reserved.
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Type.prototype.isReservedName = function isReservedName(name) {
	    return Namespace.isReservedName(this.reserved, name);
	};

	/**
	 * Creates a new message of this type using the specified properties.
	 * @param {Object.<string,*>} [properties] Properties to set
	 * @returns {Message<{}>} Message instance
	 */
	Type.prototype.create = function create(properties) {
	    return new this.ctor(properties);
	};

	/**
	 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
	 * @returns {Type} `this`
	 */
	Type.prototype.setup = function setup() {
	    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
	    // multiple times (V8, soft-deopt prototype-check).

	    var fullName = this.fullName,
	        types    = [];
	    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
	        types.push(this._fieldsArray[i].resolve().resolvedType);

	    // Replace setup methods with type-specific generated functions
	    this.encode = encoder(this)({
	        Writer : Writer,
	        types  : types,
	        util   : util
	    });
	    this.decode = decoder(this)({
	        Reader : Reader,
	        types  : types,
	        util   : util
	    });
	    this.verify = verifier(this)({
	        types : types,
	        util  : util
	    });
	    this.fromObject = converter.fromObject(this)({
	        types : types,
	        util  : util
	    });
	    this.toObject = converter.toObject(this)({
	        types : types,
	        util  : util
	    });

	    // Inject custom wrappers for common types
	    var wrapper = wrappers[fullName];
	    if (wrapper) {
	        var originalThis = Object.create(this);
	        // if (wrapper.fromObject) {
	            originalThis.fromObject = this.fromObject;
	            this.fromObject = wrapper.fromObject.bind(originalThis);
	        // }
	        // if (wrapper.toObject) {
	            originalThis.toObject = this.toObject;
	            this.toObject = wrapper.toObject.bind(originalThis);
	        // }
	    }

	    return this;
	};

	/**
	 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
	 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
	 * @param {Writer} [writer] Writer to encode to
	 * @returns {Writer} writer
	 */
	Type.prototype.encode = function encode_setup(message, writer) {
	    return this.setup().encode(message, writer); // overrides this method
	};

	/**
	 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
	 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
	 * @param {Writer} [writer] Writer to encode to
	 * @returns {Writer} writer
	 */
	Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
	    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
	};

	/**
	 * Decodes a message of this type.
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
	 * @param {number} [length] Length of the message, if known beforehand
	 * @returns {Message<{}>} Decoded message
	 * @throws {Error} If the payload is not a reader or valid buffer
	 * @throws {util.ProtocolError<{}>} If required fields are missing
	 */
	Type.prototype.decode = function decode_setup(reader, length) {
	    return this.setup().decode(reader, length); // overrides this method
	};

	/**
	 * Decodes a message of this type preceeded by its byte length as a varint.
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
	 * @returns {Message<{}>} Decoded message
	 * @throws {Error} If the payload is not a reader or valid buffer
	 * @throws {util.ProtocolError} If required fields are missing
	 */
	Type.prototype.decodeDelimited = function decodeDelimited(reader) {
	    if (!(reader instanceof Reader))
	        reader = Reader.create(reader);
	    return this.decode(reader, reader.uint32());
	};

	/**
	 * Verifies that field values are valid and that required fields are present.
	 * @param {Object.<string,*>} message Plain object to verify
	 * @returns {null|string} `null` if valid, otherwise the reason why it is not
	 */
	Type.prototype.verify = function verify_setup(message) {
	    return this.setup().verify(message); // overrides this method
	};

	/**
	 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
	 * @param {Object.<string,*>} object Plain object to convert
	 * @returns {Message<{}>} Message instance
	 */
	Type.prototype.fromObject = function fromObject(object) {
	    return this.setup().fromObject(object);
	};

	/**
	 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
	 * @interface IConversionOptions
	 * @property {Function} [longs] Long conversion type.
	 * Valid values are `String` and `Number` (the global types).
	 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
	 * @property {Function} [enums] Enum value conversion type.
	 * Only valid value is `String` (the global type).
	 * Defaults to copy the present value, which is the numeric id.
	 * @property {Function} [bytes] Bytes value conversion type.
	 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
	 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
	 * @property {boolean} [defaults=false] Also sets default values on the resulting object
	 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
	 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
	 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
	 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
	 */

	/**
	 * Creates a plain object from a message of this type. Also converts values to other types if specified.
	 * @param {Message<{}>} message Message instance
	 * @param {IConversionOptions} [options] Conversion options
	 * @returns {Object.<string,*>} Plain object
	 */
	Type.prototype.toObject = function toObject(message, options) {
	    return this.setup().toObject(message, options);
	};

	/**
	 * Decorator function as returned by {@link Type.d} (TypeScript).
	 * @typedef TypeDecorator
	 * @type {function}
	 * @param {Constructor<T>} target Target constructor
	 * @returns {undefined}
	 * @template T extends Message<T>
	 */

	/**
	 * Type decorator (TypeScript).
	 * @param {string} [typeName] Type name, defaults to the constructor's name
	 * @returns {TypeDecorator<T>} Decorator function
	 * @template T extends Message<T>
	 */
	Type.d = function decorateType(typeName) {
	    return function typeDecorator(target) {
	        util.decorateType(target, typeName);
	    };
	};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Namespace;

	// extends ReflectionObject
	var ReflectionObject = __webpack_require__(99);
	((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

	var Field    = __webpack_require__(106),
	    util     = __webpack_require__(100);

	var Type,    // cyclic
	    Service,
	    Enum;

	/**
	 * Constructs a new namespace instance.
	 * @name Namespace
	 * @classdesc Reflected namespace.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {string} name Namespace name
	 * @param {Object.<string,*>} [options] Declared options
	 */

	/**
	 * Constructs a namespace from JSON.
	 * @memberof Namespace
	 * @function
	 * @param {string} name Namespace name
	 * @param {Object.<string,*>} json JSON object
	 * @returns {Namespace} Created namespace
	 * @throws {TypeError} If arguments are invalid
	 */
	Namespace.fromJSON = function fromJSON(name, json) {
	    return new Namespace(name, json.options).addJSON(json.nested);
	};

	/**
	 * Converts an array of reflection objects to JSON.
	 * @memberof Namespace
	 * @param {ReflectionObject[]} array Object array
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
	 */
	function arrayToJSON(array, toJSONOptions) {
	    if (!(array && array.length))
	        return undefined;
	    var obj = {};
	    for (var i = 0; i < array.length; ++i)
	        obj[array[i].name] = array[i].toJSON(toJSONOptions);
	    return obj;
	}

	Namespace.arrayToJSON = arrayToJSON;

	/**
	 * Tests if the specified id is reserved.
	 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
	 * @param {number} id Id to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Namespace.isReservedId = function isReservedId(reserved, id) {
	    if (reserved)
	        for (var i = 0; i < reserved.length; ++i)
	            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] >= id)
	                return true;
	    return false;
	};

	/**
	 * Tests if the specified name is reserved.
	 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Namespace.isReservedName = function isReservedName(reserved, name) {
	    if (reserved)
	        for (var i = 0; i < reserved.length; ++i)
	            if (reserved[i] === name)
	                return true;
	    return false;
	};

	/**
	 * Not an actual constructor. Use {@link Namespace} instead.
	 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
	 * @exports NamespaceBase
	 * @extends ReflectionObject
	 * @abstract
	 * @constructor
	 * @param {string} name Namespace name
	 * @param {Object.<string,*>} [options] Declared options
	 * @see {@link Namespace}
	 */
	function Namespace(name, options) {
	    ReflectionObject.call(this, name, options);

	    /**
	     * Nested objects by name.
	     * @type {Object.<string,ReflectionObject>|undefined}
	     */
	    this.nested = undefined; // toJSON

	    /**
	     * Cached nested objects as an array.
	     * @type {ReflectionObject[]|null}
	     * @private
	     */
	    this._nestedArray = null;
	}

	function clearCache(namespace) {
	    namespace._nestedArray = null;
	    return namespace;
	}

	/**
	 * Nested objects of this namespace as an array for iteration.
	 * @name NamespaceBase#nestedArray
	 * @type {ReflectionObject[]}
	 * @readonly
	 */
	Object.defineProperty(Namespace.prototype, "nestedArray", {
	    get: function() {
	        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
	    }
	});

	/**
	 * Namespace descriptor.
	 * @interface INamespace
	 * @property {Object.<string,*>} [options] Namespace options
	 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
	 */

	/**
	 * Any extension field descriptor.
	 * @typedef AnyExtensionField
	 * @type {IExtensionField|IExtensionMapField}
	 */

	/**
	 * Any nested object descriptor.
	 * @typedef AnyNestedObject
	 * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
	 */
	// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

	/**
	 * Converts this namespace to a namespace descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {INamespace} Namespace descriptor
	 */
	Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
	    return util.toObject([
	        "options" , this.options,
	        "nested"  , arrayToJSON(this.nestedArray, toJSONOptions)
	    ]);
	};

	/**
	 * Adds nested objects to this namespace from nested object descriptors.
	 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
	 * @returns {Namespace} `this`
	 */
	Namespace.prototype.addJSON = function addJSON(nestedJson) {
	    var ns = this;
	    /* istanbul ignore else */
	    if (nestedJson) {
	        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
	            nested = nestedJson[names[i]];
	            ns.add( // most to least likely
	                ( nested.fields !== undefined
	                ? Type.fromJSON
	                : nested.values !== undefined
	                ? Enum.fromJSON
	                : nested.methods !== undefined
	                ? Service.fromJSON
	                : nested.id !== undefined
	                ? Field.fromJSON
	                : Namespace.fromJSON )(names[i], nested)
	            );
	        }
	    }
	    return this;
	};

	/**
	 * Gets the nested object of the specified name.
	 * @param {string} name Nested object name
	 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
	 */
	Namespace.prototype.get = function get(name) {
	    return this.nested && this.nested[name]
	        || null;
	};

	/**
	 * Gets the values of the nested {@link Enum|enum} of the specified name.
	 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
	 * @param {string} name Nested enum name
	 * @returns {Object.<string,number>} Enum values
	 * @throws {Error} If there is no such enum
	 */
	Namespace.prototype.getEnum = function getEnum(name) {
	    if (this.nested && this.nested[name] instanceof Enum)
	        return this.nested[name].values;
	    throw Error("no such enum: " + name);
	};

	/**
	 * Adds a nested object to this namespace.
	 * @param {ReflectionObject} object Nested object to add
	 * @returns {Namespace} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If there is already a nested object with this name
	 */
	Namespace.prototype.add = function add(object) {

	    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))
	        throw TypeError("object must be a valid nested object");

	    if (!this.nested)
	        this.nested = {};
	    else {
	        var prev = this.get(object.name);
	        if (prev) {
	            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
	                // replace plain namespace but keep existing nested elements and options
	                var nested = prev.nestedArray;
	                for (var i = 0; i < nested.length; ++i)
	                    object.add(nested[i]);
	                this.remove(prev);
	                if (!this.nested)
	                    this.nested = {};
	                object.setOptions(prev.options, true);

	            } else
	                throw Error("duplicate name '" + object.name + "' in " + this);
	        }
	    }
	    this.nested[object.name] = object;
	    object.onAdd(this);
	    return clearCache(this);
	};

	/**
	 * Removes a nested object from this namespace.
	 * @param {ReflectionObject} object Nested object to remove
	 * @returns {Namespace} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If `object` is not a member of this namespace
	 */
	Namespace.prototype.remove = function remove(object) {

	    if (!(object instanceof ReflectionObject))
	        throw TypeError("object must be a ReflectionObject");
	    if (object.parent !== this)
	        throw Error(object + " is not a member of " + this);

	    delete this.nested[object.name];
	    if (!Object.keys(this.nested).length)
	        this.nested = undefined;

	    object.onRemove(this);
	    return clearCache(this);
	};

	/**
	 * Defines additial namespaces within this one if not yet existing.
	 * @param {string|string[]} path Path to create
	 * @param {*} [json] Nested types to create from JSON
	 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
	 */
	Namespace.prototype.define = function define(path, json) {

	    if (util.isString(path))
	        path = path.split(".");
	    else if (!Array.isArray(path))
	        throw TypeError("illegal path");
	    if (path && path.length && path[0] === "")
	        throw Error("path must be relative");

	    var ptr = this;
	    while (path.length > 0) {
	        var part = path.shift();
	        if (ptr.nested && ptr.nested[part]) {
	            ptr = ptr.nested[part];
	            if (!(ptr instanceof Namespace))
	                throw Error("path conflicts with non-namespace objects");
	        } else
	            ptr.add(ptr = new Namespace(part));
	    }
	    if (json)
	        ptr.addJSON(json);
	    return ptr;
	};

	/**
	 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
	 * @returns {Namespace} `this`
	 */
	Namespace.prototype.resolveAll = function resolveAll() {
	    var nested = this.nestedArray, i = 0;
	    while (i < nested.length)
	        if (nested[i] instanceof Namespace)
	            nested[i++].resolveAll();
	        else
	            nested[i++].resolve();
	    return this.resolve();
	};

	/**
	 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
	 * @param {string|string[]} path Path to look up
	 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
	 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
	 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
	 */
	Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

	    /* istanbul ignore next */
	    if (typeof filterTypes === "boolean") {
	        parentAlreadyChecked = filterTypes;
	        filterTypes = undefined;
	    } else if (filterTypes && !Array.isArray(filterTypes))
	        filterTypes = [ filterTypes ];

	    if (util.isString(path) && path.length) {
	        if (path === ".")
	            return this.root;
	        path = path.split(".");
	    } else if (!path.length)
	        return this;

	    // Start at root if path is absolute
	    if (path[0] === "")
	        return this.root.lookup(path.slice(1), filterTypes);

	    // Test if the first part matches any nested object, and if so, traverse if path contains more
	    var found = this.get(path[0]);
	    if (found) {
	        if (path.length === 1) {
	            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
	                return found;
	        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
	            return found;

	    // Otherwise try each nested namespace
	    } else
	        for (var i = 0; i < this.nestedArray.length; ++i)
	            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
	                return found;

	    // If there hasn't been a match, try again at the parent
	    if (this.parent === null || parentAlreadyChecked)
	        return null;
	    return this.parent.lookup(path, filterTypes);
	};

	/**
	 * Looks up the reflection object at the specified path, relative to this namespace.
	 * @name NamespaceBase#lookup
	 * @function
	 * @param {string|string[]} path Path to look up
	 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
	 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
	 * @variation 2
	 */
	// lookup(path: string, [parentAlreadyChecked: boolean])

	/**
	 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Type} Looked up type
	 * @throws {Error} If `path` does not point to a type
	 */
	Namespace.prototype.lookupType = function lookupType(path) {
	    var found = this.lookup(path, [ Type ]);
	    if (!found)
	        throw Error("no such type: " + path);
	    return found;
	};

	/**
	 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Enum} Looked up enum
	 * @throws {Error} If `path` does not point to an enum
	 */
	Namespace.prototype.lookupEnum = function lookupEnum(path) {
	    var found = this.lookup(path, [ Enum ]);
	    if (!found)
	        throw Error("no such Enum '" + path + "' in " + this);
	    return found;
	};

	/**
	 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Type} Looked up type or enum
	 * @throws {Error} If `path` does not point to a type or enum
	 */
	Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
	    var found = this.lookup(path, [ Type, Enum ]);
	    if (!found)
	        throw Error("no such Type or Enum '" + path + "' in " + this);
	    return found;
	};

	/**
	 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Service} Looked up service
	 * @throws {Error} If `path` does not point to a service
	 */
	Namespace.prototype.lookupService = function lookupService(path) {
	    var found = this.lookup(path, [ Service ]);
	    if (!found)
	        throw Error("no such Service '" + path + "' in " + this);
	    return found;
	};

	// Sets up cyclic dependencies (called in index-light)
	Namespace._configure = function(Type_, Service_, Enum_) {
	    Type    = Type_;
	    Service = Service_;
	    Enum    = Enum_;
	};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Field;

	// extends ReflectionObject
	var ReflectionObject = __webpack_require__(99);
	((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

	var Enum  = __webpack_require__(98),
	    types = __webpack_require__(107),
	    util  = __webpack_require__(100);

	var Type; // cyclic

	var ruleRe = /^required|optional|repeated$/;

	/**
	 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
	 * @name Field
	 * @classdesc Reflected message field.
	 * @extends FieldBase
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {number} id Unique id within its namespace
	 * @param {string} type Value type
	 * @param {string|Object.<string,*>} [rule="optional"] Field rule
	 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
	 * @param {Object.<string,*>} [options] Declared options
	 */

	/**
	 * Constructs a field from a field descriptor.
	 * @param {string} name Field name
	 * @param {IField} json Field descriptor
	 * @returns {Field} Created field
	 * @throws {TypeError} If arguments are invalid
	 */
	Field.fromJSON = function fromJSON(name, json) {
	    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
	};

	/**
	 * Not an actual constructor. Use {@link Field} instead.
	 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
	 * @exports FieldBase
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {number} id Unique id within its namespace
	 * @param {string} type Value type
	 * @param {string|Object.<string,*>} [rule="optional"] Field rule
	 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] Comment associated with this field
	 */
	function Field(name, id, type, rule, extend, options, comment) {

	    if (util.isObject(rule)) {
	        comment = extend;
	        options = rule;
	        rule = extend = undefined;
	    } else if (util.isObject(extend)) {
	        comment = options;
	        options = extend;
	        extend = undefined;
	    }

	    ReflectionObject.call(this, name, options);

	    if (!util.isInteger(id) || id < 0)
	        throw TypeError("id must be a non-negative integer");

	    if (!util.isString(type))
	        throw TypeError("type must be a string");

	    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))
	        throw TypeError("rule must be a string rule");

	    if (extend !== undefined && !util.isString(extend))
	        throw TypeError("extend must be a string");

	    /**
	     * Field rule, if any.
	     * @type {string|undefined}
	     */
	    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

	    /**
	     * Field type.
	     * @type {string}
	     */
	    this.type = type; // toJSON

	    /**
	     * Unique field id.
	     * @type {number}
	     */
	    this.id = id; // toJSON, marker

	    /**
	     * Extended type if different from parent.
	     * @type {string|undefined}
	     */
	    this.extend = extend || undefined; // toJSON

	    /**
	     * Whether this field is required.
	     * @type {boolean}
	     */
	    this.required = rule === "required";

	    /**
	     * Whether this field is optional.
	     * @type {boolean}
	     */
	    this.optional = !this.required;

	    /**
	     * Whether this field is repeated.
	     * @type {boolean}
	     */
	    this.repeated = rule === "repeated";

	    /**
	     * Whether this field is a map or not.
	     * @type {boolean}
	     */
	    this.map = false;

	    /**
	     * Message this field belongs to.
	     * @type {Type|null}
	     */
	    this.message = null;

	    /**
	     * OneOf this field belongs to, if any,
	     * @type {OneOf|null}
	     */
	    this.partOf = null;

	    /**
	     * The field type's default value.
	     * @type {*}
	     */
	    this.typeDefault = null;

	    /**
	     * The field's default value on prototypes.
	     * @type {*}
	     */
	    this.defaultValue = null;

	    /**
	     * Whether this field's value should be treated as a long.
	     * @type {boolean}
	     */
	    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;

	    /**
	     * Whether this field's value is a buffer.
	     * @type {boolean}
	     */
	    this.bytes = type === "bytes";

	    /**
	     * Resolved type if not a basic type.
	     * @type {Type|Enum|null}
	     */
	    this.resolvedType = null;

	    /**
	     * Sister-field within the extended type if a declaring extension field.
	     * @type {Field|null}
	     */
	    this.extensionField = null;

	    /**
	     * Sister-field within the declaring namespace if an extended field.
	     * @type {Field|null}
	     */
	    this.declaringField = null;

	    /**
	     * Internally remembers whether this field is packed.
	     * @type {boolean|null}
	     * @private
	     */
	    this._packed = null;

	    /**
	     * Comment for this field.
	     * @type {string|null}
	     */
	    this.comment = comment;
	}

	/**
	 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
	 * @name Field#packed
	 * @type {boolean}
	 * @readonly
	 */
	Object.defineProperty(Field.prototype, "packed", {
	    get: function() {
	        // defaults to packed=true if not explicity set to false
	        if (this._packed === null)
	            this._packed = this.getOption("packed") !== false;
	        return this._packed;
	    }
	});

	/**
	 * @override
	 */
	Field.prototype.setOption = function setOption(name, value, ifNotSet) {
	    if (name === "packed") // clear cached before setting
	        this._packed = null;
	    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
	};

	/**
	 * Field descriptor.
	 * @interface IField
	 * @property {string} [rule="optional"] Field rule
	 * @property {string} type Field type
	 * @property {number} id Field id
	 * @property {Object.<string,*>} [options] Field options
	 */

	/**
	 * Extension field descriptor.
	 * @interface IExtensionField
	 * @extends IField
	 * @property {string} extend Extended type
	 */

	/**
	 * Converts this field to a field descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IField} Field descriptor
	 */
	Field.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "rule"    , this.rule !== "optional" && this.rule || undefined,
	        "type"    , this.type,
	        "id"      , this.id,
	        "extend"  , this.extend,
	        "options" , this.options,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * Resolves this field's type references.
	 * @returns {Field} `this`
	 * @throws {Error} If any reference cannot be resolved
	 */
	Field.prototype.resolve = function resolve() {

	    if (this.resolved)
	        return this;

	    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it
	        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
	        if (this.resolvedType instanceof Type)
	            this.typeDefault = null;
	        else // instanceof Enum
	            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
	    }

	    // use explicitly set default value if present
	    if (this.options && this.options["default"] != null) {
	        this.typeDefault = this.options["default"];
	        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
	            this.typeDefault = this.resolvedType.values[this.typeDefault];
	    }

	    // remove unnecessary options
	    if (this.options) {
	        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))
	            delete this.options.packed;
	        if (!Object.keys(this.options).length)
	            this.options = undefined;
	    }

	    // convert to internal data type if necesssary
	    if (this.long) {
	        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

	        /* istanbul ignore else */
	        if (Object.freeze)
	            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

	    } else if (this.bytes && typeof this.typeDefault === "string") {
	        var buf;
	        if (util.base64.test(this.typeDefault))
	            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
	        else
	            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
	        this.typeDefault = buf;
	    }

	    // take special care of maps and repeated fields
	    if (this.map)
	        this.defaultValue = util.emptyObject;
	    else if (this.repeated)
	        this.defaultValue = util.emptyArray;
	    else
	        this.defaultValue = this.typeDefault;

	    // ensure proper value on prototype
	    if (this.parent instanceof Type)
	        this.parent.ctor.prototype[this.name] = this.defaultValue;

	    return ReflectionObject.prototype.resolve.call(this);
	};

	/**
	 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
	 * @typedef FieldDecorator
	 * @type {function}
	 * @param {Object} prototype Target prototype
	 * @param {string} fieldName Field name
	 * @returns {undefined}
	 */

	/**
	 * Field decorator (TypeScript).
	 * @name Field.d
	 * @function
	 * @param {number} fieldId Field id
	 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
	 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
	 * @param {T} [defaultValue] Default value
	 * @returns {FieldDecorator} Decorator function
	 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
	 */
	Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

	    // submessage: decorate the submessage and use its name as the type
	    if (typeof fieldType === "function")
	        fieldType = util.decorateType(fieldType).name;

	    // enum reference: create a reflected copy of the enum and keep reuseing it
	    else if (fieldType && typeof fieldType === "object")
	        fieldType = util.decorateEnum(fieldType).name;

	    return function fieldDecorator(prototype, fieldName) {
	        util.decorateType(prototype.constructor)
	            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
	    };
	};

	/**
	 * Field decorator (TypeScript).
	 * @name Field.d
	 * @function
	 * @param {number} fieldId Field id
	 * @param {Constructor<T>|string} fieldType Field type
	 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
	 * @returns {FieldDecorator} Decorator function
	 * @template T extends Message<T>
	 * @variation 2
	 */
	// like Field.d but without a default value

	// Sets up cyclic dependencies (called in index-light)
	Field._configure = function configure(Type_) {
	    Type = Type_;
	};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * Common type constants.
	 * @namespace
	 */
	var types = exports;

	var util = __webpack_require__(100);

	var s = [
	    "double",   // 0
	    "float",    // 1
	    "int32",    // 2
	    "uint32",   // 3
	    "sint32",   // 4
	    "fixed32",  // 5
	    "sfixed32", // 6
	    "int64",    // 7
	    "uint64",   // 8
	    "sint64",   // 9
	    "fixed64",  // 10
	    "sfixed64", // 11
	    "bool",     // 12
	    "string",   // 13
	    "bytes"     // 14
	];

	function bake(values, offset) {
	    var i = 0, o = {};
	    offset |= 0;
	    while (i < values.length) o[s[i + offset]] = values[i++];
	    return o;
	}

	/**
	 * Basic type wire types.
	 * @type {Object.<string,number>}
	 * @const
	 * @property {number} double=1 Fixed64 wire type
	 * @property {number} float=5 Fixed32 wire type
	 * @property {number} int32=0 Varint wire type
	 * @property {number} uint32=0 Varint wire type
	 * @property {number} sint32=0 Varint wire type
	 * @property {number} fixed32=5 Fixed32 wire type
	 * @property {number} sfixed32=5 Fixed32 wire type
	 * @property {number} int64=0 Varint wire type
	 * @property {number} uint64=0 Varint wire type
	 * @property {number} sint64=0 Varint wire type
	 * @property {number} fixed64=1 Fixed64 wire type
	 * @property {number} sfixed64=1 Fixed64 wire type
	 * @property {number} bool=0 Varint wire type
	 * @property {number} string=2 Ldelim wire type
	 * @property {number} bytes=2 Ldelim wire type
	 */
	types.basic = bake([
	    /* double   */ 1,
	    /* float    */ 5,
	    /* int32    */ 0,
	    /* uint32   */ 0,
	    /* sint32   */ 0,
	    /* fixed32  */ 5,
	    /* sfixed32 */ 5,
	    /* int64    */ 0,
	    /* uint64   */ 0,
	    /* sint64   */ 0,
	    /* fixed64  */ 1,
	    /* sfixed64 */ 1,
	    /* bool     */ 0,
	    /* string   */ 2,
	    /* bytes    */ 2
	]);

	/**
	 * Basic type defaults.
	 * @type {Object.<string,*>}
	 * @const
	 * @property {number} double=0 Double default
	 * @property {number} float=0 Float default
	 * @property {number} int32=0 Int32 default
	 * @property {number} uint32=0 Uint32 default
	 * @property {number} sint32=0 Sint32 default
	 * @property {number} fixed32=0 Fixed32 default
	 * @property {number} sfixed32=0 Sfixed32 default
	 * @property {number} int64=0 Int64 default
	 * @property {number} uint64=0 Uint64 default
	 * @property {number} sint64=0 Sint32 default
	 * @property {number} fixed64=0 Fixed64 default
	 * @property {number} sfixed64=0 Sfixed64 default
	 * @property {boolean} bool=false Bool default
	 * @property {string} string="" String default
	 * @property {Array.<number>} bytes=Array(0) Bytes default
	 * @property {null} message=null Message default
	 */
	types.defaults = bake([
	    /* double   */ 0,
	    /* float    */ 0,
	    /* int32    */ 0,
	    /* uint32   */ 0,
	    /* sint32   */ 0,
	    /* fixed32  */ 0,
	    /* sfixed32 */ 0,
	    /* int64    */ 0,
	    /* uint64   */ 0,
	    /* sint64   */ 0,
	    /* fixed64  */ 0,
	    /* sfixed64 */ 0,
	    /* bool     */ false,
	    /* string   */ "",
	    /* bytes    */ util.emptyArray,
	    /* message  */ null
	]);

	/**
	 * Basic long type wire types.
	 * @type {Object.<string,number>}
	 * @const
	 * @property {number} int64=0 Varint wire type
	 * @property {number} uint64=0 Varint wire type
	 * @property {number} sint64=0 Varint wire type
	 * @property {number} fixed64=1 Fixed64 wire type
	 * @property {number} sfixed64=1 Fixed64 wire type
	 */
	types.long = bake([
	    /* int64    */ 0,
	    /* uint64   */ 0,
	    /* sint64   */ 0,
	    /* fixed64  */ 1,
	    /* sfixed64 */ 1
	], 7);

	/**
	 * Allowed types for map keys with their associated wire type.
	 * @type {Object.<string,number>}
	 * @const
	 * @property {number} int32=0 Varint wire type
	 * @property {number} uint32=0 Varint wire type
	 * @property {number} sint32=0 Varint wire type
	 * @property {number} fixed32=5 Fixed32 wire type
	 * @property {number} sfixed32=5 Fixed32 wire type
	 * @property {number} int64=0 Varint wire type
	 * @property {number} uint64=0 Varint wire type
	 * @property {number} sint64=0 Varint wire type
	 * @property {number} fixed64=1 Fixed64 wire type
	 * @property {number} sfixed64=1 Fixed64 wire type
	 * @property {number} bool=0 Varint wire type
	 * @property {number} string=2 Ldelim wire type
	 */
	types.mapKey = bake([
	    /* int32    */ 0,
	    /* uint32   */ 0,
	    /* sint32   */ 0,
	    /* fixed32  */ 5,
	    /* sfixed32 */ 5,
	    /* int64    */ 0,
	    /* uint64   */ 0,
	    /* sint64   */ 0,
	    /* fixed64  */ 1,
	    /* sfixed64 */ 1,
	    /* bool     */ 0,
	    /* string   */ 2
	], 2);

	/**
	 * Allowed types for packed repeated fields with their associated wire type.
	 * @type {Object.<string,number>}
	 * @const
	 * @property {number} double=1 Fixed64 wire type
	 * @property {number} float=5 Fixed32 wire type
	 * @property {number} int32=0 Varint wire type
	 * @property {number} uint32=0 Varint wire type
	 * @property {number} sint32=0 Varint wire type
	 * @property {number} fixed32=5 Fixed32 wire type
	 * @property {number} sfixed32=5 Fixed32 wire type
	 * @property {number} int64=0 Varint wire type
	 * @property {number} uint64=0 Varint wire type
	 * @property {number} sint64=0 Varint wire type
	 * @property {number} fixed64=1 Fixed64 wire type
	 * @property {number} sfixed64=1 Fixed64 wire type
	 * @property {number} bool=0 Varint wire type
	 */
	types.packed = bake([
	    /* double   */ 1,
	    /* float    */ 5,
	    /* int32    */ 0,
	    /* uint32   */ 0,
	    /* sint32   */ 0,
	    /* fixed32  */ 5,
	    /* sfixed32 */ 5,
	    /* int64    */ 0,
	    /* uint64   */ 0,
	    /* sint64   */ 0,
	    /* fixed64  */ 1,
	    /* sfixed64 */ 1,
	    /* bool     */ 0
	]);


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = OneOf;

	// extends ReflectionObject
	var ReflectionObject = __webpack_require__(99);
	((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

	var Field = __webpack_require__(106),
	    util  = __webpack_require__(100);

	/**
	 * Constructs a new oneof instance.
	 * @classdesc Reflected oneof.
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Oneof name
	 * @param {string[]|Object.<string,*>} [fieldNames] Field names
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] Comment associated with this field
	 */
	function OneOf(name, fieldNames, options, comment) {
	    if (!Array.isArray(fieldNames)) {
	        options = fieldNames;
	        fieldNames = undefined;
	    }
	    ReflectionObject.call(this, name, options);

	    /* istanbul ignore if */
	    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
	        throw TypeError("fieldNames must be an Array");

	    /**
	     * Field names that belong to this oneof.
	     * @type {string[]}
	     */
	    this.oneof = fieldNames || []; // toJSON, marker

	    /**
	     * Fields that belong to this oneof as an array for iteration.
	     * @type {Field[]}
	     * @readonly
	     */
	    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

	    /**
	     * Comment for this field.
	     * @type {string|null}
	     */
	    this.comment = comment;
	}

	/**
	 * Oneof descriptor.
	 * @interface IOneOf
	 * @property {Array.<string>} oneof Oneof field names
	 * @property {Object.<string,*>} [options] Oneof options
	 */

	/**
	 * Constructs a oneof from a oneof descriptor.
	 * @param {string} name Oneof name
	 * @param {IOneOf} json Oneof descriptor
	 * @returns {OneOf} Created oneof
	 * @throws {TypeError} If arguments are invalid
	 */
	OneOf.fromJSON = function fromJSON(name, json) {
	    return new OneOf(name, json.oneof, json.options, json.comment);
	};

	/**
	 * Converts this oneof to a oneof descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IOneOf} Oneof descriptor
	 */
	OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options" , this.options,
	        "oneof"   , this.oneof,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * Adds the fields of the specified oneof to the parent if not already done so.
	 * @param {OneOf} oneof The oneof
	 * @returns {undefined}
	 * @inner
	 * @ignore
	 */
	function addFieldsToParent(oneof) {
	    if (oneof.parent)
	        for (var i = 0; i < oneof.fieldsArray.length; ++i)
	            if (!oneof.fieldsArray[i].parent)
	                oneof.parent.add(oneof.fieldsArray[i]);
	}

	/**
	 * Adds a field to this oneof and removes it from its current parent, if any.
	 * @param {Field} field Field to add
	 * @returns {OneOf} `this`
	 */
	OneOf.prototype.add = function add(field) {

	    /* istanbul ignore if */
	    if (!(field instanceof Field))
	        throw TypeError("field must be a Field");

	    if (field.parent && field.parent !== this.parent)
	        field.parent.remove(field);
	    this.oneof.push(field.name);
	    this.fieldsArray.push(field);
	    field.partOf = this; // field.parent remains null
	    addFieldsToParent(this);
	    return this;
	};

	/**
	 * Removes a field from this oneof and puts it back to the oneof's parent.
	 * @param {Field} field Field to remove
	 * @returns {OneOf} `this`
	 */
	OneOf.prototype.remove = function remove(field) {

	    /* istanbul ignore if */
	    if (!(field instanceof Field))
	        throw TypeError("field must be a Field");

	    var index = this.fieldsArray.indexOf(field);

	    /* istanbul ignore if */
	    if (index < 0)
	        throw Error(field + " is not a member of " + this);

	    this.fieldsArray.splice(index, 1);
	    index = this.oneof.indexOf(field.name);

	    /* istanbul ignore else */
	    if (index > -1) // theoretical
	        this.oneof.splice(index, 1);

	    field.partOf = null;
	    return this;
	};

	/**
	 * @override
	 */
	OneOf.prototype.onAdd = function onAdd(parent) {
	    ReflectionObject.prototype.onAdd.call(this, parent);
	    var self = this;
	    // Collect present fields
	    for (var i = 0; i < this.oneof.length; ++i) {
	        var field = parent.get(this.oneof[i]);
	        if (field && !field.partOf) {
	            field.partOf = self;
	            self.fieldsArray.push(field);
	        }
	    }
	    // Add not yet present fields
	    addFieldsToParent(this);
	};

	/**
	 * @override
	 */
	OneOf.prototype.onRemove = function onRemove(parent) {
	    for (var i = 0, field; i < this.fieldsArray.length; ++i)
	        if ((field = this.fieldsArray[i]).parent)
	            field.parent.remove(field);
	    ReflectionObject.prototype.onRemove.call(this, parent);
	};

	/**
	 * Decorator function as returned by {@link OneOf.d} (TypeScript).
	 * @typedef OneOfDecorator
	 * @type {function}
	 * @param {Object} prototype Target prototype
	 * @param {string} oneofName OneOf name
	 * @returns {undefined}
	 */

	/**
	 * OneOf decorator (TypeScript).
	 * @function
	 * @param {...string} fieldNames Field names
	 * @returns {OneOfDecorator} Decorator function
	 * @template T extends string
	 */
	OneOf.d = function decorateOneOf() {
	    var fieldNames = new Array(arguments.length),
	        index = 0;
	    while (index < arguments.length)
	        fieldNames[index] = arguments[index++];
	    return function oneOfDecorator(prototype, oneofName) {
	        util.decorateType(prototype.constructor)
	            .add(new OneOf(oneofName, fieldNames));
	        Object.defineProperty(prototype, oneofName, {
	            get: util.oneOfGetter(fieldNames),
	            set: util.oneOfSetter(fieldNames)
	        });
	    };
	};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = MapField;

	// extends Field
	var Field = __webpack_require__(106);
	((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

	var types   = __webpack_require__(107),
	    util    = __webpack_require__(100);

	/**
	 * Constructs a new map field instance.
	 * @classdesc Reflected map field.
	 * @extends FieldBase
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {number} id Unique id within its namespace
	 * @param {string} keyType Key type
	 * @param {string} type Value type
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] Comment associated with this field
	 */
	function MapField(name, id, keyType, type, options, comment) {
	    Field.call(this, name, id, type, undefined, undefined, options, comment);

	    /* istanbul ignore if */
	    if (!util.isString(keyType))
	        throw TypeError("keyType must be a string");

	    /**
	     * Key type.
	     * @type {string}
	     */
	    this.keyType = keyType; // toJSON, marker

	    /**
	     * Resolved key type if not a basic type.
	     * @type {ReflectionObject|null}
	     */
	    this.resolvedKeyType = null;

	    // Overrides Field#map
	    this.map = true;
	}

	/**
	 * Map field descriptor.
	 * @interface IMapField
	 * @extends {IField}
	 * @property {string} keyType Key type
	 */

	/**
	 * Extension map field descriptor.
	 * @interface IExtensionMapField
	 * @extends IMapField
	 * @property {string} extend Extended type
	 */

	/**
	 * Constructs a map field from a map field descriptor.
	 * @param {string} name Field name
	 * @param {IMapField} json Map field descriptor
	 * @returns {MapField} Created map field
	 * @throws {TypeError} If arguments are invalid
	 */
	MapField.fromJSON = function fromJSON(name, json) {
	    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
	};

	/**
	 * Converts this map field to a map field descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IMapField} Map field descriptor
	 */
	MapField.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "keyType" , this.keyType,
	        "type"    , this.type,
	        "id"      , this.id,
	        "extend"  , this.extend,
	        "options" , this.options,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * @override
	 */
	MapField.prototype.resolve = function resolve() {
	    if (this.resolved)
	        return this;

	    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
	    if (types.mapKey[this.keyType] === undefined)
	        throw Error("invalid key type: " + this.keyType);

	    return Field.prototype.resolve.call(this);
	};

	/**
	 * Map field decorator (TypeScript).
	 * @name MapField.d
	 * @function
	 * @param {number} fieldId Field id
	 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
	 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
	 * @returns {FieldDecorator} Decorator function
	 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
	 */
	MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

	    // submessage value: decorate the submessage and use its name as the type
	    if (typeof fieldValueType === "function")
	        fieldValueType = util.decorateType(fieldValueType).name;

	    // enum reference value: create a reflected copy of the enum and keep reuseing it
	    else if (fieldValueType && typeof fieldValueType === "object")
	        fieldValueType = util.decorateEnum(fieldValueType).name;

	    return function mapFieldDecorator(prototype, fieldName) {
	        util.decorateType(prototype.constructor)
	            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
	    };
	};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Service;

	// extends Namespace
	var Namespace = __webpack_require__(105);
	((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

	var Method = __webpack_require__(111),
	    util   = __webpack_require__(100),
	    rpc    = __webpack_require__(94);

	/**
	 * Constructs a new service instance.
	 * @classdesc Reflected service.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {string} name Service name
	 * @param {Object.<string,*>} [options] Service options
	 * @throws {TypeError} If arguments are invalid
	 */
	function Service(name, options) {
	    Namespace.call(this, name, options);

	    /**
	     * Service methods.
	     * @type {Object.<string,Method>}
	     */
	    this.methods = {}; // toJSON, marker

	    /**
	     * Cached methods as an array.
	     * @type {Method[]|null}
	     * @private
	     */
	    this._methodsArray = null;
	}

	/**
	 * Service descriptor.
	 * @interface IService
	 * @extends INamespace
	 * @property {Object.<string,IMethod>} methods Method descriptors
	 */

	/**
	 * Constructs a service from a service descriptor.
	 * @param {string} name Service name
	 * @param {IService} json Service descriptor
	 * @returns {Service} Created service
	 * @throws {TypeError} If arguments are invalid
	 */
	Service.fromJSON = function fromJSON(name, json) {
	    var service = new Service(name, json.options);
	    /* istanbul ignore else */
	    if (json.methods)
	        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
	            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
	    if (json.nested)
	        service.addJSON(json.nested);
	    service.comment = json.comment;
	    return service;
	};

	/**
	 * Converts this service to a service descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IService} Service descriptor
	 */
	Service.prototype.toJSON = function toJSON(toJSONOptions) {
	    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options" , inherited && inherited.options || undefined,
	        "methods" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
	        "nested"  , inherited && inherited.nested || undefined,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * Methods of this service as an array for iteration.
	 * @name Service#methodsArray
	 * @type {Method[]}
	 * @readonly
	 */
	Object.defineProperty(Service.prototype, "methodsArray", {
	    get: function() {
	        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
	    }
	});

	function clearCache(service) {
	    service._methodsArray = null;
	    return service;
	}

	/**
	 * @override
	 */
	Service.prototype.get = function get(name) {
	    return this.methods[name]
	        || Namespace.prototype.get.call(this, name);
	};

	/**
	 * @override
	 */
	Service.prototype.resolveAll = function resolveAll() {
	    var methods = this.methodsArray;
	    for (var i = 0; i < methods.length; ++i)
	        methods[i].resolve();
	    return Namespace.prototype.resolve.call(this);
	};

	/**
	 * @override
	 */
	Service.prototype.add = function add(object) {

	    /* istanbul ignore if */
	    if (this.get(object.name))
	        throw Error("duplicate name '" + object.name + "' in " + this);

	    if (object instanceof Method) {
	        this.methods[object.name] = object;
	        object.parent = this;
	        return clearCache(this);
	    }
	    return Namespace.prototype.add.call(this, object);
	};

	/**
	 * @override
	 */
	Service.prototype.remove = function remove(object) {
	    if (object instanceof Method) {

	        /* istanbul ignore if */
	        if (this.methods[object.name] !== object)
	            throw Error(object + " is not a member of " + this);

	        delete this.methods[object.name];
	        object.parent = null;
	        return clearCache(this);
	    }
	    return Namespace.prototype.remove.call(this, object);
	};

	/**
	 * Creates a runtime service using the specified rpc implementation.
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
	 */
	Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
	    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
	    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
	        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
	        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
	            m: method,
	            q: method.resolvedRequestType.ctor,
	            s: method.resolvedResponseType.ctor
	        });
	    }
	    return rpcService;
	};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Method;

	// extends ReflectionObject
	var ReflectionObject = __webpack_require__(99);
	((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

	var util = __webpack_require__(100);

	/**
	 * Constructs a new service method instance.
	 * @classdesc Reflected service method.
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Method name
	 * @param {string|undefined} type Method type, usually `"rpc"`
	 * @param {string} requestType Request message type
	 * @param {string} responseType Response message type
	 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
	 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] The comment for this method
	 */
	function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {

	    /* istanbul ignore next */
	    if (util.isObject(requestStream)) {
	        options = requestStream;
	        requestStream = responseStream = undefined;
	    } else if (util.isObject(responseStream)) {
	        options = responseStream;
	        responseStream = undefined;
	    }

	    /* istanbul ignore if */
	    if (!(type === undefined || util.isString(type)))
	        throw TypeError("type must be a string");

	    /* istanbul ignore if */
	    if (!util.isString(requestType))
	        throw TypeError("requestType must be a string");

	    /* istanbul ignore if */
	    if (!util.isString(responseType))
	        throw TypeError("responseType must be a string");

	    ReflectionObject.call(this, name, options);

	    /**
	     * Method type.
	     * @type {string}
	     */
	    this.type = type || "rpc"; // toJSON

	    /**
	     * Request type.
	     * @type {string}
	     */
	    this.requestType = requestType; // toJSON, marker

	    /**
	     * Whether requests are streamed or not.
	     * @type {boolean|undefined}
	     */
	    this.requestStream = requestStream ? true : undefined; // toJSON

	    /**
	     * Response type.
	     * @type {string}
	     */
	    this.responseType = responseType; // toJSON

	    /**
	     * Whether responses are streamed or not.
	     * @type {boolean|undefined}
	     */
	    this.responseStream = responseStream ? true : undefined; // toJSON

	    /**
	     * Resolved request type.
	     * @type {Type|null}
	     */
	    this.resolvedRequestType = null;

	    /**
	     * Resolved response type.
	     * @type {Type|null}
	     */
	    this.resolvedResponseType = null;

	    /**
	     * Comment for this method
	     * @type {string|null}
	     */
	    this.comment = comment;
	}

	/**
	 * Method descriptor.
	 * @interface IMethod
	 * @property {string} [type="rpc"] Method type
	 * @property {string} requestType Request type
	 * @property {string} responseType Response type
	 * @property {boolean} [requestStream=false] Whether requests are streamed
	 * @property {boolean} [responseStream=false] Whether responses are streamed
	 * @property {Object.<string,*>} [options] Method options
	 */

	/**
	 * Constructs a method from a method descriptor.
	 * @param {string} name Method name
	 * @param {IMethod} json Method descriptor
	 * @returns {Method} Created method
	 * @throws {TypeError} If arguments are invalid
	 */
	Method.fromJSON = function fromJSON(name, json) {
	    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);
	};

	/**
	 * Converts this method to a method descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IMethod} Method descriptor
	 */
	Method.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
	        "requestType"    , this.requestType,
	        "requestStream"  , this.requestStream,
	        "responseType"   , this.responseType,
	        "responseStream" , this.responseStream,
	        "options"        , this.options,
	        "comment"        , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * @override
	 */
	Method.prototype.resolve = function resolve() {

	    /* istanbul ignore if */
	    if (this.resolved)
	        return this;

	    this.resolvedRequestType = this.parent.lookupType(this.requestType);
	    this.resolvedResponseType = this.parent.lookupType(this.responseType);

	    return ReflectionObject.prototype.resolve.call(this);
	};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Message;

	var util = __webpack_require__(82);

	/**
	 * Constructs a new message instance.
	 * @classdesc Abstract runtime message.
	 * @constructor
	 * @param {Properties<T>} [properties] Properties to set
	 * @template T extends object = object
	 */
	function Message(properties) {
	    // not used internally
	    if (properties)
	        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	            this[keys[i]] = properties[keys[i]];
	}

	/**
	 * Reference to the reflected type.
	 * @name Message.$type
	 * @type {Type}
	 * @readonly
	 */

	/**
	 * Reference to the reflected type.
	 * @name Message#$type
	 * @type {Type}
	 * @readonly
	 */

	/*eslint-disable valid-jsdoc*/

	/**
	 * Creates a new message of this type using the specified properties.
	 * @param {Object.<string,*>} [properties] Properties to set
	 * @returns {Message<T>} Message instance
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.create = function create(properties) {
	    return this.$type.create(properties);
	};

	/**
	 * Encodes a message of this type.
	 * @param {T|Object.<string,*>} message Message to encode
	 * @param {Writer} [writer] Writer to use
	 * @returns {Writer} Writer
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.encode = function encode(message, writer) {
	    return this.$type.encode(message, writer);
	};

	/**
	 * Encodes a message of this type preceeded by its length as a varint.
	 * @param {T|Object.<string,*>} message Message to encode
	 * @param {Writer} [writer] Writer to use
	 * @returns {Writer} Writer
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.encodeDelimited = function encodeDelimited(message, writer) {
	    return this.$type.encodeDelimited(message, writer);
	};

	/**
	 * Decodes a message of this type.
	 * @name Message.decode
	 * @function
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode
	 * @returns {T} Decoded message
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.decode = function decode(reader) {
	    return this.$type.decode(reader);
	};

	/**
	 * Decodes a message of this type preceeded by its length as a varint.
	 * @name Message.decodeDelimited
	 * @function
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode
	 * @returns {T} Decoded message
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.decodeDelimited = function decodeDelimited(reader) {
	    return this.$type.decodeDelimited(reader);
	};

	/**
	 * Verifies a message of this type.
	 * @name Message.verify
	 * @function
	 * @param {Object.<string,*>} message Plain object to verify
	 * @returns {string|null} `null` if valid, otherwise the reason why it is not
	 */
	Message.verify = function verify(message) {
	    return this.$type.verify(message);
	};

	/**
	 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
	 * @param {Object.<string,*>} object Plain object
	 * @returns {T} Message instance
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.fromObject = function fromObject(object) {
	    return this.$type.fromObject(object);
	};

	/**
	 * Creates a plain object from a message of this type. Also converts values to other types if specified.
	 * @param {T} message Message instance
	 * @param {IConversionOptions} [options] Conversion options
	 * @returns {Object.<string,*>} Plain object
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.toObject = function toObject(message, options) {
	    return this.$type.toObject(message, options);
	};

	/**
	 * Converts this message to JSON.
	 * @returns {Object.<string,*>} JSON object
	 */
	Message.prototype.toJSON = function toJSON() {
	    return this.$type.toObject(this, util.toJSONOptions);
	};

	/*eslint-enable valid-jsdoc*/

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = decoder;

	var Enum    = __webpack_require__(98),
	    types   = __webpack_require__(107),
	    util    = __webpack_require__(100);

	function missing(field) {
	    return "missing required '" + field.name + "'";
	}

	/**
	 * Generates a decoder specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	function decoder(mtype) {
	    /* eslint-disable no-unexpected-multiline */
	    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
	    ("if(!(r instanceof Reader))")
	        ("r=Reader.create(r)")
	    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k" : ""))
	    ("while(r.pos<c){")
	        ("var t=r.uint32()");
	    if (mtype.group) gen
	        ("if((t&7)===4)")
	            ("break");
	    gen
	        ("switch(t>>>3){");

	    var i = 0;
	    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
	        var field = mtype._fieldsArray[i].resolve(),
	            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
	            ref   = "m" + util.safeProp(field.name); gen
	            ("case %i:", field.id);

	        // Map fields
	        if (field.map) { gen
	                ("r.skip().pos++") // assumes id 1 + key wireType
	                ("if(%s===util.emptyObject)", ref)
	                    ("%s={}", ref)
	                ("k=r.%s()", field.keyType)
	                ("r.pos++"); // assumes id 2 + value wireType
	            if (types.long[field.keyType] !== undefined) {
	                if (types.basic[type] === undefined) gen
	                ("%s[typeof k===\"object\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
	                else gen
	                ("%s[typeof k===\"object\"?util.longToHash(k):k]=r.%s()", ref, type);
	            } else {
	                if (types.basic[type] === undefined) gen
	                ("%s[k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
	                else gen
	                ("%s[k]=r.%s()", ref, type);
	            }

	        // Repeated fields
	        } else if (field.repeated) { gen

	                ("if(!(%s&&%s.length))", ref, ref)
	                    ("%s=[]", ref);

	            // Packable (always check for forward and backward compatiblity)
	            if (types.packed[type] !== undefined) gen
	                ("if((t&7)===2){")
	                    ("var c2=r.uint32()+r.pos")
	                    ("while(r.pos<c2)")
	                        ("%s.push(r.%s())", ref, type)
	                ("}else");

	            // Non-packed
	            if (types.basic[type] === undefined) gen(field.resolvedType.group
	                    ? "%s.push(types[%i].decode(r))"
	                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
	            else gen
	                    ("%s.push(r.%s())", ref, type);

	        // Non-repeated
	        } else if (types.basic[type] === undefined) gen(field.resolvedType.group
	                ? "%s=types[%i].decode(r)"
	                : "%s=types[%i].decode(r,r.uint32())", ref, i);
	        else gen
	                ("%s=r.%s()", ref, type);
	        gen
	                ("break");
	    // Unknown fields
	    } gen
	            ("default:")
	                ("r.skipType(t&7)")
	                ("break")

	        ("}")
	    ("}");

	    // Field presence
	    for (i = 0; i < mtype._fieldsArray.length; ++i) {
	        var rfield = mtype._fieldsArray[i];
	        if (rfield.required) gen
	    ("if(!m.hasOwnProperty(%j))", rfield.name)
	        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
	    }

	    return gen
	    ("return m");
	    /* eslint-enable no-unexpected-multiline */
	}


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = verifier;

	var Enum      = __webpack_require__(98),
	    util      = __webpack_require__(100);

	function invalid(field, expected) {
	    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:"+field.keyType+"}" : "") + " expected";
	}

	/**
	 * Generates a partial value verifier.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {number} fieldIndex Field index
	 * @param {string} ref Variable reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genVerifyValue(gen, field, fieldIndex, ref) {
	    /* eslint-disable no-unexpected-multiline */
	    if (field.resolvedType) {
	        if (field.resolvedType instanceof Enum) { gen
	            ("switch(%s){", ref)
	                ("default:")
	                    ("return%j", invalid(field, "enum value"));
	            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen
	                ("case %i:", field.resolvedType.values[keys[j]]);
	            gen
	                    ("break")
	            ("}");
	        } else {
	            gen
	            ("{")
	                ("var e=types[%i].verify(%s);", fieldIndex, ref)
	                ("if(e)")
	                    ("return%j+e", field.name + ".")
	            ("}");
	        }
	    } else {
	        switch (field.type) {
	            case "int32":
	            case "uint32":
	            case "sint32":
	            case "fixed32":
	            case "sfixed32": gen
	                ("if(!util.isInteger(%s))", ref)
	                    ("return%j", invalid(field, "integer"));
	                break;
	            case "int64":
	            case "uint64":
	            case "sint64":
	            case "fixed64":
	            case "sfixed64": gen
	                ("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)
	                    ("return%j", invalid(field, "integer|Long"));
	                break;
	            case "float":
	            case "double": gen
	                ("if(typeof %s!==\"number\")", ref)
	                    ("return%j", invalid(field, "number"));
	                break;
	            case "bool": gen
	                ("if(typeof %s!==\"boolean\")", ref)
	                    ("return%j", invalid(field, "boolean"));
	                break;
	            case "string": gen
	                ("if(!util.isString(%s))", ref)
	                    ("return%j", invalid(field, "string"));
	                break;
	            case "bytes": gen
	                ("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)
	                    ("return%j", invalid(field, "buffer"));
	                break;
	        }
	    }
	    return gen;
	    /* eslint-enable no-unexpected-multiline */
	}

	/**
	 * Generates a partial key verifier.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {string} ref Variable reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genVerifyKey(gen, field, ref) {
	    /* eslint-disable no-unexpected-multiline */
	    switch (field.keyType) {
	        case "int32":
	        case "uint32":
	        case "sint32":
	        case "fixed32":
	        case "sfixed32": gen
	            ("if(!util.key32Re.test(%s))", ref)
	                ("return%j", invalid(field, "integer key"));
	            break;
	        case "int64":
	        case "uint64":
	        case "sint64":
	        case "fixed64":
	        case "sfixed64": gen
	            ("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
	                ("return%j", invalid(field, "integer|Long key"));
	            break;
	        case "bool": gen
	            ("if(!util.key2Re.test(%s))", ref)
	                ("return%j", invalid(field, "boolean key"));
	            break;
	    }
	    return gen;
	    /* eslint-enable no-unexpected-multiline */
	}

	/**
	 * Generates a verifier specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	function verifier(mtype) {
	    /* eslint-disable no-unexpected-multiline */

	    var gen = util.codegen(["m"], mtype.name + "$verify")
	    ("if(typeof m!==\"object\"||m===null)")
	        ("return%j", "object expected");
	    var oneofs = mtype.oneofsArray,
	        seenFirstField = {};
	    if (oneofs.length) gen
	    ("var p={}");

	    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {
	        var field = mtype._fieldsArray[i].resolve(),
	            ref   = "m" + util.safeProp(field.name);

	        if (field.optional) gen
	        ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null

	        // map fields
	        if (field.map) { gen
	            ("if(!util.isObject(%s))", ref)
	                ("return%j", invalid(field, "object"))
	            ("var k=Object.keys(%s)", ref)
	            ("for(var i=0;i<k.length;++i){");
	                genVerifyKey(gen, field, "k[i]");
	                genVerifyValue(gen, field, i, ref + "[k[i]]")
	            ("}");

	        // repeated fields
	        } else if (field.repeated) { gen
	            ("if(!Array.isArray(%s))", ref)
	                ("return%j", invalid(field, "array"))
	            ("for(var i=0;i<%s.length;++i){", ref);
	                genVerifyValue(gen, field, i, ref + "[i]")
	            ("}");

	        // required or present fields
	        } else {
	            if (field.partOf) {
	                var oneofProp = util.safeProp(field.partOf.name);
	                if (seenFirstField[field.partOf.name] === 1) gen
	            ("if(p%s===1)", oneofProp)
	                ("return%j", field.partOf.name + ": multiple values");
	                seenFirstField[field.partOf.name] = 1;
	                gen
	            ("p%s=1", oneofProp);
	            }
	            genVerifyValue(gen, field, i, ref);
	        }
	        if (field.optional) gen
	        ("}");
	    }
	    return gen
	    ("return null");
	    /* eslint-enable no-unexpected-multiline */
	}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Runtime message from/to plain object converters.
	 * @namespace
	 */
	var converter = exports;

	var Enum = __webpack_require__(98),
	    util = __webpack_require__(100);

	/**
	 * Generates a partial value fromObject conveter.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {number} fieldIndex Field index
	 * @param {string} prop Property reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
	    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
	    if (field.resolvedType) {
	        if (field.resolvedType instanceof Enum) { gen
	            ("switch(d%s){", prop);
	            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
	                if (field.repeated && values[keys[i]] === field.typeDefault) gen
	                ("default:");
	                gen
	                ("case%j:", keys[i])
	                ("case %i:", values[keys[i]])
	                    ("m%s=%j", prop, values[keys[i]])
	                    ("break");
	            } gen
	            ("}");
	        } else gen
	            ("if(typeof d%s!==\"object\")", prop)
	                ("throw TypeError(%j)", field.fullName + ": object expected")
	            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
	    } else {
	        var isUnsigned = false;
	        switch (field.type) {
	            case "double":
	            case "float": gen
	                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
	                break;
	            case "uint32":
	            case "fixed32": gen
	                ("m%s=d%s>>>0", prop, prop);
	                break;
	            case "int32":
	            case "sint32":
	            case "sfixed32": gen
	                ("m%s=d%s|0", prop, prop);
	                break;
	            case "uint64":
	                isUnsigned = true;
	                // eslint-disable-line no-fallthrough
	            case "int64":
	            case "sint64":
	            case "fixed64":
	            case "sfixed64": gen
	                ("if(util.Long)")
	                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
	                ("else if(typeof d%s===\"string\")", prop)
	                    ("m%s=parseInt(d%s,10)", prop, prop)
	                ("else if(typeof d%s===\"number\")", prop)
	                    ("m%s=d%s", prop, prop)
	                ("else if(typeof d%s===\"object\")", prop)
	                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
	                break;
	            case "bytes": gen
	                ("if(typeof d%s===\"string\")", prop)
	                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
	                ("else if(d%s.length)", prop)
	                    ("m%s=d%s", prop, prop);
	                break;
	            case "string": gen
	                ("m%s=String(d%s)", prop, prop);
	                break;
	            case "bool": gen
	                ("m%s=Boolean(d%s)", prop, prop);
	                break;
	            /* default: gen
	                ("m%s=d%s", prop, prop);
	                break; */
	        }
	    }
	    return gen;
	    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
	}

	/**
	 * Generates a plain object to runtime message converter specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	converter.fromObject = function fromObject(mtype) {
	    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
	    var fields = mtype.fieldsArray;
	    var gen = util.codegen(["d"], mtype.name + "$fromObject")
	    ("if(d instanceof this.ctor)")
	        ("return d");
	    if (!fields.length) return gen
	    ("return new this.ctor");
	    gen
	    ("var m=new this.ctor");
	    for (var i = 0; i < fields.length; ++i) {
	        var field  = fields[i].resolve(),
	            prop   = util.safeProp(field.name);

	        // Map fields
	        if (field.map) { gen
	    ("if(d%s){", prop)
	        ("if(typeof d%s!==\"object\")", prop)
	            ("throw TypeError(%j)", field.fullName + ": object expected")
	        ("m%s={}", prop)
	        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
	            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
	        ("}")
	    ("}");

	        // Repeated fields
	        } else if (field.repeated) { gen
	    ("if(d%s){", prop)
	        ("if(!Array.isArray(d%s))", prop)
	            ("throw TypeError(%j)", field.fullName + ": array expected")
	        ("m%s=[]", prop)
	        ("for(var i=0;i<d%s.length;++i){", prop);
	            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
	        ("}")
	    ("}");

	        // Non-repeated fields
	        } else {
	            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
	    ("if(d%s!=null){", prop); // !== undefined && !== null
	        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
	            if (!(field.resolvedType instanceof Enum)) gen
	    ("}");
	        }
	    } return gen
	    ("return m");
	    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
	};

	/**
	 * Generates a partial value toObject converter.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {number} fieldIndex Field index
	 * @param {string} prop Property reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genValuePartial_toObject(gen, field, fieldIndex, prop) {
	    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
	    if (field.resolvedType) {
	        if (field.resolvedType instanceof Enum) gen
	            ("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
	        else gen
	            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
	    } else {
	        var isUnsigned = false;
	        switch (field.type) {
	            case "double":
	            case "float": gen
	            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
	                break;
	            case "uint64":
	                isUnsigned = true;
	                // eslint-disable-line no-fallthrough
	            case "int64":
	            case "sint64":
	            case "fixed64":
	            case "sfixed64": gen
	            ("if(typeof m%s===\"number\")", prop)
	                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
	            ("else") // Long-like
	                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
	                break;
	            case "bytes": gen
	            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
	                break;
	            default: gen
	            ("d%s=m%s", prop, prop);
	                break;
	        }
	    }
	    return gen;
	    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
	}

	/**
	 * Generates a runtime message to plain object converter specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	converter.toObject = function toObject(mtype) {
	    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
	    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
	    if (!fields.length)
	        return util.codegen()("return {}");
	    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
	    ("if(!o)")
	        ("o={}")
	    ("var d={}");

	    var repeatedFields = [],
	        mapFields = [],
	        normalFields = [],
	        i = 0;
	    for (; i < fields.length; ++i)
	        if (!fields[i].partOf)
	            ( fields[i].resolve().repeated ? repeatedFields
	            : fields[i].map ? mapFields
	            : normalFields).push(fields[i]);

	    if (repeatedFields.length) { gen
	    ("if(o.arrays||o.defaults){");
	        for (i = 0; i < repeatedFields.length; ++i) gen
	        ("d%s=[]", util.safeProp(repeatedFields[i].name));
	        gen
	    ("}");
	    }

	    if (mapFields.length) { gen
	    ("if(o.objects||o.defaults){");
	        for (i = 0; i < mapFields.length; ++i) gen
	        ("d%s={}", util.safeProp(mapFields[i].name));
	        gen
	    ("}");
	    }

	    if (normalFields.length) { gen
	    ("if(o.defaults){");
	        for (i = 0; i < normalFields.length; ++i) {
	            var field = normalFields[i],
	                prop  = util.safeProp(field.name);
	            if (field.resolvedType instanceof Enum) gen
	        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
	            else if (field.long) gen
	        ("if(util.Long){")
	            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
	            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
	        ("}else")
	            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
	            else if (field.bytes) {
	                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
	                gen
	        ("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))
	        ("else{")
	            ("d%s=%s", prop, arrayDefault)
	            ("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)
	        ("}");
	            } else gen
	        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
	        } gen
	    ("}");
	    }
	    var hasKs2 = false;
	    for (i = 0; i < fields.length; ++i) {
	        var field = fields[i],
	            index = mtype._fieldsArray.indexOf(field),
	            prop  = util.safeProp(field.name);
	        if (field.map) {
	            if (!hasKs2) { hasKs2 = true; gen
	    ("var ks2");
	            } gen
	    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
	        ("d%s={}", prop)
	        ("for(var j=0;j<ks2.length;++j){");
	            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
	        ("}");
	        } else if (field.repeated) { gen
	    ("if(m%s&&m%s.length){", prop, prop)
	        ("d%s=[]", prop)
	        ("for(var j=0;j<m%s.length;++j){", prop);
	            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
	        ("}");
	        } else { gen
	    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
	        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
	        if (field.partOf) gen
	        ("if(o.oneofs)")
	            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
	        }
	        gen
	    ("}");
	    }
	    return gen
	    ("return d");
	    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
	};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * Wrappers for common types.
	 * @type {Object.<string,IWrapper>}
	 * @const
	 */
	var wrappers = exports;

	var Message = __webpack_require__(112);

	/**
	 * From object converter part of an {@link IWrapper}.
	 * @typedef WrapperFromObjectConverter
	 * @type {function}
	 * @param {Object.<string,*>} object Plain object
	 * @returns {Message<{}>} Message instance
	 * @this Type
	 */

	/**
	 * To object converter part of an {@link IWrapper}.
	 * @typedef WrapperToObjectConverter
	 * @type {function}
	 * @param {Message<{}>} message Message instance
	 * @param {IConversionOptions} [options] Conversion options
	 * @returns {Object.<string,*>} Plain object
	 * @this Type
	 */

	/**
	 * Common type wrapper part of {@link wrappers}.
	 * @interface IWrapper
	 * @property {WrapperFromObjectConverter} [fromObject] From object converter
	 * @property {WrapperToObjectConverter} [toObject] To object converter
	 */

	// Custom wrapper for Any
	wrappers[".google.protobuf.Any"] = {

	    fromObject: function(object) {

	        // unwrap value type if mapped
	        if (object && object["@type"]) {
	            var type = this.lookup(object["@type"]);
	            /* istanbul ignore else */
	            if (type) {
	                // type_url does not accept leading "."
	                var type_url = object["@type"].charAt(0) === "." ?
	                    object["@type"].substr(1) : object["@type"];
	                // type_url prefix is optional, but path seperator is required
	                return this.create({
	                    type_url: "/" + type_url,
	                    value: type.encode(type.fromObject(object)).finish()
	                });
	            }
	        }

	        return this.fromObject(object);
	    },

	    toObject: function(message, options) {

	        // decode value if requested and unmapped
	        if (options && options.json && message.type_url && message.value) {
	            // Only use fully qualified type name after the last '/'
	            var name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
	            var type = this.lookup(name);
	            /* istanbul ignore else */
	            if (type)
	                message = type.decode(message.value);
	        }

	        // wrap value if unmapped
	        if (!(message instanceof this.ctor) && message instanceof Message) {
	            var object = message.$type.toObject(message, options);
	            object["@type"] = message.$type.fullName;
	            return object;
	        }

	        return this.toObject(message, options);
	    }
	};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = Root;

	// extends Namespace
	var Namespace = __webpack_require__(105);
	((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

	var Field   = __webpack_require__(106),
	    Enum    = __webpack_require__(98),
	    OneOf   = __webpack_require__(108),
	    util    = __webpack_require__(100);

	var Type,   // cyclic
	    parse,  // might be excluded
	    common; // "

	/**
	 * Constructs a new root namespace instance.
	 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {Object.<string,*>} [options] Top level options
	 */
	function Root(options) {
	    Namespace.call(this, "", options);

	    /**
	     * Deferred extension fields.
	     * @type {Field[]}
	     */
	    this.deferred = [];

	    /**
	     * Resolved file names of loaded files.
	     * @type {string[]}
	     */
	    this.files = [];
	}

	/**
	 * Loads a namespace descriptor into a root namespace.
	 * @param {INamespace} json Nameespace descriptor
	 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
	 * @returns {Root} Root namespace
	 */
	Root.fromJSON = function fromJSON(json, root) {
	    if (!root)
	        root = new Root();
	    if (json.options)
	        root.setOptions(json.options);
	    return root.addJSON(json.nested);
	};

	/**
	 * Resolves the path of an imported file, relative to the importing origin.
	 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
	 * @function
	 * @param {string} origin The file name of the importing file
	 * @param {string} target The file name being imported
	 * @returns {string|null} Resolved path to `target` or `null` to skip the file
	 */
	Root.prototype.resolvePath = util.path.resolve;

	// A symbol-like function to safely signal synchronous loading
	/* istanbul ignore next */
	function SYNC() {} // eslint-disable-line no-empty-function

	/**
	 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {IParseOptions} options Parse options
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 */
	Root.prototype.load = function load(filename, options, callback) {
	    if (typeof options === "function") {
	        callback = options;
	        options = undefined;
	    }
	    var self = this;
	    if (!callback)
	        return util.asPromise(load, self, filename, options);

	    var sync = callback === SYNC; // undocumented

	    // Finishes loading by calling the callback (exactly once)
	    function finish(err, root) {
	        /* istanbul ignore if */
	        if (!callback)
	            return;
	        var cb = callback;
	        callback = null;
	        if (sync)
	            throw err;
	        cb(err, root);
	    }

	    // Processes a single file
	    function process(filename, source) {
	        try {
	            if (util.isString(source) && source.charAt(0) === "{")
	                source = JSON.parse(source);
	            if (!util.isString(source))
	                self.setOptions(source.options).addJSON(source.nested);
	            else {
	                parse.filename = filename;
	                var parsed = parse(source, self, options),
	                    resolved,
	                    i = 0;
	                if (parsed.imports)
	                    for (; i < parsed.imports.length; ++i)
	                        if (resolved = self.resolvePath(filename, parsed.imports[i]))
	                            fetch(resolved);
	                if (parsed.weakImports)
	                    for (i = 0; i < parsed.weakImports.length; ++i)
	                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))
	                            fetch(resolved, true);
	            }
	        } catch (err) {
	            finish(err);
	        }
	        if (!sync && !queued)
	            finish(null, self); // only once anyway
	    }

	    // Fetches a single file
	    function fetch(filename, weak) {

	        // Strip path if this file references a bundled definition
	        var idx = filename.lastIndexOf("google/protobuf/");
	        if (idx > -1) {
	            var altname = filename.substring(idx);
	            if (altname in common)
	                filename = altname;
	        }

	        // Skip if already loaded / attempted
	        if (self.files.indexOf(filename) > -1)
	            return;
	        self.files.push(filename);

	        // Shortcut bundled definitions
	        if (filename in common) {
	            if (sync)
	                process(filename, common[filename]);
	            else {
	                ++queued;
	                setTimeout(function() {
	                    --queued;
	                    process(filename, common[filename]);
	                });
	            }
	            return;
	        }

	        // Otherwise fetch from disk or network
	        if (sync) {
	            var source;
	            try {
	                source = util.fs.readFileSync(filename).toString("utf8");
	            } catch (err) {
	                if (!weak)
	                    finish(err);
	                return;
	            }
	            process(filename, source);
	        } else {
	            ++queued;
	            util.fetch(filename, function(err, source) {
	                --queued;
	                /* istanbul ignore if */
	                if (!callback)
	                    return; // terminated meanwhile
	                if (err) {
	                    /* istanbul ignore else */
	                    if (!weak)
	                        finish(err);
	                    else if (!queued) // can't be covered reliably
	                        finish(null, self);
	                    return;
	                }
	                process(filename, source);
	            });
	        }
	    }
	    var queued = 0;

	    // Assembling the root namespace doesn't require working type
	    // references anymore, so we can load everything in parallel
	    if (util.isString(filename))
	        filename = [ filename ];
	    for (var i = 0, resolved; i < filename.length; ++i)
	        if (resolved = self.resolvePath("", filename[i]))
	            fetch(resolved);

	    if (sync)
	        return self;
	    if (!queued)
	        finish(null, self);
	    return undefined;
	};
	// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

	/**
	 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
	 * @function Root#load
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 * @variation 2
	 */
	// function load(filename:string, callback:LoadCallback):undefined

	/**
	 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
	 * @function Root#load
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {Promise<Root>} Promise
	 * @variation 3
	 */
	// function load(filename:string, [options:IParseOptions]):Promise<Root>

	/**
	 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
	 * @function Root#loadSync
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {Root} Root namespace
	 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
	 */
	Root.prototype.loadSync = function loadSync(filename, options) {
	    if (!util.isNode)
	        throw Error("not supported");
	    return this.load(filename, options, SYNC);
	};

	/**
	 * @override
	 */
	Root.prototype.resolveAll = function resolveAll() {
	    if (this.deferred.length)
	        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
	            return "'extend " + field.extend + "' in " + field.parent.fullName;
	        }).join(", "));
	    return Namespace.prototype.resolveAll.call(this);
	};

	// only uppercased (and thus conflict-free) children are exposed, see below
	var exposeRe = /^[A-Z]/;

	/**
	 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
	 * @param {Root} root Root instance
	 * @param {Field} field Declaring extension field witin the declaring type
	 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
	 * @inner
	 * @ignore
	 */
	function tryHandleExtension(root, field) {
	    var extendedType = field.parent.lookup(field.extend);
	    if (extendedType) {
	        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
	        sisterField.declaringField = field;
	        field.extensionField = sisterField;
	        extendedType.add(sisterField);
	        return true;
	    }
	    return false;
	}

	/**
	 * Called when any object is added to this root or its sub-namespaces.
	 * @param {ReflectionObject} object Object added
	 * @returns {undefined}
	 * @private
	 */
	Root.prototype._handleAdd = function _handleAdd(object) {
	    if (object instanceof Field) {

	        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)
	            if (!tryHandleExtension(this, object))
	                this.deferred.push(object);

	    } else if (object instanceof Enum) {

	        if (exposeRe.test(object.name))
	            object.parent[object.name] = object.values; // expose enum values as property of its parent

	    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

	        if (object instanceof Type) // Try to handle any deferred extensions
	            for (var i = 0; i < this.deferred.length;)
	                if (tryHandleExtension(this, this.deferred[i]))
	                    this.deferred.splice(i, 1);
	                else
	                    ++i;
	        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
	            this._handleAdd(object._nestedArray[j]);
	        if (exposeRe.test(object.name))
	            object.parent[object.name] = object; // expose namespace as property of its parent
	    }

	    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
	    // properties of namespaces just like static code does. This allows using a .d.ts generated for
	    // a static module with reflection-based solutions where the condition is met.
	};

	/**
	 * Called when any object is removed from this root or its sub-namespaces.
	 * @param {ReflectionObject} object Object removed
	 * @returns {undefined}
	 * @private
	 */
	Root.prototype._handleRemove = function _handleRemove(object) {
	    if (object instanceof Field) {

	        if (/* an extension field */ object.extend !== undefined) {
	            if (/* already handled */ object.extensionField) { // remove its sister field
	                object.extensionField.parent.remove(object.extensionField);
	                object.extensionField = null;
	            } else { // cancel the extension
	                var index = this.deferred.indexOf(object);
	                /* istanbul ignore else */
	                if (index > -1)
	                    this.deferred.splice(index, 1);
	            }
	        }

	    } else if (object instanceof Enum) {

	        if (exposeRe.test(object.name))
	            delete object.parent[object.name]; // unexpose enum values

	    } else if (object instanceof Namespace) {

	        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
	            this._handleRemove(object._nestedArray[i]);

	        if (exposeRe.test(object.name))
	            delete object.parent[object.name]; // unexpose namespaces

	    }
	};

	// Sets up cyclic dependencies (called in index-light)
	Root._configure = function(Type_, parse_, common_) {
	    Type   = Type_;
	    parse  = parse_;
	    common = common_;
	};


/***/ }),
/* 118 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = tokenize;

	var delimRe        = /[\s{}=;:[\],'"()<>]/g,
	    stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
	    stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;

	var setCommentRe = /^ *[*/]+ */,
	    setCommentAltRe = /^\s*\*?\/*/,
	    setCommentSplitRe = /\n/g,
	    whitespaceRe = /\s/,
	    unescapeRe = /\\(.?)/g;

	var unescapeMap = {
	    "0": "\0",
	    "r": "\r",
	    "n": "\n",
	    "t": "\t"
	};

	/**
	 * Unescapes a string.
	 * @param {string} str String to unescape
	 * @returns {string} Unescaped string
	 * @property {Object.<string,string>} map Special characters map
	 * @memberof tokenize
	 */
	function unescape(str) {
	    return str.replace(unescapeRe, function($0, $1) {
	        switch ($1) {
	            case "\\":
	            case "":
	                return $1;
	            default:
	                return unescapeMap[$1] || "";
	        }
	    });
	}

	tokenize.unescape = unescape;

	/**
	 * Gets the next token and advances.
	 * @typedef TokenizerHandleNext
	 * @type {function}
	 * @returns {string|null} Next token or `null` on eof
	 */

	/**
	 * Peeks for the next token.
	 * @typedef TokenizerHandlePeek
	 * @type {function}
	 * @returns {string|null} Next token or `null` on eof
	 */

	/**
	 * Pushes a token back to the stack.
	 * @typedef TokenizerHandlePush
	 * @type {function}
	 * @param {string} token Token
	 * @returns {undefined}
	 */

	/**
	 * Skips the next token.
	 * @typedef TokenizerHandleSkip
	 * @type {function}
	 * @param {string} expected Expected token
	 * @param {boolean} [optional=false] If optional
	 * @returns {boolean} Whether the token matched
	 * @throws {Error} If the token didn't match and is not optional
	 */

	/**
	 * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
	 * @typedef TokenizerHandleCmnt
	 * @type {function}
	 * @param {number} [line] Line number
	 * @returns {string|null} Comment text or `null` if none
	 */

	/**
	 * Handle object returned from {@link tokenize}.
	 * @interface ITokenizerHandle
	 * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
	 * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
	 * @property {TokenizerHandlePush} push Pushes a token back to the stack
	 * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
	 * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
	 * @property {number} line Current line number
	 */

	/**
	 * Tokenizes the given .proto source and returns an object with useful utility functions.
	 * @param {string} source Source contents
	 * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
	 * @returns {ITokenizerHandle} Tokenizer handle
	 */
	function tokenize(source, alternateCommentMode) {
	    /* eslint-disable callback-return */
	    source = source.toString();

	    var offset = 0,
	        length = source.length,
	        line = 1,
	        commentType = null,
	        commentText = null,
	        commentLine = 0,
	        commentLineEmpty = false;

	    var stack = [];

	    var stringDelim = null;

	    /* istanbul ignore next */
	    /**
	     * Creates an error for illegal syntax.
	     * @param {string} subject Subject
	     * @returns {Error} Error created
	     * @inner
	     */
	    function illegal(subject) {
	        return Error("illegal " + subject + " (line " + line + ")");
	    }

	    /**
	     * Reads a string till its end.
	     * @returns {string} String read
	     * @inner
	     */
	    function readString() {
	        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
	        re.lastIndex = offset - 1;
	        var match = re.exec(source);
	        if (!match)
	            throw illegal("string");
	        offset = re.lastIndex;
	        push(stringDelim);
	        stringDelim = null;
	        return unescape(match[1]);
	    }

	    /**
	     * Gets the character at `pos` within the source.
	     * @param {number} pos Position
	     * @returns {string} Character
	     * @inner
	     */
	    function charAt(pos) {
	        return source.charAt(pos);
	    }

	    /**
	     * Sets the current comment text.
	     * @param {number} start Start offset
	     * @param {number} end End offset
	     * @returns {undefined}
	     * @inner
	     */
	    function setComment(start, end) {
	        commentType = source.charAt(start++);
	        commentLine = line;
	        commentLineEmpty = false;
	        var lookback;
	        if (alternateCommentMode) {
	            lookback = 2;  // alternate comment parsing: "//" or "/*"
	        } else {
	            lookback = 3;  // "///" or "/**"
	        }
	        var commentOffset = start - lookback,
	            c;
	        do {
	            if (--commentOffset < 0 ||
	                    (c = source.charAt(commentOffset)) === "\n") {
	                commentLineEmpty = true;
	                break;
	            }
	        } while (c === " " || c === "\t");
	        var lines = source
	            .substring(start, end)
	            .split(setCommentSplitRe);
	        for (var i = 0; i < lines.length; ++i)
	            lines[i] = lines[i]
	                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "")
	                .trim();
	        commentText = lines
	            .join("\n")
	            .trim();
	    }

	    function isDoubleSlashCommentLine(startOffset) {
	        var endOffset = findEndOfLine(startOffset);

	        // see if remaining line matches comment pattern
	        var lineText = source.substring(startOffset, endOffset);
	        // look for 1 or 2 slashes since startOffset would already point past
	        // the first slash that started the comment.
	        var isComment = /^\s*\/{1,2}/.test(lineText);
	        return isComment;
	    }

	    function findEndOfLine(cursor) {
	        // find end of cursor's line
	        var endOffset = cursor;
	        while (endOffset < length && charAt(endOffset) !== "\n") {
	            endOffset++;
	        }
	        return endOffset;
	    }

	    /**
	     * Obtains the next token.
	     * @returns {string|null} Next token or `null` on eof
	     * @inner
	     */
	    function next() {
	        if (stack.length > 0)
	            return stack.shift();
	        if (stringDelim)
	            return readString();
	        var repeat,
	            prev,
	            curr,
	            start,
	            isDoc;
	        do {
	            if (offset === length)
	                return null;
	            repeat = false;
	            while (whitespaceRe.test(curr = charAt(offset))) {
	                if (curr === "\n")
	                    ++line;
	                if (++offset === length)
	                    return null;
	            }

	            if (charAt(offset) === "/") {
	                if (++offset === length) {
	                    throw illegal("comment");
	                }
	                if (charAt(offset) === "/") { // Line
	                    if (!alternateCommentMode) {
	                        // check for triple-slash comment
	                        isDoc = charAt(start = offset + 1) === "/";

	                        while (charAt(++offset) !== "\n") {
	                            if (offset === length) {
	                                return null;
	                            }
	                        }
	                        ++offset;
	                        if (isDoc) {
	                            setComment(start, offset - 1);
	                        }
	                        ++line;
	                        repeat = true;
	                    } else {
	                        // check for double-slash comments, consolidating consecutive lines
	                        start = offset;
	                        isDoc = false;
	                        if (isDoubleSlashCommentLine(offset)) {
	                            isDoc = true;
	                            do {
	                                offset = findEndOfLine(offset);
	                                if (offset === length) {
	                                    break;
	                                }
	                                offset++;
	                            } while (isDoubleSlashCommentLine(offset));
	                        } else {
	                            offset = Math.min(length, findEndOfLine(offset) + 1);
	                        }
	                        if (isDoc) {
	                            setComment(start, offset);
	                        }
	                        line++;
	                        repeat = true;
	                    }
	                } else if ((curr = charAt(offset)) === "*") { /* Block */
	                    // check for /** (regular comment mode) or /* (alternate comment mode)
	                    start = offset + 1;
	                    isDoc = alternateCommentMode || charAt(start) === "*";
	                    do {
	                        if (curr === "\n") {
	                            ++line;
	                        }
	                        if (++offset === length) {
	                            throw illegal("comment");
	                        }
	                        prev = curr;
	                        curr = charAt(offset);
	                    } while (prev !== "*" || curr !== "/");
	                    ++offset;
	                    if (isDoc) {
	                        setComment(start, offset - 2);
	                    }
	                    repeat = true;
	                } else {
	                    return "/";
	                }
	            }
	        } while (repeat);

	        // offset !== length if we got here

	        var end = offset;
	        delimRe.lastIndex = 0;
	        var delim = delimRe.test(charAt(end++));
	        if (!delim)
	            while (end < length && !delimRe.test(charAt(end)))
	                ++end;
	        var token = source.substring(offset, offset = end);
	        if (token === "\"" || token === "'")
	            stringDelim = token;
	        return token;
	    }

	    /**
	     * Pushes a token back to the stack.
	     * @param {string} token Token
	     * @returns {undefined}
	     * @inner
	     */
	    function push(token) {
	        stack.push(token);
	    }

	    /**
	     * Peeks for the next token.
	     * @returns {string|null} Token or `null` on eof
	     * @inner
	     */
	    function peek() {
	        if (!stack.length) {
	            var token = next();
	            if (token === null)
	                return null;
	            push(token);
	        }
	        return stack[0];
	    }

	    /**
	     * Skips a token.
	     * @param {string} expected Expected token
	     * @param {boolean} [optional=false] Whether the token is optional
	     * @returns {boolean} `true` when skipped, `false` if not
	     * @throws {Error} When a required token is not present
	     * @inner
	     */
	    function skip(expected, optional) {
	        var actual = peek(),
	            equals = actual === expected;
	        if (equals) {
	            next();
	            return true;
	        }
	        if (!optional)
	            throw illegal("token '" + actual + "', '" + expected + "' expected");
	        return false;
	    }

	    /**
	     * Gets a comment.
	     * @param {number} [trailingLine] Line number if looking for a trailing comment
	     * @returns {string|null} Comment text
	     * @inner
	     */
	    function cmnt(trailingLine) {
	        var ret = null;
	        if (trailingLine === undefined) {
	            if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
	                ret = commentText;
	            }
	        } else {
	            /* istanbul ignore else */
	            if (commentLine < trailingLine) {
	                peek();
	            }
	            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
	                ret = commentText;
	            }
	        }
	        return ret;
	    }

	    return Object.defineProperty({
	        next: next,
	        peek: peek,
	        push: push,
	        skip: skip,
	        cmnt: cmnt
	    }, "line", {
	        get: function() { return line; }
	    });
	    /* eslint-enable callback-return */
	}


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = parse;

	parse.filename = null;
	parse.defaults = { keepCase: false };

	var tokenize  = __webpack_require__(118),
	    Root      = __webpack_require__(117),
	    Type      = __webpack_require__(104),
	    Field     = __webpack_require__(106),
	    MapField  = __webpack_require__(109),
	    OneOf     = __webpack_require__(108),
	    Enum      = __webpack_require__(98),
	    Service   = __webpack_require__(110),
	    Method    = __webpack_require__(111),
	    types     = __webpack_require__(107),
	    util      = __webpack_require__(100);

	var base10Re    = /^[1-9][0-9]*$/,
	    base10NegRe = /^-?[1-9][0-9]*$/,
	    base16Re    = /^0[x][0-9a-fA-F]+$/,
	    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
	    base8Re     = /^0[0-7]+$/,
	    base8NegRe  = /^-?0[0-7]+$/,
	    numberRe    = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
	    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
	    typeRefRe   = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
	    fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;

	/**
	 * Result object returned from {@link parse}.
	 * @interface IParserResult
	 * @property {string|undefined} package Package name, if declared
	 * @property {string[]|undefined} imports Imports, if any
	 * @property {string[]|undefined} weakImports Weak imports, if any
	 * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
	 * @property {Root} root Populated root instance
	 */

	/**
	 * Options modifying the behavior of {@link parse}.
	 * @interface IParseOptions
	 * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
	 * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
	 */

	/**
	 * Options modifying the behavior of JSON serialization.
	 * @interface IToJSONOptions
	 * @property {boolean} [keepComments=false] Serializes comments.
	 */

	/**
	 * Parses the given .proto source and returns an object with the parsed contents.
	 * @param {string} source Source contents
	 * @param {Root} root Root to populate
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {IParserResult} Parser result
	 * @property {string} filename=null Currently processing file name for error reporting, if known
	 * @property {IParseOptions} defaults Default {@link IParseOptions}
	 */
	function parse(source, root, options) {
	    /* eslint-disable callback-return */
	    if (!(root instanceof Root)) {
	        options = root;
	        root = new Root();
	    }
	    if (!options)
	        options = parse.defaults;

	    var tn = tokenize(source, options.alternateCommentMode || false),
	        next = tn.next,
	        push = tn.push,
	        peek = tn.peek,
	        skip = tn.skip,
	        cmnt = tn.cmnt;

	    var head = true,
	        pkg,
	        imports,
	        weakImports,
	        syntax,
	        isProto3 = false;

	    var ptr = root;

	    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;

	    /* istanbul ignore next */
	    function illegal(token, name, insideTryCatch) {
	        var filename = parse.filename;
	        if (!insideTryCatch)
	            parse.filename = null;
	        return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
	    }

	    function readString() {
	        var values = [],
	            token;
	        do {
	            /* istanbul ignore if */
	            if ((token = next()) !== "\"" && token !== "'")
	                throw illegal(token);

	            values.push(next());
	            skip(token);
	            token = peek();
	        } while (token === "\"" || token === "'");
	        return values.join("");
	    }

	    function readValue(acceptTypeRef) {
	        var token = next();
	        switch (token) {
	            case "'":
	            case "\"":
	                push(token);
	                return readString();
	            case "true": case "TRUE":
	                return true;
	            case "false": case "FALSE":
	                return false;
	        }
	        try {
	            return parseNumber(token, /* insideTryCatch */ true);
	        } catch (e) {

	            /* istanbul ignore else */
	            if (acceptTypeRef && typeRefRe.test(token))
	                return token;

	            /* istanbul ignore next */
	            throw illegal(token, "value");
	        }
	    }

	    function readRanges(target, acceptStrings) {
	        var token, start;
	        do {
	            if (acceptStrings && ((token = peek()) === "\"" || token === "'"))
	                target.push(readString());
	            else
	                target.push([ start = parseId(next()), skip("to", true) ? parseId(next()) : start ]);
	        } while (skip(",", true));
	        skip(";");
	    }

	    function parseNumber(token, insideTryCatch) {
	        var sign = 1;
	        if (token.charAt(0) === "-") {
	            sign = -1;
	            token = token.substring(1);
	        }
	        switch (token) {
	            case "inf": case "INF": case "Inf":
	                return sign * Infinity;
	            case "nan": case "NAN": case "Nan": case "NaN":
	                return NaN;
	            case "0":
	                return 0;
	        }
	        if (base10Re.test(token))
	            return sign * parseInt(token, 10);
	        if (base16Re.test(token))
	            return sign * parseInt(token, 16);
	        if (base8Re.test(token))
	            return sign * parseInt(token, 8);

	        /* istanbul ignore else */
	        if (numberRe.test(token))
	            return sign * parseFloat(token);

	        /* istanbul ignore next */
	        throw illegal(token, "number", insideTryCatch);
	    }

	    function parseId(token, acceptNegative) {
	        switch (token) {
	            case "max": case "MAX": case "Max":
	                return 536870911;
	            case "0":
	                return 0;
	        }

	        /* istanbul ignore if */
	        if (!acceptNegative && token.charAt(0) === "-")
	            throw illegal(token, "id");

	        if (base10NegRe.test(token))
	            return parseInt(token, 10);
	        if (base16NegRe.test(token))
	            return parseInt(token, 16);

	        /* istanbul ignore else */
	        if (base8NegRe.test(token))
	            return parseInt(token, 8);

	        /* istanbul ignore next */
	        throw illegal(token, "id");
	    }

	    function parsePackage() {

	        /* istanbul ignore if */
	        if (pkg !== undefined)
	            throw illegal("package");

	        pkg = next();

	        /* istanbul ignore if */
	        if (!typeRefRe.test(pkg))
	            throw illegal(pkg, "name");

	        ptr = ptr.define(pkg);
	        skip(";");
	    }

	    function parseImport() {
	        var token = peek();
	        var whichImports;
	        switch (token) {
	            case "weak":
	                whichImports = weakImports || (weakImports = []);
	                next();
	                break;
	            case "public":
	                next();
	                // eslint-disable-line no-fallthrough
	            default:
	                whichImports = imports || (imports = []);
	                break;
	        }
	        token = readString();
	        skip(";");
	        whichImports.push(token);
	    }

	    function parseSyntax() {
	        skip("=");
	        syntax = readString();
	        isProto3 = syntax === "proto3";

	        /* istanbul ignore if */
	        if (!isProto3 && syntax !== "proto2")
	            throw illegal(syntax, "syntax");

	        skip(";");
	    }

	    function parseCommon(parent, token) {
	        switch (token) {

	            case "option":
	                parseOption(parent, token);
	                skip(";");
	                return true;

	            case "message":
	                parseType(parent, token);
	                return true;

	            case "enum":
	                parseEnum(parent, token);
	                return true;

	            case "service":
	                parseService(parent, token);
	                return true;

	            case "extend":
	                parseExtension(parent, token);
	                return true;
	        }
	        return false;
	    }

	    function ifBlock(obj, fnIf, fnElse) {
	        var trailingLine = tn.line;
	        if (obj) {
	            obj.comment = cmnt(); // try block-type comment
	            obj.filename = parse.filename;
	        }
	        if (skip("{", true)) {
	            var token;
	            while ((token = next()) !== "}")
	                fnIf(token);
	            skip(";", true);
	        } else {
	            if (fnElse)
	                fnElse();
	            skip(";");
	            if (obj && typeof obj.comment !== "string")
	                obj.comment = cmnt(trailingLine); // try line-type comment if no block
	        }
	    }

	    function parseType(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "type name");

	        var type = new Type(token);
	        ifBlock(type, function parseType_block(token) {
	            if (parseCommon(type, token))
	                return;

	            switch (token) {

	                case "map":
	                    parseMapField(type, token);
	                    break;

	                case "required":
	                case "optional":
	                case "repeated":
	                    parseField(type, token);
	                    break;

	                case "oneof":
	                    parseOneOf(type, token);
	                    break;

	                case "extensions":
	                    readRanges(type.extensions || (type.extensions = []));
	                    break;

	                case "reserved":
	                    readRanges(type.reserved || (type.reserved = []), true);
	                    break;

	                default:
	                    /* istanbul ignore if */
	                    if (!isProto3 || !typeRefRe.test(token))
	                        throw illegal(token);

	                    push(token);
	                    parseField(type, "optional");
	                    break;
	            }
	        });
	        parent.add(type);
	    }

	    function parseField(parent, rule, extend) {
	        var type = next();
	        if (type === "group") {
	            parseGroup(parent, rule);
	            return;
	        }

	        /* istanbul ignore if */
	        if (!typeRefRe.test(type))
	            throw illegal(type, "type");

	        var name = next();

	        /* istanbul ignore if */
	        if (!nameRe.test(name))
	            throw illegal(name, "name");

	        name = applyCase(name);
	        skip("=");

	        var field = new Field(name, parseId(next()), type, rule, extend);
	        ifBlock(field, function parseField_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(field, token);
	                skip(";");
	            } else
	                throw illegal(token);

	        }, function parseField_line() {
	            parseInlineOptions(field);
	        });
	        parent.add(field);

	        // JSON defaults to packed=true if not set so we have to set packed=false explicity when
	        // parsing proto2 descriptors without the option, where applicable. This must be done for
	        // all known packable types and anything that could be an enum (= is not a basic type).
	        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))
	            field.setOption("packed", false, /* ifNotSet */ true);
	    }

	    function parseGroup(parent, rule) {
	        var name = next();

	        /* istanbul ignore if */
	        if (!nameRe.test(name))
	            throw illegal(name, "name");

	        var fieldName = util.lcFirst(name);
	        if (name === fieldName)
	            name = util.ucFirst(name);
	        skip("=");
	        var id = parseId(next());
	        var type = new Type(name);
	        type.group = true;
	        var field = new Field(fieldName, id, name, rule);
	        field.filename = parse.filename;
	        ifBlock(type, function parseGroup_block(token) {
	            switch (token) {

	                case "option":
	                    parseOption(type, token);
	                    skip(";");
	                    break;

	                case "required":
	                case "optional":
	                case "repeated":
	                    parseField(type, token);
	                    break;

	                /* istanbul ignore next */
	                default:
	                    throw illegal(token); // there are no groups with proto3 semantics
	            }
	        });
	        parent.add(type)
	              .add(field);
	    }

	    function parseMapField(parent) {
	        skip("<");
	        var keyType = next();

	        /* istanbul ignore if */
	        if (types.mapKey[keyType] === undefined)
	            throw illegal(keyType, "type");

	        skip(",");
	        var valueType = next();

	        /* istanbul ignore if */
	        if (!typeRefRe.test(valueType))
	            throw illegal(valueType, "type");

	        skip(">");
	        var name = next();

	        /* istanbul ignore if */
	        if (!nameRe.test(name))
	            throw illegal(name, "name");

	        skip("=");
	        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
	        ifBlock(field, function parseMapField_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(field, token);
	                skip(";");
	            } else
	                throw illegal(token);

	        }, function parseMapField_line() {
	            parseInlineOptions(field);
	        });
	        parent.add(field);
	    }

	    function parseOneOf(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "name");

	        var oneof = new OneOf(applyCase(token));
	        ifBlock(oneof, function parseOneOf_block(token) {
	            if (token === "option") {
	                parseOption(oneof, token);
	                skip(";");
	            } else {
	                push(token);
	                parseField(oneof, "optional");
	            }
	        });
	        parent.add(oneof);
	    }

	    function parseEnum(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "name");

	        var enm = new Enum(token);
	        ifBlock(enm, function parseEnum_block(token) {
	          switch(token) {
	            case "option":
	              parseOption(enm, token);
	              skip(";");
	              break;

	            case "reserved":
	              readRanges(enm.reserved || (enm.reserved = []), true);
	              break;

	            default:
	              parseEnumValue(enm, token);
	          }
	        });
	        parent.add(enm);
	    }

	    function parseEnumValue(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token))
	            throw illegal(token, "name");

	        skip("=");
	        var value = parseId(next(), true),
	            dummy = {};
	        ifBlock(dummy, function parseEnumValue_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(dummy, token); // skip
	                skip(";");
	            } else
	                throw illegal(token);

	        }, function parseEnumValue_line() {
	            parseInlineOptions(dummy); // skip
	        });
	        parent.add(token, value, dummy.comment);
	    }

	    function parseOption(parent, token) {
	        var isCustom = skip("(", true);

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token, "name");

	        var name = token;
	        if (isCustom) {
	            skip(")");
	            name = "(" + name + ")";
	            token = peek();
	            if (fqTypeRefRe.test(token)) {
	                name += token;
	                next();
	            }
	        }
	        skip("=");
	        parseOptionValue(parent, name);
	    }

	    function parseOptionValue(parent, name) {
	        if (skip("{", true)) { // { a: "foo" b { c: "bar" } }
	            do {
	                /* istanbul ignore if */
	                if (!nameRe.test(token = next()))
	                    throw illegal(token, "name");

	                if (peek() === "{")
	                    parseOptionValue(parent, name + "." + token);
	                else {
	                    skip(":");
	                    if (peek() === "{")
	                        parseOptionValue(parent, name + "." + token);
	                    else
	                        setOption(parent, name + "." + token, readValue(true));
	                }
	                skip(",", true);
	            } while (!skip("}", true));
	        } else
	            setOption(parent, name, readValue(true));
	        // Does not enforce a delimiter to be universal
	    }

	    function setOption(parent, name, value) {
	        if (parent.setOption)
	            parent.setOption(name, value);
	    }

	    function parseInlineOptions(parent) {
	        if (skip("[", true)) {
	            do {
	                parseOption(parent, "option");
	            } while (skip(",", true));
	            skip("]");
	        }
	        return parent;
	    }

	    function parseService(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "service name");

	        var service = new Service(token);
	        ifBlock(service, function parseService_block(token) {
	            if (parseCommon(service, token))
	                return;

	            /* istanbul ignore else */
	            if (token === "rpc")
	                parseMethod(service, token);
	            else
	                throw illegal(token);
	        });
	        parent.add(service);
	    }

	    function parseMethod(parent, token) {
	        var type = token;

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "name");

	        var name = token,
	            requestType, requestStream,
	            responseType, responseStream;

	        skip("(");
	        if (skip("stream", true))
	            requestStream = true;

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token);

	        requestType = token;
	        skip(")"); skip("returns"); skip("(");
	        if (skip("stream", true))
	            responseStream = true;

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token);

	        responseType = token;
	        skip(")");

	        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
	        ifBlock(method, function parseMethod_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(method, token);
	                skip(";");
	            } else
	                throw illegal(token);

	        });
	        parent.add(method);
	    }

	    function parseExtension(parent, token) {

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token, "reference");

	        var reference = token;
	        ifBlock(null, function parseExtension_block(token) {
	            switch (token) {

	                case "required":
	                case "repeated":
	                case "optional":
	                    parseField(parent, token, reference);
	                    break;

	                default:
	                    /* istanbul ignore if */
	                    if (!isProto3 || !typeRefRe.test(token))
	                        throw illegal(token);
	                    push(token);
	                    parseField(parent, "optional", reference);
	                    break;
	            }
	        });
	    }

	    var token;
	    while ((token = next()) !== null) {
	        switch (token) {

	            case "package":

	                /* istanbul ignore if */
	                if (!head)
	                    throw illegal(token);

	                parsePackage();
	                break;

	            case "import":

	                /* istanbul ignore if */
	                if (!head)
	                    throw illegal(token);

	                parseImport();
	                break;

	            case "syntax":

	                /* istanbul ignore if */
	                if (!head)
	                    throw illegal(token);

	                parseSyntax();
	                break;

	            case "option":

	                /* istanbul ignore if */
	                if (!head)
	                    throw illegal(token);

	                parseOption(ptr, token);
	                skip(";");
	                break;

	            default:

	                /* istanbul ignore else */
	                if (parseCommon(ptr, token)) {
	                    head = false;
	                    continue;
	                }

	                /* istanbul ignore next */
	                throw illegal(token);
	        }
	    }

	    parse.filename = null;
	    return {
	        "package"     : pkg,
	        "imports"     : imports,
	         weakImports  : weakImports,
	         syntax       : syntax,
	         root         : root
	    };
	}

	/**
	 * Parses the given .proto source and returns an object with the parsed contents.
	 * @name parse
	 * @function
	 * @param {string} source Source contents
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {IParserResult} Parser result
	 * @property {string} filename=null Currently processing file name for error reporting, if known
	 * @property {IParseOptions} defaults Default {@link IParseOptions}
	 * @variation 2
	 */


/***/ }),
/* 120 */
/***/ (function(module, exports) {

	"use strict";
	module.exports = common;

	var commonRe = /\/|\./;

	/**
	 * Provides common type definitions.
	 * Can also be used to provide additional google types or your own custom types.
	 * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
	 * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
	 * @returns {undefined}
	 * @property {INamespace} google/protobuf/any.proto Any
	 * @property {INamespace} google/protobuf/duration.proto Duration
	 * @property {INamespace} google/protobuf/empty.proto Empty
	 * @property {INamespace} google/protobuf/field_mask.proto FieldMask
	 * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
	 * @property {INamespace} google/protobuf/timestamp.proto Timestamp
	 * @property {INamespace} google/protobuf/wrappers.proto Wrappers
	 * @example
	 * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
	 * protobuf.common("descriptor", descriptorJson);
	 *
	 * // manually provides a custom definition (uses my.foo namespace)
	 * protobuf.common("my/foo/bar.proto", myFooBarJson);
	 */
	function common(name, json) {
	    if (!commonRe.test(name)) {
	        name = "google/protobuf/" + name + ".proto";
	        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
	    }
	    common[name] = json;
	}

	// Not provided because of limited use (feel free to discuss or to provide yourself):
	//
	// google/protobuf/descriptor.proto
	// google/protobuf/source_context.proto
	// google/protobuf/type.proto
	//
	// Stripped and pre-parsed versions of these non-bundled files are instead available as part of
	// the repository or package within the google/protobuf directory.

	common("any", {

	    /**
	     * Properties of a google.protobuf.Any message.
	     * @interface IAny
	     * @type {Object}
	     * @property {string} [typeUrl]
	     * @property {Uint8Array} [bytes]
	     * @memberof common
	     */
	    Any: {
	        fields: {
	            type_url: {
	                type: "string",
	                id: 1
	            },
	            value: {
	                type: "bytes",
	                id: 2
	            }
	        }
	    }
	});

	var timeType;

	common("duration", {

	    /**
	     * Properties of a google.protobuf.Duration message.
	     * @interface IDuration
	     * @type {Object}
	     * @property {number|Long} [seconds]
	     * @property {number} [nanos]
	     * @memberof common
	     */
	    Duration: timeType = {
	        fields: {
	            seconds: {
	                type: "int64",
	                id: 1
	            },
	            nanos: {
	                type: "int32",
	                id: 2
	            }
	        }
	    }
	});

	common("timestamp", {

	    /**
	     * Properties of a google.protobuf.Timestamp message.
	     * @interface ITimestamp
	     * @type {Object}
	     * @property {number|Long} [seconds]
	     * @property {number} [nanos]
	     * @memberof common
	     */
	    Timestamp: timeType
	});

	common("empty", {

	    /**
	     * Properties of a google.protobuf.Empty message.
	     * @interface IEmpty
	     * @memberof common
	     */
	    Empty: {
	        fields: {}
	    }
	});

	common("struct", {

	    /**
	     * Properties of a google.protobuf.Struct message.
	     * @interface IStruct
	     * @type {Object}
	     * @property {Object.<string,IValue>} [fields]
	     * @memberof common
	     */
	    Struct: {
	        fields: {
	            fields: {
	                keyType: "string",
	                type: "Value",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.Value message.
	     * @interface IValue
	     * @type {Object}
	     * @property {string} [kind]
	     * @property {0} [nullValue]
	     * @property {number} [numberValue]
	     * @property {string} [stringValue]
	     * @property {boolean} [boolValue]
	     * @property {IStruct} [structValue]
	     * @property {IListValue} [listValue]
	     * @memberof common
	     */
	    Value: {
	        oneofs: {
	            kind: {
	                oneof: [
	                    "nullValue",
	                    "numberValue",
	                    "stringValue",
	                    "boolValue",
	                    "structValue",
	                    "listValue"
	                ]
	            }
	        },
	        fields: {
	            nullValue: {
	                type: "NullValue",
	                id: 1
	            },
	            numberValue: {
	                type: "double",
	                id: 2
	            },
	            stringValue: {
	                type: "string",
	                id: 3
	            },
	            boolValue: {
	                type: "bool",
	                id: 4
	            },
	            structValue: {
	                type: "Struct",
	                id: 5
	            },
	            listValue: {
	                type: "ListValue",
	                id: 6
	            }
	        }
	    },

	    NullValue: {
	        values: {
	            NULL_VALUE: 0
	        }
	    },

	    /**
	     * Properties of a google.protobuf.ListValue message.
	     * @interface IListValue
	     * @type {Object}
	     * @property {Array.<IValue>} [values]
	     * @memberof common
	     */
	    ListValue: {
	        fields: {
	            values: {
	                rule: "repeated",
	                type: "Value",
	                id: 1
	            }
	        }
	    }
	});

	common("wrappers", {

	    /**
	     * Properties of a google.protobuf.DoubleValue message.
	     * @interface IDoubleValue
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    DoubleValue: {
	        fields: {
	            value: {
	                type: "double",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.FloatValue message.
	     * @interface IFloatValue
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    FloatValue: {
	        fields: {
	            value: {
	                type: "float",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.Int64Value message.
	     * @interface IInt64Value
	     * @type {Object}
	     * @property {number|Long} [value]
	     * @memberof common
	     */
	    Int64Value: {
	        fields: {
	            value: {
	                type: "int64",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.UInt64Value message.
	     * @interface IUInt64Value
	     * @type {Object}
	     * @property {number|Long} [value]
	     * @memberof common
	     */
	    UInt64Value: {
	        fields: {
	            value: {
	                type: "uint64",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.Int32Value message.
	     * @interface IInt32Value
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    Int32Value: {
	        fields: {
	            value: {
	                type: "int32",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.UInt32Value message.
	     * @interface IUInt32Value
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    UInt32Value: {
	        fields: {
	            value: {
	                type: "uint32",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.BoolValue message.
	     * @interface IBoolValue
	     * @type {Object}
	     * @property {boolean} [value]
	     * @memberof common
	     */
	    BoolValue: {
	        fields: {
	            value: {
	                type: "bool",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.StringValue message.
	     * @interface IStringValue
	     * @type {Object}
	     * @property {string} [value]
	     * @memberof common
	     */
	    StringValue: {
	        fields: {
	            value: {
	                type: "string",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.BytesValue message.
	     * @interface IBytesValue
	     * @type {Object}
	     * @property {Uint8Array} [value]
	     * @memberof common
	     */
	    BytesValue: {
	        fields: {
	            value: {
	                type: "bytes",
	                id: 1
	            }
	        }
	    }
	});

	common("field_mask", {

	    /**
	     * Properties of a google.protobuf.FieldMask message.
	     * @interface IDoubleValue
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    FieldMask: {
	        fields: {
	            paths: {
	                rule: "repeated",
	                type: "string",
	                id: 1
	            }
	        }
	    }
	});

	/**
	 * Gets the root definition of the specified common proto file.
	 *
	 * Bundled definitions are:
	 * - google/protobuf/any.proto
	 * - google/protobuf/duration.proto
	 * - google/protobuf/empty.proto
	 * - google/protobuf/field_mask.proto
	 * - google/protobuf/struct.proto
	 * - google/protobuf/timestamp.proto
	 * - google/protobuf/wrappers.proto
	 *
	 * @param {string} file Proto file name
	 * @returns {INamespace|null} Root definition or `null` if not defined
	 */
	common.get = function get(file) {
	    return common[file] || null;
	};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*
	 Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>

	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at

	 http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	 */

	/**
	 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
	 * Backing buffer: ArrayBuffer, Accessor: DataView
	 * Released under the Apache License, Version 2.0
	 * see: https://github.com/dcodeIO/bytebuffer.js for details
	 */
	(function(global, factory) {

	    /* AMD */ if ("function" === 'function' && __webpack_require__(122)["amd"])
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(123)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    /* CommonJS */ else if ("function" === 'function' && typeof module === "object" && module && module["exports"])
	        module['exports'] = (function() {
	            var Long; try { Long = __webpack_require__(123); } catch (e) {}
	            return factory(Long);
	        })();
	    /* Global */ else
	        (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);

	})(this, function(Long) {
	    "use strict";

	    /**
	     * Constructs a new ByteBuffer.
	     * @class The swiss army knife for binary data in JavaScript.
	     * @exports ByteBuffer
	     * @constructor
	     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @expose
	     */
	    var ByteBuffer = function(capacity, littleEndian, noAssert) {
	        if (typeof capacity === 'undefined')
	            capacity = ByteBuffer.DEFAULT_CAPACITY;
	        if (typeof littleEndian === 'undefined')
	            littleEndian = ByteBuffer.DEFAULT_ENDIAN;
	        if (typeof noAssert === 'undefined')
	            noAssert = ByteBuffer.DEFAULT_NOASSERT;
	        if (!noAssert) {
	            capacity = capacity | 0;
	            if (capacity < 0)
	                throw RangeError("Illegal capacity");
	            littleEndian = !!littleEndian;
	            noAssert = !!noAssert;
	        }

	        /**
	         * Backing ArrayBuffer.
	         * @type {!ArrayBuffer}
	         * @expose
	         */
	        this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);

	        /**
	         * DataView utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
	         * @type {?DataView}
	         * @expose
	         */
	        this.view = capacity === 0 ? null : new DataView(this.buffer);

	        /**
	         * Absolute read/write offset.
	         * @type {number}
	         * @expose
	         * @see ByteBuffer#flip
	         * @see ByteBuffer#clear
	         */
	        this.offset = 0;

	        /**
	         * Marked offset.
	         * @type {number}
	         * @expose
	         * @see ByteBuffer#mark
	         * @see ByteBuffer#reset
	         */
	        this.markedOffset = -1;

	        /**
	         * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
	         * @type {number}
	         * @expose
	         * @see ByteBuffer#flip
	         * @see ByteBuffer#clear
	         */
	        this.limit = capacity;

	        /**
	         * Whether to use little endian byte order, defaults to `false` for big endian.
	         * @type {boolean}
	         * @expose
	         */
	        this.littleEndian = littleEndian;

	        /**
	         * Whether to skip assertions of offsets and values, defaults to `false`.
	         * @type {boolean}
	         * @expose
	         */
	        this.noAssert = noAssert;
	    };

	    /**
	     * ByteBuffer version.
	     * @type {string}
	     * @const
	     * @expose
	     */
	    ByteBuffer.VERSION = "5.0.1";

	    /**
	     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
	     * @type {boolean}
	     * @const
	     * @expose
	     */
	    ByteBuffer.LITTLE_ENDIAN = true;

	    /**
	     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
	     * @type {boolean}
	     * @const
	     * @expose
	     */
	    ByteBuffer.BIG_ENDIAN = false;

	    /**
	     * Default initial capacity of `16`.
	     * @type {number}
	     * @expose
	     */
	    ByteBuffer.DEFAULT_CAPACITY = 16;

	    /**
	     * Default endianess of `false` for big endian.
	     * @type {boolean}
	     * @expose
	     */
	    ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;

	    /**
	     * Default no assertions flag of `false`.
	     * @type {boolean}
	     * @expose
	     */
	    ByteBuffer.DEFAULT_NOASSERT = false;

	    /**
	     * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
	     *  and int64 support is not available.
	     * @type {?Long}
	     * @const
	     * @see https://github.com/dcodeIO/long.js
	     * @expose
	     */
	    ByteBuffer.Long = Long || null;

	    /**
	     * @alias ByteBuffer.prototype
	     * @inner
	     */
	    var ByteBufferPrototype = ByteBuffer.prototype;

	    /**
	     * An indicator used to reliably determine if an object is a ByteBuffer or not.
	     * @type {boolean}
	     * @const
	     * @expose
	     * @private
	     */
	    ByteBufferPrototype.__isByteBuffer__;

	    Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
	        value: true,
	        enumerable: false,
	        configurable: false
	    });

	    // helpers

	    /**
	     * @type {!ArrayBuffer}
	     * @inner
	     */
	    var EMPTY_BUFFER = new ArrayBuffer(0);

	    /**
	     * String.fromCharCode reference for compile-time renaming.
	     * @type {function(...number):string}
	     * @inner
	     */
	    var stringFromCharCode = String.fromCharCode;

	    /**
	     * Creates a source function for a string.
	     * @param {string} s String to read from
	     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
	     *  no more characters left.
	     * @throws {TypeError} If the argument is invalid
	     * @inner
	     */
	    function stringSource(s) {
	        var i=0; return function() {
	            return i < s.length ? s.charCodeAt(i++) : null;
	        };
	    }

	    /**
	     * Creates a destination function for a string.
	     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
	     *  Returns the final string when called without arguments.
	     * @inner
	     */
	    function stringDestination() {
	        var cs = [], ps = []; return function() {
	            if (arguments.length === 0)
	                return ps.join('')+stringFromCharCode.apply(String, cs);
	            if (cs.length + arguments.length > 1024)
	                ps.push(stringFromCharCode.apply(String, cs)),
	                    cs.length = 0;
	            Array.prototype.push.apply(cs, arguments);
	        };
	    }

	    /**
	     * Gets the accessor type.
	     * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
	     * @expose
	     */
	    ByteBuffer.accessor = function() {
	        return DataView;
	    };
	    /**
	     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
	     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer}
	     * @expose
	     */
	    ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
	        return new ByteBuffer(capacity, littleEndian, noAssert);
	    };

	    /**
	     * Concatenates multiple ByteBuffers into one.
	     * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
	     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
	     *  defaults to "utf8")
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
	     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} Concatenated ByteBuffer
	     * @expose
	     */
	    ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
	        if (typeof encoding === 'boolean' || typeof encoding !== 'string') {
	            noAssert = littleEndian;
	            littleEndian = encoding;
	            encoding = undefined;
	        }
	        var capacity = 0;
	        for (var i=0, k=buffers.length, length; i<k; ++i) {
	            if (!ByteBuffer.isByteBuffer(buffers[i]))
	                buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
	            length = buffers[i].limit - buffers[i].offset;
	            if (length > 0) capacity += length;
	        }
	        if (capacity === 0)
	            return new ByteBuffer(0, littleEndian, noAssert);
	        var bb = new ByteBuffer(capacity, littleEndian, noAssert),
	            bi;
	        var view = new Uint8Array(bb.buffer);
	        i=0; while (i<k) {
	            bi = buffers[i++];
	            length = bi.limit - bi.offset;
	            if (length <= 0) continue;
	            view.set(new Uint8Array(bi.buffer).subarray(bi.offset, bi.limit), bb.offset);
	            bb.offset += length;
	        }
	        bb.limit = bb.offset;
	        bb.offset = 0;
	        return bb;
	    };

	    /**
	     * Tests if the specified type is a ByteBuffer.
	     * @param {*} bb ByteBuffer to test
	     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
	     * @expose
	     */
	    ByteBuffer.isByteBuffer = function(bb) {
	        return (bb && bb["__isByteBuffer__"]) === true;
	    };
	    /**
	     * Gets the backing buffer type.
	     * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
	     * @expose
	     */
	    ByteBuffer.type = function() {
	        return ArrayBuffer;
	    };
	    /**
	     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
	     *  {@link ByteBuffer#limit} to the length of the wrapped data.
	     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
	     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
	     *  "utf8")
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
	     * @expose
	     */
	    ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
	        if (typeof encoding !== 'string') {
	            noAssert = littleEndian;
	            littleEndian = encoding;
	            encoding = undefined;
	        }
	        if (typeof buffer === 'string') {
	            if (typeof encoding === 'undefined')
	                encoding = "utf8";
	            switch (encoding) {
	                case "base64":
	                    return ByteBuffer.fromBase64(buffer, littleEndian);
	                case "hex":
	                    return ByteBuffer.fromHex(buffer, littleEndian);
	                case "binary":
	                    return ByteBuffer.fromBinary(buffer, littleEndian);
	                case "utf8":
	                    return ByteBuffer.fromUTF8(buffer, littleEndian);
	                case "debug":
	                    return ByteBuffer.fromDebug(buffer, littleEndian);
	                default:
	                    throw Error("Unsupported encoding: "+encoding);
	            }
	        }
	        if (buffer === null || typeof buffer !== 'object')
	            throw TypeError("Illegal buffer");
	        var bb;
	        if (ByteBuffer.isByteBuffer(buffer)) {
	            bb = ByteBufferPrototype.clone.call(buffer);
	            bb.markedOffset = -1;
	            return bb;
	        }
	        if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array
	            bb = new ByteBuffer(0, littleEndian, noAssert);
	            if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER
	                bb.buffer = buffer.buffer;
	                bb.offset = buffer.byteOffset;
	                bb.limit = buffer.byteOffset + buffer.byteLength;
	                bb.view = new DataView(buffer.buffer);
	            }
	        } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer
	            bb = new ByteBuffer(0, littleEndian, noAssert);
	            if (buffer.byteLength > 0) {
	                bb.buffer = buffer;
	                bb.offset = 0;
	                bb.limit = buffer.byteLength;
	                bb.view = buffer.byteLength > 0 ? new DataView(buffer) : null;
	            }
	        } else if (Object.prototype.toString.call(buffer) === "[object Array]") { // Create from octets
	            bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
	            bb.limit = buffer.length;
	            for (var i=0; i<buffer.length; ++i)
	                bb.view.setUint8(i, buffer[i]);
	        } else
	            throw TypeError("Illegal buffer"); // Otherwise fail
	        return bb;
	    };

	    /**
	     * Writes the array as a bitset.
	     * @param {Array<boolean>} value Array of booleans to write
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
	     * @returns {!ByteBuffer}
	     * @expose
	     */
	    ByteBufferPrototype.writeBitSet = function(value, offset) {
	      var relative = typeof offset === 'undefined';
	      if (relative) offset = this.offset;
	      if (!this.noAssert) {
	        if (!(value instanceof Array))
	          throw TypeError("Illegal BitSet: Not an array");
	        if (typeof offset !== 'number' || offset % 1 !== 0)
	            throw TypeError("Illegal offset: "+offset+" (not an integer)");
	        offset >>>= 0;
	        if (offset < 0 || offset + 0 > this.buffer.byteLength)
	            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	      }

	      var start = offset,
	          bits = value.length,
	          bytes = (bits >> 3),
	          bit = 0,
	          k;

	      offset += this.writeVarint32(bits,offset);

	      while(bytes--) {
	        k = (!!value[bit++] & 1) |
	            ((!!value[bit++] & 1) << 1) |
	            ((!!value[bit++] & 1) << 2) |
	            ((!!value[bit++] & 1) << 3) |
	            ((!!value[bit++] & 1) << 4) |
	            ((!!value[bit++] & 1) << 5) |
	            ((!!value[bit++] & 1) << 6) |
	            ((!!value[bit++] & 1) << 7);
	        this.writeByte(k,offset++);
	      }

	      if(bit < bits) {
	        var m = 0; k = 0;
	        while(bit < bits) k = k | ((!!value[bit++] & 1) << (m++));
	        this.writeByte(k,offset++);
	      }

	      if (relative) {
	        this.offset = offset;
	        return this;
	      }
	      return offset - start;
	    }

	    /**
	     * Reads a BitSet as an array of booleans.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
	     * @returns {Array<boolean>
	     * @expose
	     */
	    ByteBufferPrototype.readBitSet = function(offset) {
	      var relative = typeof offset === 'undefined';
	      if (relative) offset = this.offset;

	      var ret = this.readVarint32(offset),
	          bits = ret.value,
	          bytes = (bits >> 3),
	          bit = 0,
	          value = [],
	          k;

	      offset += ret.length;

	      while(bytes--) {
	        k = this.readByte(offset++);
	        value[bit++] = !!(k & 0x01);
	        value[bit++] = !!(k & 0x02);
	        value[bit++] = !!(k & 0x04);
	        value[bit++] = !!(k & 0x08);
	        value[bit++] = !!(k & 0x10);
	        value[bit++] = !!(k & 0x20);
	        value[bit++] = !!(k & 0x40);
	        value[bit++] = !!(k & 0x80);
	      }

	      if(bit < bits) {
	        var m = 0;
	        k = this.readByte(offset++);
	        while(bit < bits) value[bit++] = !!((k >> (m++)) & 1);
	      }

	      if (relative) {
	        this.offset = offset;
	      }
	      return value;
	    }
	    /**
	     * Reads the specified number of bytes.
	     * @param {number} length Number of bytes to read
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
	     * @returns {!ByteBuffer}
	     * @expose
	     */
	    ByteBufferPrototype.readBytes = function(length, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + length > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
	        }
	        var slice = this.slice(offset, offset + length);
	        if (relative) this.offset += length;
	        return slice;
	    };

	    /**
	     * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
	     * @function
	     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets
	     *  will be modified according to the performed read operation.
	     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;

	    // types/ints/int8

	    /**
	     * Writes an 8bit signed integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeInt8 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value |= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 1;
	        var capacity0 = this.buffer.byteLength;
	        if (offset > capacity0)
	            this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
	        offset -= 1;
	        this.view.setInt8(offset, value);
	        if (relative) this.offset += 1;
	        return this;
	    };

	    /**
	     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;

	    /**
	     * Reads an 8bit signed integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readInt8 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 1 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getInt8(offset);
	        if (relative) this.offset += 1;
	        return value;
	    };

	    /**
	     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;

	    /**
	     * Writes an 8bit unsigned integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeUint8 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value >>>= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 1;
	        var capacity1 = this.buffer.byteLength;
	        if (offset > capacity1)
	            this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
	        offset -= 1;
	        this.view.setUint8(offset, value);
	        if (relative) this.offset += 1;
	        return this;
	    };

	    /**
	     * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;

	    /**
	     * Reads an 8bit unsigned integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readUint8 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 1 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getUint8(offset);
	        if (relative) this.offset += 1;
	        return value;
	    };

	    /**
	     * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;

	    // types/ints/int16

	    /**
	     * Writes a 16bit signed integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.writeInt16 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value |= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 2;
	        var capacity2 = this.buffer.byteLength;
	        if (offset > capacity2)
	            this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
	        offset -= 2;
	        this.view.setInt16(offset, value, this.littleEndian);
	        if (relative) this.offset += 2;
	        return this;
	    };

	    /**
	     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;

	    /**
	     * Reads a 16bit signed integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.readInt16 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 2 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getInt16(offset, this.littleEndian);
	        if (relative) this.offset += 2;
	        return value;
	    };

	    /**
	     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;

	    /**
	     * Writes a 16bit unsigned integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.writeUint16 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value >>>= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 2;
	        var capacity3 = this.buffer.byteLength;
	        if (offset > capacity3)
	            this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
	        offset -= 2;
	        this.view.setUint16(offset, value, this.littleEndian);
	        if (relative) this.offset += 2;
	        return this;
	    };

	    /**
	     * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;

	    /**
	     * Reads a 16bit unsigned integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.readUint16 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 2 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getUint16(offset, this.littleEndian);
	        if (relative) this.offset += 2;
	        return value;
	    };

	    /**
	     * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;

	    // types/ints/int32

	    /**
	     * Writes a 32bit signed integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */
	    ByteBufferPrototype.writeInt32 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value |= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 4;
	        var capacity4 = this.buffer.byteLength;
	        if (offset > capacity4)
	            this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
	        offset -= 4;
	        this.view.setInt32(offset, value, this.littleEndian);
	        if (relative) this.offset += 4;
	        return this;
	    };

	    /**
	     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */
	    ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;

	    /**
	     * Reads a 32bit signed integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readInt32 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 4 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getInt32(offset, this.littleEndian);
	        if (relative) this.offset += 4;
	        return value;
	    };

	    /**
	     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;

	    /**
	     * Writes a 32bit unsigned integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */
	    ByteBufferPrototype.writeUint32 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value >>>= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 4;
	        var capacity5 = this.buffer.byteLength;
	        if (offset > capacity5)
	            this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
	        offset -= 4;
	        this.view.setUint32(offset, value, this.littleEndian);
	        if (relative) this.offset += 4;
	        return this;
	    };

	    /**
	     * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */
	    ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;

	    /**
	     * Reads a 32bit unsigned integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readUint32 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 4 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getUint32(offset, this.littleEndian);
	        if (relative) this.offset += 4;
	        return value;
	    };

	    /**
	     * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */
	    ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;

	    // types/ints/int64

	    if (Long) {

	        /**
	         * Writes a 64bit signed integer.
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */
	        ByteBufferPrototype.writeInt64 = function(value, offset) {
	            var relative = typeof offset === 'undefined';
	            if (relative) offset = this.offset;
	            if (!this.noAssert) {
	                if (typeof value === 'number')
	                    value = Long.fromNumber(value);
	                else if (typeof value === 'string')
	                    value = Long.fromString(value);
	                else if (!(value && value instanceof Long))
	                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
	                if (typeof offset !== 'number' || offset % 1 !== 0)
	                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
	                offset >>>= 0;
	                if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	            }
	            if (typeof value === 'number')
	                value = Long.fromNumber(value);
	            else if (typeof value === 'string')
	                value = Long.fromString(value);
	            offset += 8;
	            var capacity6 = this.buffer.byteLength;
	            if (offset > capacity6)
	                this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
	            offset -= 8;
	            if (this.littleEndian) {
	                this.view.setInt32(offset  , value.low , true);
	                this.view.setInt32(offset+4, value.high, true);
	            } else {
	                this.view.setInt32(offset  , value.high, false);
	                this.view.setInt32(offset+4, value.low , false);
	            }
	            if (relative) this.offset += 8;
	            return this;
	        };

	        /**
	         * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */
	        ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;

	        /**
	         * Reads a 64bit signed integer.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */
	        ByteBufferPrototype.readInt64 = function(offset) {
	            var relative = typeof offset === 'undefined';
	            if (relative) offset = this.offset;
	            if (!this.noAssert) {
	                if (typeof offset !== 'number' || offset % 1 !== 0)
	                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
	                offset >>>= 0;
	                if (offset < 0 || offset + 8 > this.buffer.byteLength)
	                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
	            }
	            var value = this.littleEndian
	                ? new Long(this.view.getInt32(offset  , true ), this.view.getInt32(offset+4, true ), false)
	                : new Long(this.view.getInt32(offset+4, false), this.view.getInt32(offset  , false), false);
	            if (relative) this.offset += 8;
	            return value;
	        };

	        /**
	         * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */
	        ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;

	        /**
	         * Writes a 64bit unsigned integer.
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */
	        ByteBufferPrototype.writeUint64 = function(value, offset) {
	            var relative = typeof offset === 'undefined';
	            if (relative) offset = this.offset;
	            if (!this.noAssert) {
	                if (typeof value === 'number')
	                    value = Long.fromNumber(value);
	                else if (typeof value === 'string')
	                    value = Long.fromString(value);
	                else if (!(value && value instanceof Long))
	                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
	                if (typeof offset !== 'number' || offset % 1 !== 0)
	                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
	                offset >>>= 0;
	                if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	            }
	            if (typeof value === 'number')
	                value = Long.fromNumber(value);
	            else if (typeof value === 'string')
	                value = Long.fromString(value);
	            offset += 8;
	            var capacity7 = this.buffer.byteLength;
	            if (offset > capacity7)
	                this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
	            offset -= 8;
	            if (this.littleEndian) {
	                this.view.setInt32(offset  , value.low , true);
	                this.view.setInt32(offset+4, value.high, true);
	            } else {
	                this.view.setInt32(offset  , value.high, false);
	                this.view.setInt32(offset+4, value.low , false);
	            }
	            if (relative) this.offset += 8;
	            return this;
	        };

	        /**
	         * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
	         * @function
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */
	        ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;

	        /**
	         * Reads a 64bit unsigned integer.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */
	        ByteBufferPrototype.readUint64 = function(offset) {
	            var relative = typeof offset === 'undefined';
	            if (relative) offset = this.offset;
	            if (!this.noAssert) {
	                if (typeof offset !== 'number' || offset % 1 !== 0)
	                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
	                offset >>>= 0;
	                if (offset < 0 || offset + 8 > this.buffer.byteLength)
	                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
	            }
	            var value = this.littleEndian
	                ? new Long(this.view.getInt32(offset  , true ), this.view.getInt32(offset+4, true ), true)
	                : new Long(this.view.getInt32(offset+4, false), this.view.getInt32(offset  , false), true);
	            if (relative) this.offset += 8;
	            return value;
	        };

	        /**
	         * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
	         * @function
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */
	        ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;

	    } // Long


	    // types/floats/float32

	    /**
	     * Writes a 32bit float.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeFloat32 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number')
	                throw TypeError("Illegal value: "+value+" (not a number)");
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 4;
	        var capacity8 = this.buffer.byteLength;
	        if (offset > capacity8)
	            this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
	        offset -= 4;
	        this.view.setFloat32(offset, value, this.littleEndian);
	        if (relative) this.offset += 4;
	        return this;
	    };

	    /**
	     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;

	    /**
	     * Reads a 32bit float.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number}
	     * @expose
	     */
	    ByteBufferPrototype.readFloat32 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 4 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getFloat32(offset, this.littleEndian);
	        if (relative) this.offset += 4;
	        return value;
	    };

	    /**
	     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number}
	     * @expose
	     */
	    ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;

	    // types/floats/float64

	    /**
	     * Writes a 64bit float.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeFloat64 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number')
	                throw TypeError("Illegal value: "+value+" (not a number)");
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        offset += 8;
	        var capacity9 = this.buffer.byteLength;
	        if (offset > capacity9)
	            this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
	        offset -= 8;
	        this.view.setFloat64(offset, value, this.littleEndian);
	        if (relative) this.offset += 8;
	        return this;
	    };

	    /**
	     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;

	    /**
	     * Reads a 64bit float.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {number}
	     * @expose
	     */
	    ByteBufferPrototype.readFloat64 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 8 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
	        }
	        var value = this.view.getFloat64(offset, this.littleEndian);
	        if (relative) this.offset += 8;
	        return value;
	    };

	    /**
	     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {number}
	     * @expose
	     */
	    ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;


	    // types/varints/varint32

	    /**
	     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
	     * @type {number}
	     * @const
	     * @expose
	     */
	    ByteBuffer.MAX_VARINT32_BYTES = 5;

	    /**
	     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
	     * @param {number} value Value to encode
	     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
	     * @expose
	     */
	    ByteBuffer.calculateVarint32 = function(value) {
	        // ref: src/google/protobuf/io/coded_stream.cc
	        value = value >>> 0;
	             if (value < 1 << 7 ) return 1;
	        else if (value < 1 << 14) return 2;
	        else if (value < 1 << 21) return 3;
	        else if (value < 1 << 28) return 4;
	        else                      return 5;
	    };

	    /**
	     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
	     * @param {number} n Signed 32bit integer
	     * @returns {number} Unsigned zigzag encoded 32bit integer
	     * @expose
	     */
	    ByteBuffer.zigZagEncode32 = function(n) {
	        return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
	    };

	    /**
	     * Decodes a zigzag encoded signed 32bit integer.
	     * @param {number} n Unsigned zigzag encoded 32bit integer
	     * @returns {number} Signed 32bit integer
	     * @expose
	     */
	    ByteBuffer.zigZagDecode32 = function(n) {
	        return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h
	    };

	    /**
	     * Writes a 32bit base 128 variable-length integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     */
	    ByteBufferPrototype.writeVarint32 = function(value, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value |= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        var size = ByteBuffer.calculateVarint32(value),
	            b;
	        offset += size;
	        var capacity10 = this.buffer.byteLength;
	        if (offset > capacity10)
	            this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
	        offset -= size;
	        value >>>= 0;
	        while (value >= 0x80) {
	            b = (value & 0x7f) | 0x80;
	            this.view.setUint8(offset++, b);
	            value >>>= 7;
	        }
	        this.view.setUint8(offset++, value);
	        if (relative) {
	            this.offset = offset;
	            return this;
	        }
	        return size;
	    };

	    /**
	     * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     */
	    ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
	        return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
	    };

	    /**
	     * Reads a 32bit base 128 variable-length integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
	     *  and the actual number of bytes read.
	     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
	     *  to fully decode the varint.
	     * @expose
	     */
	    ByteBufferPrototype.readVarint32 = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 1 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
	        }
	        var c = 0,
	            value = 0 >>> 0,
	            b;
	        do {
	            if (!this.noAssert && offset > this.limit) {
	                var err = Error("Truncated");
	                err['truncated'] = true;
	                throw err;
	            }
	            b = this.view.getUint8(offset++);
	            if (c < 5)
	                value |= (b & 0x7f) << (7*c);
	            ++c;
	        } while ((b & 0x80) !== 0);
	        value |= 0;
	        if (relative) {
	            this.offset = offset;
	            return value;
	        }
	        return {
	            "value": value,
	            "length": c
	        };
	    };

	    /**
	     * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
	     *  and the actual number of bytes read.
	     * @throws {Error} If it's not a valid varint
	     * @expose
	     */
	    ByteBufferPrototype.readVarint32ZigZag = function(offset) {
	        var val = this.readVarint32(offset);
	        if (typeof val === 'object')
	            val["value"] = ByteBuffer.zigZagDecode32(val["value"]);
	        else
	            val = ByteBuffer.zigZagDecode32(val);
	        return val;
	    };

	    // types/varints/varint64

	    if (Long) {

	        /**
	         * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
	         * @type {number}
	         * @const
	         * @expose
	         */
	        ByteBuffer.MAX_VARINT64_BYTES = 10;

	        /**
	         * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
	         * @param {number|!Long} value Value to encode
	         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
	         * @expose
	         */
	        ByteBuffer.calculateVarint64 = function(value) {
	            if (typeof value === 'number')
	                value = Long.fromNumber(value);
	            else if (typeof value === 'string')
	                value = Long.fromString(value);
	            // ref: src/google/protobuf/io/coded_stream.cc
	            var part0 = value.toInt() >>> 0,
	                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
	                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
	            if (part2 == 0) {
	                if (part1 == 0) {
	                    if (part0 < 1 << 14)
	                        return part0 < 1 << 7 ? 1 : 2;
	                    else
	                        return part0 < 1 << 21 ? 3 : 4;
	                } else {
	                    if (part1 < 1 << 14)
	                        return part1 < 1 << 7 ? 5 : 6;
	                    else
	                        return part1 < 1 << 21 ? 7 : 8;
	                }
	            } else
	                return part2 < 1 << 7 ? 9 : 10;
	        };

	        /**
	         * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
	         * @param {number|!Long} value Signed long
	         * @returns {!Long} Unsigned zigzag encoded long
	         * @expose
	         */
	        ByteBuffer.zigZagEncode64 = function(value) {
	            if (typeof value === 'number')
	                value = Long.fromNumber(value, false);
	            else if (typeof value === 'string')
	                value = Long.fromString(value, false);
	            else if (value.unsigned !== false) value = value.toSigned();
	            // ref: src/google/protobuf/wire_format_lite.h
	            return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
	        };

	        /**
	         * Decodes a zigzag encoded signed 64bit integer.
	         * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
	         * @returns {!Long} Signed long
	         * @expose
	         */
	        ByteBuffer.zigZagDecode64 = function(value) {
	            if (typeof value === 'number')
	                value = Long.fromNumber(value, false);
	            else if (typeof value === 'string')
	                value = Long.fromString(value, false);
	            else if (value.unsigned !== false) value = value.toSigned();
	            // ref: src/google/protobuf/wire_format_lite.h
	            return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
	        };

	        /**
	         * Writes a 64bit base 128 variable-length integer.
	         * @param {number|Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  written if omitted.
	         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
	         * @expose
	         */
	        ByteBufferPrototype.writeVarint64 = function(value, offset) {
	            var relative = typeof offset === 'undefined';
	            if (relative) offset = this.offset;
	            if (!this.noAssert) {
	                if (typeof value === 'number')
	                    value = Long.fromNumber(value);
	                else if (typeof value === 'string')
	                    value = Long.fromString(value);
	                else if (!(value && value instanceof Long))
	                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
	                if (typeof offset !== 'number' || offset % 1 !== 0)
	                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
	                offset >>>= 0;
	                if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	            }
	            if (typeof value === 'number')
	                value = Long.fromNumber(value, false);
	            else if (typeof value === 'string')
	                value = Long.fromString(value, false);
	            else if (value.unsigned !== false) value = value.toSigned();
	            var size = ByteBuffer.calculateVarint64(value),
	                part0 = value.toInt() >>> 0,
	                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
	                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
	            offset += size;
	            var capacity11 = this.buffer.byteLength;
	            if (offset > capacity11)
	                this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
	            offset -= size;
	            switch (size) {
	                case 10: this.view.setUint8(offset+9, (part2 >>>  7) & 0x01);
	                case 9 : this.view.setUint8(offset+8, size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F);
	                case 8 : this.view.setUint8(offset+7, size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F);
	                case 7 : this.view.setUint8(offset+6, size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F);
	                case 6 : this.view.setUint8(offset+5, size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F);
	                case 5 : this.view.setUint8(offset+4, size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F);
	                case 4 : this.view.setUint8(offset+3, size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F);
	                case 3 : this.view.setUint8(offset+2, size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F);
	                case 2 : this.view.setUint8(offset+1, size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F);
	                case 1 : this.view.setUint8(offset  , size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F);
	            }
	            if (relative) {
	                this.offset += size;
	                return this;
	            } else {
	                return size;
	            }
	        };

	        /**
	         * Writes a zig-zag encoded 64bit base 128 variable-length integer.
	         * @param {number|Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  written if omitted.
	         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
	         * @expose
	         */
	        ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
	            return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
	        };

	        /**
	         * Reads a 64bit base 128 variable-length integer. Requires Long.js.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  read if omitted.
	         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
	         *  the actual number of bytes read.
	         * @throws {Error} If it's not a valid varint
	         * @expose
	         */
	        ByteBufferPrototype.readVarint64 = function(offset) {
	            var relative = typeof offset === 'undefined';
	            if (relative) offset = this.offset;
	            if (!this.noAssert) {
	                if (typeof offset !== 'number' || offset % 1 !== 0)
	                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
	                offset >>>= 0;
	                if (offset < 0 || offset + 1 > this.buffer.byteLength)
	                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
	            }
	            // ref: src/google/protobuf/io/coded_stream.cc
	            var start = offset,
	                part0 = 0,
	                part1 = 0,
	                part2 = 0,
	                b  = 0;
	            b = this.view.getUint8(offset++); part0  = (b & 0x7F)      ; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part0 |= (b & 0x7F) <<  7; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part0 |= (b & 0x7F) << 14; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part0 |= (b & 0x7F) << 21; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part1  = (b & 0x7F)      ; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part1 |= (b & 0x7F) <<  7; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part1 |= (b & 0x7F) << 14; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part1 |= (b & 0x7F) << 21; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part2  = (b & 0x7F)      ; if (b & 0x80) {
	            b = this.view.getUint8(offset++); part2 |= (b & 0x7F) <<  7; if (b & 0x80) {
	            throw Error("Buffer overrun"); }}}}}}}}}}
	            var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);
	            if (relative) {
	                this.offset = offset;
	                return value;
	            } else {
	                return {
	                    'value': value,
	                    'length': offset-start
	                };
	            }
	        };

	        /**
	         * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  read if omitted.
	         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
	         *  the actual number of bytes read.
	         * @throws {Error} If it's not a valid varint
	         * @expose
	         */
	        ByteBufferPrototype.readVarint64ZigZag = function(offset) {
	            var val = this.readVarint64(offset);
	            if (val && val['value'] instanceof Long)
	                val["value"] = ByteBuffer.zigZagDecode64(val["value"]);
	            else
	                val = ByteBuffer.zigZagDecode64(val);
	            return val;
	        };

	    } // Long


	    // types/strings/cstring

	    /**
	     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
	     *  characters itself.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  contained in `str` + 1 if omitted.
	     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
	     * @expose
	     */
	    ByteBufferPrototype.writeCString = function(str, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        var i,
	            k = str.length;
	        if (!this.noAssert) {
	            if (typeof str !== 'string')
	                throw TypeError("Illegal str: Not a string");
	            for (i=0; i<k; ++i) {
	                if (str.charCodeAt(i) === 0)
	                    throw RangeError("Illegal str: Contains NULL-characters");
	            }
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        // UTF8 strings do not contain zero bytes in between except for the zero character, so:
	        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
	        offset += k+1;
	        var capacity12 = this.buffer.byteLength;
	        if (offset > capacity12)
	            this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
	        offset -= k+1;
	        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
	            this.view.setUint8(offset++, b);
	        }.bind(this));
	        this.view.setUint8(offset++, 0);
	        if (relative) {
	            this.offset = offset;
	            return this;
	        }
	        return k;
	    };

	    /**
	     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
	     *  itself.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     */
	    ByteBufferPrototype.readCString = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 1 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
	        }
	        var start = offset,
	            temp;
	        // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
	        var sd, b = -1;
	        utfx.decodeUTF8toUTF16(function() {
	            if (b === 0) return null;
	            if (offset >= this.limit)
	                throw RangeError("Illegal range: Truncated data, "+offset+" < "+this.limit);
	            b = this.view.getUint8(offset++);
	            return b === 0 ? null : b;
	        }.bind(this), sd = stringDestination(), true);
	        if (relative) {
	            this.offset = offset;
	            return sd();
	        } else {
	            return {
	                "string": sd(),
	                "length": offset - start
	            };
	        }
	    };

	    // types/strings/istring

	    /**
	     * Writes a length as uint32 prefixed UTF8 encoded string.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     * @see ByteBuffer#writeVarint32
	     */
	    ByteBufferPrototype.writeIString = function(str, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof str !== 'string')
	                throw TypeError("Illegal str: Not a string");
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        var start = offset,
	            k;
	        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
	        offset += 4+k;
	        var capacity13 = this.buffer.byteLength;
	        if (offset > capacity13)
	            this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
	        offset -= 4+k;
	        this.view.setUint32(offset, k, this.littleEndian);
	        offset += 4;
	        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
	            this.view.setUint8(offset++, b);
	        }.bind(this));
	        if (offset !== start + 4 + k)
	            throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+4+k));
	        if (relative) {
	            this.offset = offset;
	            return this;
	        }
	        return offset - start;
	    };

	    /**
	     * Reads a length as uint32 prefixed UTF8 encoded string.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     * @see ByteBuffer#readVarint32
	     */
	    ByteBufferPrototype.readIString = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 4 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
	        }
	        var start = offset;
	        var len = this.readUint32(offset);
	        var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
	        offset += str['length'];
	        if (relative) {
	            this.offset = offset;
	            return str['string'];
	        } else {
	            return {
	                'string': str['string'],
	                'length': offset - start
	            };
	        }
	    };

	    // types/strings/utf8string

	    /**
	     * Metrics representing number of UTF8 characters. Evaluates to `c`.
	     * @type {string}
	     * @const
	     * @expose
	     */
	    ByteBuffer.METRICS_CHARS = 'c';

	    /**
	     * Metrics representing number of bytes. Evaluates to `b`.
	     * @type {string}
	     * @const
	     * @expose
	     */
	    ByteBuffer.METRICS_BYTES = 'b';

	    /**
	     * Writes an UTF8 encoded string.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
	     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
	     * @expose
	     */
	    ByteBufferPrototype.writeUTF8String = function(str, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        var k;
	        var start = offset;
	        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
	        offset += k;
	        var capacity14 = this.buffer.byteLength;
	        if (offset > capacity14)
	            this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
	        offset -= k;
	        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
	            this.view.setUint8(offset++, b);
	        }.bind(this));
	        if (relative) {
	            this.offset = offset;
	            return this;
	        }
	        return offset - start;
	    };

	    /**
	     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
	     * @function
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
	     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
	     * @expose
	     */
	    ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;

	    /**
	     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
	     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
	     * @param {string} str String to calculate
	     * @returns {number} Number of UTF8 characters
	     * @expose
	     */
	    ByteBuffer.calculateUTF8Chars = function(str) {
	        return utfx.calculateUTF16asUTF8(stringSource(str))[0];
	    };

	    /**
	     * Calculates the number of UTF8 bytes of a string.
	     * @param {string} str String to calculate
	     * @returns {number} Number of UTF8 bytes
	     * @expose
	     */
	    ByteBuffer.calculateUTF8Bytes = function(str) {
	        return utfx.calculateUTF16asUTF8(stringSource(str))[1];
	    };

	    /**
	     * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
	     * @function
	     * @param {string} str String to calculate
	     * @returns {number} Number of UTF8 bytes
	     * @expose
	     */
	    ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;

	    /**
	     * Reads an UTF8 encoded string.
	     * @param {number} length Number of characters or bytes to read.
	     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
	     *  {@link ByteBuffer.METRICS_CHARS}.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     */
	    ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
	        if (typeof metrics === 'number') {
	            offset = metrics;
	            metrics = undefined;
	        }
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;
	        if (!this.noAssert) {
	            if (typeof length !== 'number' || length % 1 !== 0)
	                throw TypeError("Illegal length: "+length+" (not an integer)");
	            length |= 0;
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        var i = 0,
	            start = offset,
	            sd;
	        if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser
	            sd = stringDestination();
	            utfx.decodeUTF8(function() {
	                return i < length && offset < this.limit ? this.view.getUint8(offset++) : null;
	            }.bind(this), function(cp) {
	                ++i; utfx.UTF8toUTF16(cp, sd);
	            });
	            if (i !== length)
	                throw RangeError("Illegal range: Truncated data, "+i+" == "+length);
	            if (relative) {
	                this.offset = offset;
	                return sd();
	            } else {
	                return {
	                    "string": sd(),
	                    "length": offset - start
	                };
	            }
	        } else if (metrics === ByteBuffer.METRICS_BYTES) {
	            if (!this.noAssert) {
	                if (typeof offset !== 'number' || offset % 1 !== 0)
	                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
	                offset >>>= 0;
	                if (offset < 0 || offset + length > this.buffer.byteLength)
	                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
	            }
	            var k = offset + length;
	            utfx.decodeUTF8toUTF16(function() {
	                return offset < k ? this.view.getUint8(offset++) : null;
	            }.bind(this), sd = stringDestination(), this.noAssert);
	            if (offset !== k)
	                throw RangeError("Illegal range: Truncated data, "+offset+" == "+k);
	            if (relative) {
	                this.offset = offset;
	                return sd();
	            } else {
	                return {
	                    'string': sd(),
	                    'length': offset - start
	                };
	            }
	        } else
	            throw TypeError("Unsupported metrics: "+metrics);
	    };

	    /**
	     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
	     * @function
	     * @param {number} length Number of characters or bytes to read
	     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
	     *  {@link ByteBuffer.METRICS_CHARS}.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     */
	    ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;

	    // types/strings/vstring

	    /**
	     * Writes a length as varint32 prefixed UTF8 encoded string.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     * @see ByteBuffer#writeVarint32
	     */
	    ByteBufferPrototype.writeVString = function(str, offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof str !== 'string')
	                throw TypeError("Illegal str: Not a string");
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        var start = offset,
	            k, l;
	        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
	        l = ByteBuffer.calculateVarint32(k);
	        offset += l+k;
	        var capacity15 = this.buffer.byteLength;
	        if (offset > capacity15)
	            this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
	        offset -= l+k;
	        offset += this.writeVarint32(k, offset);
	        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
	            this.view.setUint8(offset++, b);
	        }.bind(this));
	        if (offset !== start+k+l)
	            throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+k+l));
	        if (relative) {
	            this.offset = offset;
	            return this;
	        }
	        return offset - start;
	    };

	    /**
	     * Reads a length as varint32 prefixed UTF8 encoded string.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     * @see ByteBuffer#readVarint32
	     */
	    ByteBufferPrototype.readVString = function(offset) {
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 1 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
	        }
	        var start = offset;
	        var len = this.readVarint32(offset);
	        var str = this.readUTF8String(len['value'], ByteBuffer.METRICS_BYTES, offset += len['length']);
	        offset += str['length'];
	        if (relative) {
	            this.offset = offset;
	            return str['string'];
	        } else {
	            return {
	                'string': str['string'],
	                'length': offset - start
	            };
	        }
	    };


	    /**
	     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
	     *  data's length.
	     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
	     *  will be modified according to the performed read operation.
	     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
	     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
	     */
	    ByteBufferPrototype.append = function(source, encoding, offset) {
	        if (typeof encoding === 'number' || typeof encoding !== 'string') {
	            offset = encoding;
	            encoding = undefined;
	        }
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        if (!(source instanceof ByteBuffer))
	            source = ByteBuffer.wrap(source, encoding);
	        var length = source.limit - source.offset;
	        if (length <= 0) return this; // Nothing to append
	        offset += length;
	        var capacity16 = this.buffer.byteLength;
	        if (offset > capacity16)
	            this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
	        offset -= length;
	        new Uint8Array(this.buffer, offset).set(new Uint8Array(source.buffer).subarray(source.offset, source.limit));
	        source.offset += length;
	        if (relative) this.offset += length;
	        return this;
	    };

	    /**
	     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
	        specified offset up to the length of this ByteBuffer's data.
	     * @param {!ByteBuffer} target Target ByteBuffer
	     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @see ByteBuffer#append
	     */
	    ByteBufferPrototype.appendTo = function(target, offset) {
	        target.append(this, offset);
	        return this;
	    };

	    /**
	     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
	     *  disable them if your code already makes sure that everything is valid.
	     * @param {boolean} assert `true` to enable assertions, otherwise `false`
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.assert = function(assert) {
	        this.noAssert = !assert;
	        return this;
	    };

	    /**
	     * Gets the capacity of this ByteBuffer's backing buffer.
	     * @returns {number} Capacity of the backing buffer
	     * @expose
	     */
	    ByteBufferPrototype.capacity = function() {
	        return this.buffer.byteLength;
	    };
	    /**
	     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
	     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.clear = function() {
	        this.offset = 0;
	        this.limit = this.buffer.byteLength;
	        this.markedOffset = -1;
	        return this;
	    };

	    /**
	     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
	     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
	     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
	     * @returns {!ByteBuffer} Cloned instance
	     * @expose
	     */
	    ByteBufferPrototype.clone = function(copy) {
	        var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
	        if (copy) {
	            bb.buffer = new ArrayBuffer(this.buffer.byteLength);
	            new Uint8Array(bb.buffer).set(this.buffer);
	            bb.view = new DataView(bb.buffer);
	        } else {
	            bb.buffer = this.buffer;
	            bb.view = this.view;
	        }
	        bb.offset = this.offset;
	        bb.markedOffset = this.markedOffset;
	        bb.limit = this.limit;
	        return bb;
	    };

	    /**
	     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
	     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
	     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
	     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.compact = function(begin, end) {
	        if (typeof begin === 'undefined') begin = this.offset;
	        if (typeof end === 'undefined') end = this.limit;
	        if (!this.noAssert) {
	            if (typeof begin !== 'number' || begin % 1 !== 0)
	                throw TypeError("Illegal begin: Not an integer");
	            begin >>>= 0;
	            if (typeof end !== 'number' || end % 1 !== 0)
	                throw TypeError("Illegal end: Not an integer");
	            end >>>= 0;
	            if (begin < 0 || begin > end || end > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
	        }
	        if (begin === 0 && end === this.buffer.byteLength)
	            return this; // Already compacted
	        var len = end - begin;
	        if (len === 0) {
	            this.buffer = EMPTY_BUFFER;
	            this.view = null;
	            if (this.markedOffset >= 0) this.markedOffset -= begin;
	            this.offset = 0;
	            this.limit = 0;
	            return this;
	        }
	        var buffer = new ArrayBuffer(len);
	        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(begin, end));
	        this.buffer = buffer;
	        this.view = new DataView(buffer);
	        if (this.markedOffset >= 0) this.markedOffset -= begin;
	        this.offset = 0;
	        this.limit = len;
	        return this;
	    };

	    /**
	     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
	     *  {@link ByteBuffer#limit}.
	     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	     * @returns {!ByteBuffer} Copy
	     * @expose
	     */
	    ByteBufferPrototype.copy = function(begin, end) {
	        if (typeof begin === 'undefined') begin = this.offset;
	        if (typeof end === 'undefined') end = this.limit;
	        if (!this.noAssert) {
	            if (typeof begin !== 'number' || begin % 1 !== 0)
	                throw TypeError("Illegal begin: Not an integer");
	            begin >>>= 0;
	            if (typeof end !== 'number' || end % 1 !== 0)
	                throw TypeError("Illegal end: Not an integer");
	            end >>>= 0;
	            if (begin < 0 || begin > end || end > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
	        }
	        if (begin === end)
	            return new ByteBuffer(0, this.littleEndian, this.noAssert);
	        var capacity = end - begin,
	            bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
	        bb.offset = 0;
	        bb.limit = capacity;
	        if (bb.markedOffset >= 0) bb.markedOffset -= begin;
	        this.copyTo(bb, 0, begin, end);
	        return bb;
	    };

	    /**
	     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
	     *  {@link ByteBuffer#limit}.
	     * @param {!ByteBuffer} target Target ByteBuffer
	     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
	     *  by the number of bytes copied if omitted.
	     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
	     *  number of bytes copied if omitted.
	     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
	        var relative,
	            targetRelative;
	        if (!this.noAssert) {
	            if (!ByteBuffer.isByteBuffer(target))
	                throw TypeError("Illegal target: Not a ByteBuffer");
	        }
	        targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;
	        sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;
	        sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;

	        if (targetOffset < 0 || targetOffset > target.buffer.byteLength)
	            throw RangeError("Illegal target range: 0 <= "+targetOffset+" <= "+target.buffer.byteLength);
	        if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)
	            throw RangeError("Illegal source range: 0 <= "+sourceOffset+" <= "+this.buffer.byteLength);

	        var len = sourceLimit - sourceOffset;
	        if (len === 0)
	            return target; // Nothing to copy

	        target.ensureCapacity(targetOffset + len);

	        new Uint8Array(target.buffer).set(new Uint8Array(this.buffer).subarray(sourceOffset, sourceLimit), targetOffset);

	        if (relative) this.offset += len;
	        if (targetRelative) target.offset += len;

	        return this;
	    };

	    /**
	     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
	     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
	     *  the required capacity will be used instead.
	     * @param {number} capacity Required capacity
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.ensureCapacity = function(capacity) {
	        var current = this.buffer.byteLength;
	        if (current < capacity)
	            return this.resize((current *= 2) > capacity ? current : capacity);
	        return this;
	    };

	    /**
	     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
	     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
	     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
	     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted. defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
	     */
	    ByteBufferPrototype.fill = function(value, begin, end) {
	        var relative = typeof begin === 'undefined';
	        if (relative) begin = this.offset;
	        if (typeof value === 'string' && value.length > 0)
	            value = value.charCodeAt(0);
	        if (typeof begin === 'undefined') begin = this.offset;
	        if (typeof end === 'undefined') end = this.limit;
	        if (!this.noAssert) {
	            if (typeof value !== 'number' || value % 1 !== 0)
	                throw TypeError("Illegal value: "+value+" (not an integer)");
	            value |= 0;
	            if (typeof begin !== 'number' || begin % 1 !== 0)
	                throw TypeError("Illegal begin: Not an integer");
	            begin >>>= 0;
	            if (typeof end !== 'number' || end % 1 !== 0)
	                throw TypeError("Illegal end: Not an integer");
	            end >>>= 0;
	            if (begin < 0 || begin > end || end > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
	        }
	        if (begin >= end)
	            return this; // Nothing to fill
	        while (begin < end) this.view.setUint8(begin++, value);
	        if (relative) this.offset = begin;
	        return this;
	    };

	    /**
	     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
	     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.flip = function() {
	        this.limit = this.offset;
	        this.offset = 0;
	        return this;
	    };
	    /**
	     * Marks an offset on this ByteBuffer to be used later.
	     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
	     * @returns {!ByteBuffer} this
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @see ByteBuffer#reset
	     * @expose
	     */
	    ByteBufferPrototype.mark = function(offset) {
	        offset = typeof offset === 'undefined' ? this.offset : offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        this.markedOffset = offset;
	        return this;
	    };
	    /**
	     * Sets the byte order.
	     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.order = function(littleEndian) {
	        if (!this.noAssert) {
	            if (typeof littleEndian !== 'boolean')
	                throw TypeError("Illegal littleEndian: Not a boolean");
	        }
	        this.littleEndian = !!littleEndian;
	        return this;
	    };

	    /**
	     * Switches (to) little endian byte order.
	     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.LE = function(littleEndian) {
	        this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;
	        return this;
	    };

	    /**
	     * Switches (to) big endian byte order.
	     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.BE = function(bigEndian) {
	        this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;
	        return this;
	    };
	    /**
	     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
	     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
	     *  will be resized and its contents moved accordingly.
	     * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
	     *  modified according to the performed read operation.
	     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
	     *  prepended if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
	     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
	     */
	    ByteBufferPrototype.prepend = function(source, encoding, offset) {
	        if (typeof encoding === 'number' || typeof encoding !== 'string') {
	            offset = encoding;
	            encoding = undefined;
	        }
	        var relative = typeof offset === 'undefined';
	        if (relative) offset = this.offset;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: "+offset+" (not an integer)");
	            offset >>>= 0;
	            if (offset < 0 || offset + 0 > this.buffer.byteLength)
	                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
	        }
	        if (!(source instanceof ByteBuffer))
	            source = ByteBuffer.wrap(source, encoding);
	        var len = source.limit - source.offset;
	        if (len <= 0) return this; // Nothing to prepend
	        var diff = len - offset;
	        if (diff > 0) { // Not enough space before offset, so resize + move
	            var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
	            var arrayView = new Uint8Array(buffer);
	            arrayView.set(new Uint8Array(this.buffer).subarray(offset, this.buffer.byteLength), len);
	            this.buffer = buffer;
	            this.view = new DataView(buffer);
	            this.offset += diff;
	            if (this.markedOffset >= 0) this.markedOffset += diff;
	            this.limit += diff;
	            offset += diff;
	        } else {
	            var arrayView = new Uint8Array(this.buffer);
	        }
	        arrayView.set(new Uint8Array(source.buffer).subarray(source.offset, source.limit), offset - len);

	        source.offset = source.limit;
	        if (relative)
	            this.offset -= len;
	        return this;
	    };

	    /**
	     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
	     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
	     *  will be resized and its contents moved accordingly.
	     * @param {!ByteBuffer} target Target ByteBuffer
	     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
	     *  prepended if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @see ByteBuffer#prepend
	     */
	    ByteBufferPrototype.prependTo = function(target, offset) {
	        target.prepend(this, offset);
	        return this;
	    };
	    /**
	     * Prints debug information about this ByteBuffer's contents.
	     * @param {function(string)=} out Output function to call, defaults to console.log
	     * @expose
	     */
	    ByteBufferPrototype.printDebug = function(out) {
	        if (typeof out !== 'function') out = console.log.bind(console);
	        out(
	            this.toString()+"\n"+
	            "-------------------------------------------------------------------\n"+
	            this.toDebug(/* columns */ true)
	        );
	    };

	    /**
	     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
	     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
	     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
	     * @expose
	     */
	    ByteBufferPrototype.remaining = function() {
	        return this.limit - this.offset;
	    };
	    /**
	     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
	     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
	     *  marked, sets `offset = 0`.
	     * @returns {!ByteBuffer} this
	     * @see ByteBuffer#mark
	     * @expose
	     */
	    ByteBufferPrototype.reset = function() {
	        if (this.markedOffset >= 0) {
	            this.offset = this.markedOffset;
	            this.markedOffset = -1;
	        } else {
	            this.offset = 0;
	        }
	        return this;
	    };
	    /**
	     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
	     *  large or larger.
	     * @param {number} capacity Capacity required
	     * @returns {!ByteBuffer} this
	     * @throws {TypeError} If `capacity` is not a number
	     * @throws {RangeError} If `capacity < 0`
	     * @expose
	     */
	    ByteBufferPrototype.resize = function(capacity) {
	        if (!this.noAssert) {
	            if (typeof capacity !== 'number' || capacity % 1 !== 0)
	                throw TypeError("Illegal capacity: "+capacity+" (not an integer)");
	            capacity |= 0;
	            if (capacity < 0)
	                throw RangeError("Illegal capacity: 0 <= "+capacity);
	        }
	        if (this.buffer.byteLength < capacity) {
	            var buffer = new ArrayBuffer(capacity);
	            new Uint8Array(buffer).set(new Uint8Array(this.buffer));
	            this.buffer = buffer;
	            this.view = new DataView(buffer);
	        }
	        return this;
	    };
	    /**
	     * Reverses this ByteBuffer's contents.
	     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.reverse = function(begin, end) {
	        if (typeof begin === 'undefined') begin = this.offset;
	        if (typeof end === 'undefined') end = this.limit;
	        if (!this.noAssert) {
	            if (typeof begin !== 'number' || begin % 1 !== 0)
	                throw TypeError("Illegal begin: Not an integer");
	            begin >>>= 0;
	            if (typeof end !== 'number' || end % 1 !== 0)
	                throw TypeError("Illegal end: Not an integer");
	            end >>>= 0;
	            if (begin < 0 || begin > end || end > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
	        }
	        if (begin === end)
	            return this; // Nothing to reverse
	        Array.prototype.reverse.call(new Uint8Array(this.buffer).subarray(begin, end));
	        this.view = new DataView(this.buffer); // FIXME: Why exactly is this necessary?
	        return this;
	    };
	    /**
	     * Skips the next `length` bytes. This will just advance
	     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */
	    ByteBufferPrototype.skip = function(length) {
	        if (!this.noAssert) {
	            if (typeof length !== 'number' || length % 1 !== 0)
	                throw TypeError("Illegal length: "+length+" (not an integer)");
	            length |= 0;
	        }
	        var offset = this.offset + length;
	        if (!this.noAssert) {
	            if (offset < 0 || offset > this.buffer.byteLength)
	                throw RangeError("Illegal length: 0 <= "+this.offset+" + "+length+" <= "+this.buffer.byteLength);
	        }
	        this.offset = offset;
	        return this;
	    };

	    /**
	     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
	     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
	     * @expose
	     */
	    ByteBufferPrototype.slice = function(begin, end) {
	        if (typeof begin === 'undefined') begin = this.offset;
	        if (typeof end === 'undefined') end = this.limit;
	        if (!this.noAssert) {
	            if (typeof begin !== 'number' || begin % 1 !== 0)
	                throw TypeError("Illegal begin: Not an integer");
	            begin >>>= 0;
	            if (typeof end !== 'number' || end % 1 !== 0)
	                throw TypeError("Illegal end: Not an integer");
	            end >>>= 0;
	            if (begin < 0 || begin > end || end > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
	        }
	        var bb = this.clone();
	        bb.offset = begin;
	        bb.limit = end;
	        return bb;
	    };
	    /**
	     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
	     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
	     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
	     *  possible. Defaults to `false`
	     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
	     * @expose
	     */
	    ByteBufferPrototype.toBuffer = function(forceCopy) {
	        var offset = this.offset,
	            limit = this.limit;
	        if (!this.noAssert) {
	            if (typeof offset !== 'number' || offset % 1 !== 0)
	                throw TypeError("Illegal offset: Not an integer");
	            offset >>>= 0;
	            if (typeof limit !== 'number' || limit % 1 !== 0)
	                throw TypeError("Illegal limit: Not an integer");
	            limit >>>= 0;
	            if (offset < 0 || offset > limit || limit > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+offset+" <= "+limit+" <= "+this.buffer.byteLength);
	        }
	        // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
	        // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:
	        if (!forceCopy && offset === 0 && limit === this.buffer.byteLength)
	            return this.buffer;
	        if (offset === limit)
	            return EMPTY_BUFFER;
	        var buffer = new ArrayBuffer(limit - offset);
	        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
	        return buffer;
	    };

	    /**
	     * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
	     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.
	     * @function
	     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
	     *  Defaults to `false`
	     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
	     * @expose
	     */
	    ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;

	    /**
	     * Converts the ByteBuffer's contents to a string.
	     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
	     *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
	     *  highlighted offsets.
	     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	     * @returns {string} String representation
	     * @throws {Error} If `encoding` is invalid
	     * @expose
	     */
	    ByteBufferPrototype.toString = function(encoding, begin, end) {
	        if (typeof encoding === 'undefined')
	            return "ByteBufferAB_DataView(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";
	        if (typeof encoding === 'number')
	            encoding = "utf8",
	            begin = encoding,
	            end = begin;
	        switch (encoding) {
	            case "utf8":
	                return this.toUTF8(begin, end);
	            case "base64":
	                return this.toBase64(begin, end);
	            case "hex":
	                return this.toHex(begin, end);
	            case "binary":
	                return this.toBinary(begin, end);
	            case "debug":
	                return this.toDebug();
	            case "columns":
	                return this.toColumns();
	            default:
	                throw Error("Unsupported encoding: "+encoding);
	        }
	    };

	    // lxiv-embeddable

	    /**
	     * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
	     * Released under the Apache License, Version 2.0
	     * see: https://github.com/dcodeIO/lxiv for details
	     */
	    var lxiv = function() {
	        "use strict";

	        /**
	         * lxiv namespace.
	         * @type {!Object.<string,*>}
	         * @exports lxiv
	         */
	        var lxiv = {};

	        /**
	         * Character codes for output.
	         * @type {!Array.<number>}
	         * @inner
	         */
	        var aout = [
	            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	            81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,
	            103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	            119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47
	        ];

	        /**
	         * Character codes for input.
	         * @type {!Array.<number>}
	         * @inner
	         */
	        var ain = [];
	        for (var i=0, k=aout.length; i<k; ++i)
	            ain[aout[i]] = i;

	        /**
	         * Encodes bytes to base64 char codes.
	         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
	         *  there are no more bytes left.
	         * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
	         *  code.
	         */
	        lxiv.encode = function(src, dst) {
	            var b, t;
	            while ((b = src()) !== null) {
	                dst(aout[(b>>2)&0x3f]);
	                t = (b&0x3)<<4;
	                if ((b = src()) !== null) {
	                    t |= (b>>4)&0xf;
	                    dst(aout[(t|((b>>4)&0xf))&0x3f]);
	                    t = (b&0xf)<<2;
	                    if ((b = src()) !== null)
	                        dst(aout[(t|((b>>6)&0x3))&0x3f]),
	                        dst(aout[b&0x3f]);
	                    else
	                        dst(aout[t&0x3f]),
	                        dst(61);
	                } else
	                    dst(aout[t&0x3f]),
	                    dst(61),
	                    dst(61);
	            }
	        };

	        /**
	         * Decodes base64 char codes to bytes.
	         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
	         *  `null` if there are no more characters left.
	         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
	         * @throws {Error} If a character code is invalid
	         */
	        lxiv.decode = function(src, dst) {
	            var c, t1, t2;
	            function fail(c) {
	                throw Error("Illegal character code: "+c);
	            }
	            while ((c = src()) !== null) {
	                t1 = ain[c];
	                if (typeof t1 === 'undefined') fail(c);
	                if ((c = src()) !== null) {
	                    t2 = ain[c];
	                    if (typeof t2 === 'undefined') fail(c);
	                    dst((t1<<2)>>>0|(t2&0x30)>>4);
	                    if ((c = src()) !== null) {
	                        t1 = ain[c];
	                        if (typeof t1 === 'undefined')
	                            if (c === 61) break; else fail(c);
	                        dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);
	                        if ((c = src()) !== null) {
	                            t2 = ain[c];
	                            if (typeof t2 === 'undefined')
	                                if (c === 61) break; else fail(c);
	                            dst(((t1&0x3)<<6)>>>0|t2);
	                        }
	                    }
	                }
	            }
	        };

	        /**
	         * Tests if a string is valid base64.
	         * @param {string} str String to test
	         * @returns {boolean} `true` if valid, otherwise `false`
	         */
	        lxiv.test = function(str) {
	            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
	        };

	        return lxiv;
	    }();

	    // encodings/base64

	    /**
	     * Encodes this ByteBuffer's contents to a base64 encoded string.
	     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
	     * @returns {string} Base64 encoded string
	     * @throws {RangeError} If `begin` or `end` is out of bounds
	     * @expose
	     */
	    ByteBufferPrototype.toBase64 = function(begin, end) {
	        if (typeof begin === 'undefined')
	            begin = this.offset;
	        if (typeof end === 'undefined')
	            end = this.limit;
	        begin = begin | 0; end = end | 0;
	        if (begin < 0 || end > this.capacity || begin > end)
	            throw RangeError("begin, end");
	        var sd; lxiv.encode(function() {
	            return begin < end ? this.view.getUint8(begin++) : null;
	        }.bind(this), sd = stringDestination());
	        return sd();
	    };

	    /**
	     * Decodes a base64 encoded string to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */
	    ByteBuffer.fromBase64 = function(str, littleEndian) {
	        if (typeof str !== 'string')
	            throw TypeError("str");
	        var bb = new ByteBuffer(str.length/4*3, littleEndian),
	            i = 0;
	        lxiv.decode(stringSource(str), function(b) {
	            bb.view.setUint8(i++, b);
	        });
	        bb.limit = i;
	        return bb;
	    };

	    /**
	     * Encodes a binary string to base64 like `window.btoa` does.
	     * @param {string} str Binary string
	     * @returns {string} Base64 encoded string
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
	     * @expose
	     */
	    ByteBuffer.btoa = function(str) {
	        return ByteBuffer.fromBinary(str).toBase64();
	    };

	    /**
	     * Decodes a base64 encoded string to binary like `window.atob` does.
	     * @param {string} b64 Base64 encoded string
	     * @returns {string} Binary string
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
	     * @expose
	     */
	    ByteBuffer.atob = function(b64) {
	        return ByteBuffer.fromBase64(b64).toBinary();
	    };

	    // encodings/binary

	    /**
	     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
	     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
	     * @returns {string} Binary encoded string
	     * @throws {RangeError} If `offset > limit`
	     * @expose
	     */
	    ByteBufferPrototype.toBinary = function(begin, end) {
	        if (typeof begin === 'undefined')
	            begin = this.offset;
	        if (typeof end === 'undefined')
	            end = this.limit;
	        begin |= 0; end |= 0;
	        if (begin < 0 || end > this.capacity() || begin > end)
	            throw RangeError("begin, end");
	        if (begin === end)
	            return "";
	        var chars = [],
	            parts = [];
	        while (begin < end) {
	            chars.push(this.view.getUint8(begin++));
	            if (chars.length >= 1024)
	                parts.push(String.fromCharCode.apply(String, chars)),
	                chars = [];
	        }
	        return parts.join('') + String.fromCharCode.apply(String, chars);
	    };

	    /**
	     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */
	    ByteBuffer.fromBinary = function(str, littleEndian) {
	        if (typeof str !== 'string')
	            throw TypeError("str");
	        var i = 0,
	            k = str.length,
	            charCode,
	            bb = new ByteBuffer(k, littleEndian);
	        while (i<k) {
	            charCode = str.charCodeAt(i);
	            if (charCode > 0xff)
	                throw RangeError("illegal char code: "+charCode);
	            bb.view.setUint8(i++, charCode);
	        }
	        bb.limit = k;
	        return bb;
	    };

	    // encodings/debug

	    /**
	     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
	     * * `<` : offset,
	     * * `'` : markedOffset,
	     * * `>` : limit,
	     * * `|` : offset and limit,
	     * * `[` : offset and markedOffset,
	     * * `]` : markedOffset and limit,
	     * * `!` : offset, markedOffset and limit
	     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
	     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
	     * @expose
	     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
	     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
	     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
	     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
	     */
	    ByteBufferPrototype.toDebug = function(columns) {
	        var i = -1,
	            k = this.buffer.byteLength,
	            b,
	            hex = "",
	            asc = "",
	            out = "";
	        while (i<k) {
	            if (i !== -1) {
	                b = this.view.getUint8(i);
	                if (b < 0x10) hex += "0"+b.toString(16).toUpperCase();
	                else hex += b.toString(16).toUpperCase();
	                if (columns)
	                    asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';
	            }
	            ++i;
	            if (columns) {
	                if (i > 0 && i % 16 === 0 && i !== k) {
	                    while (hex.length < 3*16+3) hex += " ";
	                    out += hex+asc+"\n";
	                    hex = asc = "";
	                }
	            }
	            if (i === this.offset && i === this.limit)
	                hex += i === this.markedOffset ? "!" : "|";
	            else if (i === this.offset)
	                hex += i === this.markedOffset ? "[" : "<";
	            else if (i === this.limit)
	                hex += i === this.markedOffset ? "]" : ">";
	            else
	                hex += i === this.markedOffset ? "'" : (columns || (i !== 0 && i !== k) ? " " : "");
	        }
	        if (columns && hex !== " ") {
	            while (hex.length < 3*16+3)
	                hex += " ";
	            out += hex + asc + "\n";
	        }
	        return columns ? out : hex;
	    };

	    /**
	     * Decodes a hex encoded string with marked offsets to a ByteBuffer.
	     * @param {string} str Debug string to decode (not be generated with `columns = true`)
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     * @see ByteBuffer#toDebug
	     */
	    ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
	        var k = str.length,
	            bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);
	        var i = 0, j = 0, ch, b,
	            rs = false, // Require symbol next
	            ho = false, hm = false, hl = false, // Already has offset (ho), markedOffset (hm), limit (hl)?
	            fail = false;
	        while (i<k) {
	            switch (ch = str.charAt(i++)) {
	                case '!':
	                    if (!noAssert) {
	                        if (ho || hm || hl) {
	                            fail = true;
	                            break;
	                        }
	                        ho = hm = hl = true;
	                    }
	                    bb.offset = bb.markedOffset = bb.limit = j;
	                    rs = false;
	                    break;
	                case '|':
	                    if (!noAssert) {
	                        if (ho || hl) {
	                            fail = true;
	                            break;
	                        }
	                        ho = hl = true;
	                    }
	                    bb.offset = bb.limit = j;
	                    rs = false;
	                    break;
	                case '[':
	                    if (!noAssert) {
	                        if (ho || hm) {
	                            fail = true;
	                            break;
	                        }
	                        ho = hm = true;
	                    }
	                    bb.offset = bb.markedOffset = j;
	                    rs = false;
	                    break;
	                case '<':
	                    if (!noAssert) {
	                        if (ho) {
	                            fail = true;
	                            break;
	                        }
	                        ho = true;
	                    }
	                    bb.offset = j;
	                    rs = false;
	                    break;
	                case ']':
	                    if (!noAssert) {
	                        if (hl || hm) {
	                            fail = true;
	                            break;
	                        }
	                        hl = hm = true;
	                    }
	                    bb.limit = bb.markedOffset = j;
	                    rs = false;
	                    break;
	                case '>':
	                    if (!noAssert) {
	                        if (hl) {
	                            fail = true;
	                            break;
	                        }
	                        hl = true;
	                    }
	                    bb.limit = j;
	                    rs = false;
	                    break;
	                case "'":
	                    if (!noAssert) {
	                        if (hm) {
	                            fail = true;
	                            break;
	                        }
	                        hm = true;
	                    }
	                    bb.markedOffset = j;
	                    rs = false;
	                    break;
	                case ' ':
	                    rs = false;
	                    break;
	                default:
	                    if (!noAssert) {
	                        if (rs) {
	                            fail = true;
	                            break;
	                        }
	                    }
	                    b = parseInt(ch+str.charAt(i++), 16);
	                    if (!noAssert) {
	                        if (isNaN(b) || b < 0 || b > 255)
	                            throw TypeError("Illegal str: Not a debug encoded string");
	                    }
	                    bb.view.setUint8(j++, b);
	                    rs = true;
	            }
	            if (fail)
	                throw TypeError("Illegal str: Invalid symbol at "+i);
	        }
	        if (!noAssert) {
	            if (!ho || !hl)
	                throw TypeError("Illegal str: Missing offset or limit");
	            if (j<bb.buffer.byteLength)
	                throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+j+" < "+k);
	        }
	        return bb;
	    };

	    // encodings/hex

	    /**
	     * Encodes this ByteBuffer's contents to a hex encoded string.
	     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
	     * @returns {string} Hex encoded string
	     * @expose
	     */
	    ByteBufferPrototype.toHex = function(begin, end) {
	        begin = typeof begin === 'undefined' ? this.offset : begin;
	        end = typeof end === 'undefined' ? this.limit : end;
	        if (!this.noAssert) {
	            if (typeof begin !== 'number' || begin % 1 !== 0)
	                throw TypeError("Illegal begin: Not an integer");
	            begin >>>= 0;
	            if (typeof end !== 'number' || end % 1 !== 0)
	                throw TypeError("Illegal end: Not an integer");
	            end >>>= 0;
	            if (begin < 0 || begin > end || end > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
	        }
	        var out = new Array(end - begin),
	            b;
	        while (begin < end) {
	            b = this.view.getUint8(begin++);
	            if (b < 0x10)
	                out.push("0", b.toString(16));
	            else out.push(b.toString(16));
	        }
	        return out.join('');
	    };

	    /**
	     * Decodes a hex encoded string to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */
	    ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
	        if (!noAssert) {
	            if (typeof str !== 'string')
	                throw TypeError("Illegal str: Not a string");
	            if (str.length % 2 !== 0)
	                throw TypeError("Illegal str: Length not a multiple of 2");
	        }
	        var k = str.length,
	            bb = new ByteBuffer((k / 2) | 0, littleEndian),
	            b;
	        for (var i=0, j=0; i<k; i+=2) {
	            b = parseInt(str.substring(i, i+2), 16);
	            if (!noAssert)
	                if (!isFinite(b) || b < 0 || b > 255)
	                    throw TypeError("Illegal str: Contains non-hex characters");
	            bb.view.setUint8(j++, b);
	        }
	        bb.limit = j;
	        return bb;
	    };

	    // utfx-embeddable

	    /**
	     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
	     * Released under the Apache License, Version 2.0
	     * see: https://github.com/dcodeIO/utfx for details
	     */
	    var utfx = function() {
	        "use strict";

	        /**
	         * utfx namespace.
	         * @inner
	         * @type {!Object.<string,*>}
	         */
	        var utfx = {};

	        /**
	         * Maximum valid code point.
	         * @type {number}
	         * @const
	         */
	        utfx.MAX_CODEPOINT = 0x10FFFF;

	        /**
	         * Encodes UTF8 code points to UTF8 bytes.
	         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	         *  respectively `null` if there are no more code points left or a single numeric code point.
	         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
	         */
	        utfx.encodeUTF8 = function(src, dst) {
	            var cp = null;
	            if (typeof src === 'number')
	                cp = src,
	                src = function() { return null; };
	            while (cp !== null || (cp = src()) !== null) {
	                if (cp < 0x80)
	                    dst(cp&0x7F);
	                else if (cp < 0x800)
	                    dst(((cp>>6)&0x1F)|0xC0),
	                    dst((cp&0x3F)|0x80);
	                else if (cp < 0x10000)
	                    dst(((cp>>12)&0x0F)|0xE0),
	                    dst(((cp>>6)&0x3F)|0x80),
	                    dst((cp&0x3F)|0x80);
	                else
	                    dst(((cp>>18)&0x07)|0xF0),
	                    dst(((cp>>12)&0x3F)|0x80),
	                    dst(((cp>>6)&0x3F)|0x80),
	                    dst((cp&0x3F)|0x80);
	                cp = null;
	            }
	        };

	        /**
	         * Decodes UTF8 bytes to UTF8 code points.
	         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	         *  are no more bytes left.
	         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
	         * @throws {RangeError} If a starting byte is invalid in UTF8
	         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
	         *  remaining bytes.
	         */
	        utfx.decodeUTF8 = function(src, dst) {
	            var a, b, c, d, fail = function(b) {
	                b = b.slice(0, b.indexOf(null));
	                var err = Error(b.toString());
	                err.name = "TruncatedError";
	                err['bytes'] = b;
	                throw err;
	            };
	            while ((a = src()) !== null) {
	                if ((a&0x80) === 0)
	                    dst(a);
	                else if ((a&0xE0) === 0xC0)
	                    ((b = src()) === null) && fail([a, b]),
	                    dst(((a&0x1F)<<6) | (b&0x3F));
	                else if ((a&0xF0) === 0xE0)
	                    ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),
	                    dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));
	                else if ((a&0xF8) === 0xF0)
	                    ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),
	                    dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));
	                else throw RangeError("Illegal starting byte: "+a);
	            }
	        };

	        /**
	         * Converts UTF16 characters to UTF8 code points.
	         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
	         *  `null` if there are no more characters left.
	         * @param {!function(number)} dst Code points destination as a function successively called with each converted code
	         *  point.
	         */
	        utfx.UTF16toUTF8 = function(src, dst) {
	            var c1, c2 = null;
	            while (true) {
	                if ((c1 = c2 !== null ? c2 : src()) === null)
	                    break;
	                if (c1 >= 0xD800 && c1 <= 0xDFFF) {
	                    if ((c2 = src()) !== null) {
	                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
	                            dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);
	                            c2 = null; continue;
	                        }
	                    }
	                }
	                dst(c1);
	            }
	            if (c2 !== null) dst(c2);
	        };

	        /**
	         * Converts UTF8 code points to UTF16 characters.
	         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	         *  respectively `null` if there are no more code points left or a single numeric code point.
	         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	         * @throws {RangeError} If a code point is out of range
	         */
	        utfx.UTF8toUTF16 = function(src, dst) {
	            var cp = null;
	            if (typeof src === 'number')
	                cp = src, src = function() { return null; };
	            while (cp !== null || (cp = src()) !== null) {
	                if (cp <= 0xFFFF)
	                    dst(cp);
	                else
	                    cp -= 0x10000,
	                    dst((cp>>10)+0xD800),
	                    dst((cp%0x400)+0xDC00);
	                cp = null;
	            }
	        };

	        /**
	         * Converts and encodes UTF16 characters to UTF8 bytes.
	         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
	         *  if there are no more characters left.
	         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
	         */
	        utfx.encodeUTF16toUTF8 = function(src, dst) {
	            utfx.UTF16toUTF8(src, function(cp) {
	                utfx.encodeUTF8(cp, dst);
	            });
	        };

	        /**
	         * Decodes and converts UTF8 bytes to UTF16 characters.
	         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	         *  are no more bytes left.
	         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	         * @throws {RangeError} If a starting byte is invalid in UTF8
	         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
	         */
	        utfx.decodeUTF8toUTF16 = function(src, dst) {
	            utfx.decodeUTF8(src, function(cp) {
	                utfx.UTF8toUTF16(cp, dst);
	            });
	        };

	        /**
	         * Calculates the byte length of an UTF8 code point.
	         * @param {number} cp UTF8 code point
	         * @returns {number} Byte length
	         */
	        utfx.calculateCodePoint = function(cp) {
	            return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
	        };

	        /**
	         * Calculates the number of UTF8 bytes required to store UTF8 code points.
	         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
	         *  `null` if there are no more code points left.
	         * @returns {number} The number of UTF8 bytes required
	         */
	        utfx.calculateUTF8 = function(src) {
	            var cp, l=0;
	            while ((cp = src()) !== null)
	                l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
	            return l;
	        };

	        /**
	         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
	         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
	         *  `null` if there are no more characters left.
	         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
	         */
	        utfx.calculateUTF16asUTF8 = function(src) {
	            var n=0, l=0;
	            utfx.UTF16toUTF8(src, function(cp) {
	                ++n; l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
	            });
	            return [n,l];
	        };

	        return utfx;
	    }();

	    // encodings/utf8

	    /**
	     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
	     *  string.
	     * @returns {string} Hex encoded string
	     * @throws {RangeError} If `offset > limit`
	     * @expose
	     */
	    ByteBufferPrototype.toUTF8 = function(begin, end) {
	        if (typeof begin === 'undefined') begin = this.offset;
	        if (typeof end === 'undefined') end = this.limit;
	        if (!this.noAssert) {
	            if (typeof begin !== 'number' || begin % 1 !== 0)
	                throw TypeError("Illegal begin: Not an integer");
	            begin >>>= 0;
	            if (typeof end !== 'number' || end % 1 !== 0)
	                throw TypeError("Illegal end: Not an integer");
	            end >>>= 0;
	            if (begin < 0 || begin > end || end > this.buffer.byteLength)
	                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
	        }
	        var sd; try {
	            utfx.decodeUTF8toUTF16(function() {
	                return begin < end ? this.view.getUint8(begin++) : null;
	            }.bind(this), sd = stringDestination());
	        } catch (e) {
	            if (begin !== end)
	                throw RangeError("Illegal range: Truncated data, "+begin+" != "+end);
	        }
	        return sd();
	    };

	    /**
	     * Decodes an UTF8 encoded string to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */
	    ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
	        if (!noAssert)
	            if (typeof str !== 'string')
	                throw TypeError("Illegal str: Not a string");
	        var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),
	            i = 0;
	        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
	            bb.view.setUint8(i++, b);
	        });
	        bb.limit = i;
	        return bb;
	    };

	    return ByteBuffer;
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)(module)))

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*
	 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
	 Copyright 2009 The Closure Library Authors. All Rights Reserved.

	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at

	 http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS-IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	 */

	/**
	 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
	 * Released under the Apache License, Version 2.0
	 * see: https://github.com/dcodeIO/long.js for details
	 */
	(function(global, factory) {

	    /* AMD */ if ("function" === 'function' && __webpack_require__(122)["amd"])
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    /* CommonJS */ else if ("function" === 'function' && typeof module === "object" && module && module["exports"])
	        module["exports"] = factory();
	    /* Global */ else
	        (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();

	})(this, function() {
	    "use strict";

	    /**
	     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
	     *  See the from* functions below for more convenient ways of constructing Longs.
	     * @exports Long
	     * @class A Long class for representing a 64 bit two's-complement integer value.
	     * @param {number} low The low (signed) 32 bits of the long
	     * @param {number} high The high (signed) 32 bits of the long
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @constructor
	     */
	    function Long(low, high, unsigned) {

	        /**
	         * The low 32 bits as a signed value.
	         * @type {number}
	         */
	        this.low = low | 0;

	        /**
	         * The high 32 bits as a signed value.
	         * @type {number}
	         */
	        this.high = high | 0;

	        /**
	         * Whether unsigned or not.
	         * @type {boolean}
	         */
	        this.unsigned = !!unsigned;
	    }

	    // The internal representation of a long is the two given signed, 32-bit values.
	    // We use 32-bit pieces because these are the size of integers on which
	    // Javascript performs bit-operations.  For operations like addition and
	    // multiplication, we split each number into 16 bit pieces, which can easily be
	    // multiplied within Javascript's floating-point representation without overflow
	    // or change in sign.
	    //
	    // In the algorithms below, we frequently reduce the negative case to the
	    // positive case by negating the input(s) and then post-processing the result.
	    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
	    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	    // a positive number, it overflows back into a negative).  Not handling this
	    // case would often result in infinite recursion.
	    //
	    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
	    // methods on which they depend.

	    /**
	     * An indicator used to reliably determine if an object is a Long or not.
	     * @type {boolean}
	     * @const
	     * @private
	     */
	    Long.prototype.__isLong__;

	    Object.defineProperty(Long.prototype, "__isLong__", {
	        value: true,
	        enumerable: false,
	        configurable: false
	    });

	    /**
	     * @function
	     * @param {*} obj Object
	     * @returns {boolean}
	     * @inner
	     */
	    function isLong(obj) {
	        return (obj && obj["__isLong__"]) === true;
	    }

	    /**
	     * Tests if the specified object is a Long.
	     * @function
	     * @param {*} obj Object
	     * @returns {boolean}
	     */
	    Long.isLong = isLong;

	    /**
	     * A cache of the Long representations of small integer values.
	     * @type {!Object}
	     * @inner
	     */
	    var INT_CACHE = {};

	    /**
	     * A cache of the Long representations of small unsigned integer values.
	     * @type {!Object}
	     * @inner
	     */
	    var UINT_CACHE = {};

	    /**
	     * @param {number} value
	     * @param {boolean=} unsigned
	     * @returns {!Long}
	     * @inner
	     */
	    function fromInt(value, unsigned) {
	        var obj, cachedObj, cache;
	        if (unsigned) {
	            value >>>= 0;
	            if (cache = (0 <= value && value < 256)) {
	                cachedObj = UINT_CACHE[value];
	                if (cachedObj)
	                    return cachedObj;
	            }
	            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
	            if (cache)
	                UINT_CACHE[value] = obj;
	            return obj;
	        } else {
	            value |= 0;
	            if (cache = (-128 <= value && value < 128)) {
	                cachedObj = INT_CACHE[value];
	                if (cachedObj)
	                    return cachedObj;
	            }
	            obj = fromBits(value, value < 0 ? -1 : 0, false);
	            if (cache)
	                INT_CACHE[value] = obj;
	            return obj;
	        }
	    }

	    /**
	     * Returns a Long representing the given 32 bit integer value.
	     * @function
	     * @param {number} value The 32 bit integer in question
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @returns {!Long} The corresponding Long value
	     */
	    Long.fromInt = fromInt;

	    /**
	     * @param {number} value
	     * @param {boolean=} unsigned
	     * @returns {!Long}
	     * @inner
	     */
	    function fromNumber(value, unsigned) {
	        if (isNaN(value) || !isFinite(value))
	            return unsigned ? UZERO : ZERO;
	        if (unsigned) {
	            if (value < 0)
	                return UZERO;
	            if (value >= TWO_PWR_64_DBL)
	                return MAX_UNSIGNED_VALUE;
	        } else {
	            if (value <= -TWO_PWR_63_DBL)
	                return MIN_VALUE;
	            if (value + 1 >= TWO_PWR_63_DBL)
	                return MAX_VALUE;
	        }
	        if (value < 0)
	            return fromNumber(-value, unsigned).neg();
	        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
	    }

	    /**
	     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	     * @function
	     * @param {number} value The number in question
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @returns {!Long} The corresponding Long value
	     */
	    Long.fromNumber = fromNumber;

	    /**
	     * @param {number} lowBits
	     * @param {number} highBits
	     * @param {boolean=} unsigned
	     * @returns {!Long}
	     * @inner
	     */
	    function fromBits(lowBits, highBits, unsigned) {
	        return new Long(lowBits, highBits, unsigned);
	    }

	    /**
	     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
	     *  assumed to use 32 bits.
	     * @function
	     * @param {number} lowBits The low 32 bits
	     * @param {number} highBits The high 32 bits
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @returns {!Long} The corresponding Long value
	     */
	    Long.fromBits = fromBits;

	    /**
	     * @function
	     * @param {number} base
	     * @param {number} exponent
	     * @returns {number}
	     * @inner
	     */
	    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

	    /**
	     * @param {string} str
	     * @param {(boolean|number)=} unsigned
	     * @param {number=} radix
	     * @returns {!Long}
	     * @inner
	     */
	    function fromString(str, unsigned, radix) {
	        if (str.length === 0)
	            throw Error('empty string');
	        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
	            return ZERO;
	        if (typeof unsigned === 'number') {
	            // For goog.math.long compatibility
	            radix = unsigned,
	            unsigned = false;
	        } else {
	            unsigned = !! unsigned;
	        }
	        radix = radix || 10;
	        if (radix < 2 || 36 < radix)
	            throw RangeError('radix');

	        var p;
	        if ((p = str.indexOf('-')) > 0)
	            throw Error('interior hyphen');
	        else if (p === 0) {
	            return fromString(str.substring(1), unsigned, radix).neg();
	        }

	        // Do several (8) digits each time through the loop, so as to
	        // minimize the calls to the very expensive emulated div.
	        var radixToPower = fromNumber(pow_dbl(radix, 8));

	        var result = ZERO;
	        for (var i = 0; i < str.length; i += 8) {
	            var size = Math.min(8, str.length - i),
	                value = parseInt(str.substring(i, i + size), radix);
	            if (size < 8) {
	                var power = fromNumber(pow_dbl(radix, size));
	                result = result.mul(power).add(fromNumber(value));
	            } else {
	                result = result.mul(radixToPower);
	                result = result.add(fromNumber(value));
	            }
	        }
	        result.unsigned = unsigned;
	        return result;
	    }

	    /**
	     * Returns a Long representation of the given string, written using the specified radix.
	     * @function
	     * @param {string} str The textual representation of the Long
	     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
	     * @returns {!Long} The corresponding Long value
	     */
	    Long.fromString = fromString;

	    /**
	     * @function
	     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
	     * @returns {!Long}
	     * @inner
	     */
	    function fromValue(val) {
	        if (val /* is compatible */ instanceof Long)
	            return val;
	        if (typeof val === 'number')
	            return fromNumber(val);
	        if (typeof val === 'string')
	            return fromString(val);
	        // Throws for non-objects, converts non-instanceof Long:
	        return fromBits(val.low, val.high, val.unsigned);
	    }

	    /**
	     * Converts the specified value to a Long.
	     * @function
	     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
	     * @returns {!Long}
	     */
	    Long.fromValue = fromValue;

	    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
	    // no runtime penalty for these.

	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var TWO_PWR_16_DBL = 1 << 16;

	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var TWO_PWR_24_DBL = 1 << 24;

	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

	    /**
	     * @type {number}
	     * @const
	     * @inner
	     */
	    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

	    /**
	     * @type {!Long}
	     * @const
	     * @inner
	     */
	    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var ZERO = fromInt(0);

	    /**
	     * Signed zero.
	     * @type {!Long}
	     */
	    Long.ZERO = ZERO;

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var UZERO = fromInt(0, true);

	    /**
	     * Unsigned zero.
	     * @type {!Long}
	     */
	    Long.UZERO = UZERO;

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var ONE = fromInt(1);

	    /**
	     * Signed one.
	     * @type {!Long}
	     */
	    Long.ONE = ONE;

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var UONE = fromInt(1, true);

	    /**
	     * Unsigned one.
	     * @type {!Long}
	     */
	    Long.UONE = UONE;

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var NEG_ONE = fromInt(-1);

	    /**
	     * Signed negative one.
	     * @type {!Long}
	     */
	    Long.NEG_ONE = NEG_ONE;

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

	    /**
	     * Maximum signed value.
	     * @type {!Long}
	     */
	    Long.MAX_VALUE = MAX_VALUE;

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

	    /**
	     * Maximum unsigned value.
	     * @type {!Long}
	     */
	    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

	    /**
	     * @type {!Long}
	     * @inner
	     */
	    var MIN_VALUE = fromBits(0, 0x80000000|0, false);

	    /**
	     * Minimum signed value.
	     * @type {!Long}
	     */
	    Long.MIN_VALUE = MIN_VALUE;

	    /**
	     * @alias Long.prototype
	     * @inner
	     */
	    var LongPrototype = Long.prototype;

	    /**
	     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
	     * @returns {number}
	     */
	    LongPrototype.toInt = function toInt() {
	        return this.unsigned ? this.low >>> 0 : this.low;
	    };

	    /**
	     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
	     * @returns {number}
	     */
	    LongPrototype.toNumber = function toNumber() {
	        if (this.unsigned)
	            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
	        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
	    };

	    /**
	     * Converts the Long to a string written in the specified radix.
	     * @param {number=} radix Radix (2-36), defaults to 10
	     * @returns {string}
	     * @override
	     * @throws {RangeError} If `radix` is out of range
	     */
	    LongPrototype.toString = function toString(radix) {
	        radix = radix || 10;
	        if (radix < 2 || 36 < radix)
	            throw RangeError('radix');
	        if (this.isZero())
	            return '0';
	        if (this.isNegative()) { // Unsigned Longs are never negative
	            if (this.eq(MIN_VALUE)) {
	                // We need to change the Long value before it can be negated, so we remove
	                // the bottom-most digit in this base and then recurse to do the rest.
	                var radixLong = fromNumber(radix),
	                    div = this.div(radixLong),
	                    rem1 = div.mul(radixLong).sub(this);
	                return div.toString(radix) + rem1.toInt().toString(radix);
	            } else
	                return '-' + this.neg().toString(radix);
	        }

	        // Do several (6) digits each time through the loop, so as to
	        // minimize the calls to the very expensive emulated div.
	        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
	            rem = this;
	        var result = '';
	        while (true) {
	            var remDiv = rem.div(radixToPower),
	                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
	                digits = intval.toString(radix);
	            rem = remDiv;
	            if (rem.isZero())
	                return digits + result;
	            else {
	                while (digits.length < 6)
	                    digits = '0' + digits;
	                result = '' + digits + result;
	            }
	        }
	    };

	    /**
	     * Gets the high 32 bits as a signed integer.
	     * @returns {number} Signed high bits
	     */
	    LongPrototype.getHighBits = function getHighBits() {
	        return this.high;
	    };

	    /**
	     * Gets the high 32 bits as an unsigned integer.
	     * @returns {number} Unsigned high bits
	     */
	    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
	        return this.high >>> 0;
	    };

	    /**
	     * Gets the low 32 bits as a signed integer.
	     * @returns {number} Signed low bits
	     */
	    LongPrototype.getLowBits = function getLowBits() {
	        return this.low;
	    };

	    /**
	     * Gets the low 32 bits as an unsigned integer.
	     * @returns {number} Unsigned low bits
	     */
	    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
	        return this.low >>> 0;
	    };

	    /**
	     * Gets the number of bits needed to represent the absolute value of this Long.
	     * @returns {number}
	     */
	    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
	        if (this.isNegative()) // Unsigned Longs are never negative
	            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
	        var val = this.high != 0 ? this.high : this.low;
	        for (var bit = 31; bit > 0; bit--)
	            if ((val & (1 << bit)) != 0)
	                break;
	        return this.high != 0 ? bit + 33 : bit + 1;
	    };

	    /**
	     * Tests if this Long's value equals zero.
	     * @returns {boolean}
	     */
	    LongPrototype.isZero = function isZero() {
	        return this.high === 0 && this.low === 0;
	    };

	    /**
	     * Tests if this Long's value is negative.
	     * @returns {boolean}
	     */
	    LongPrototype.isNegative = function isNegative() {
	        return !this.unsigned && this.high < 0;
	    };

	    /**
	     * Tests if this Long's value is positive.
	     * @returns {boolean}
	     */
	    LongPrototype.isPositive = function isPositive() {
	        return this.unsigned || this.high >= 0;
	    };

	    /**
	     * Tests if this Long's value is odd.
	     * @returns {boolean}
	     */
	    LongPrototype.isOdd = function isOdd() {
	        return (this.low & 1) === 1;
	    };

	    /**
	     * Tests if this Long's value is even.
	     * @returns {boolean}
	     */
	    LongPrototype.isEven = function isEven() {
	        return (this.low & 1) === 0;
	    };

	    /**
	     * Tests if this Long's value equals the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.equals = function equals(other) {
	        if (!isLong(other))
	            other = fromValue(other);
	        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
	            return false;
	        return this.high === other.high && this.low === other.low;
	    };

	    /**
	     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.eq = LongPrototype.equals;

	    /**
	     * Tests if this Long's value differs from the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.notEquals = function notEquals(other) {
	        return !this.eq(/* validates */ other);
	    };

	    /**
	     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.neq = LongPrototype.notEquals;

	    /**
	     * Tests if this Long's value is less than the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.lessThan = function lessThan(other) {
	        return this.comp(/* validates */ other) < 0;
	    };

	    /**
	     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.lt = LongPrototype.lessThan;

	    /**
	     * Tests if this Long's value is less than or equal the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
	        return this.comp(/* validates */ other) <= 0;
	    };

	    /**
	     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.lte = LongPrototype.lessThanOrEqual;

	    /**
	     * Tests if this Long's value is greater than the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.greaterThan = function greaterThan(other) {
	        return this.comp(/* validates */ other) > 0;
	    };

	    /**
	     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.gt = LongPrototype.greaterThan;

	    /**
	     * Tests if this Long's value is greater than or equal the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
	        return this.comp(/* validates */ other) >= 0;
	    };

	    /**
	     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */
	    LongPrototype.gte = LongPrototype.greaterThanOrEqual;

	    /**
	     * Compares this Long's value with the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	     *  if the given one is greater
	     */
	    LongPrototype.compare = function compare(other) {
	        if (!isLong(other))
	            other = fromValue(other);
	        if (this.eq(other))
	            return 0;
	        var thisNeg = this.isNegative(),
	            otherNeg = other.isNegative();
	        if (thisNeg && !otherNeg)
	            return -1;
	        if (!thisNeg && otherNeg)
	            return 1;
	        // At this point the sign bits are the same
	        if (!this.unsigned)
	            return this.sub(other).isNegative() ? -1 : 1;
	        // Both are positive if at least one is unsigned
	        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
	    };

	    /**
	     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	     *  if the given one is greater
	     */
	    LongPrototype.comp = LongPrototype.compare;

	    /**
	     * Negates this Long's value.
	     * @returns {!Long} Negated Long
	     */
	    LongPrototype.negate = function negate() {
	        if (!this.unsigned && this.eq(MIN_VALUE))
	            return MIN_VALUE;
	        return this.not().add(ONE);
	    };

	    /**
	     * Negates this Long's value. This is an alias of {@link Long#negate}.
	     * @function
	     * @returns {!Long} Negated Long
	     */
	    LongPrototype.neg = LongPrototype.negate;

	    /**
	     * Returns the sum of this and the specified Long.
	     * @param {!Long|number|string} addend Addend
	     * @returns {!Long} Sum
	     */
	    LongPrototype.add = function add(addend) {
	        if (!isLong(addend))
	            addend = fromValue(addend);

	        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	        var a48 = this.high >>> 16;
	        var a32 = this.high & 0xFFFF;
	        var a16 = this.low >>> 16;
	        var a00 = this.low & 0xFFFF;

	        var b48 = addend.high >>> 16;
	        var b32 = addend.high & 0xFFFF;
	        var b16 = addend.low >>> 16;
	        var b00 = addend.low & 0xFFFF;

	        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	        c00 += a00 + b00;
	        c16 += c00 >>> 16;
	        c00 &= 0xFFFF;
	        c16 += a16 + b16;
	        c32 += c16 >>> 16;
	        c16 &= 0xFFFF;
	        c32 += a32 + b32;
	        c48 += c32 >>> 16;
	        c32 &= 0xFFFF;
	        c48 += a48 + b48;
	        c48 &= 0xFFFF;
	        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
	    };

	    /**
	     * Returns the difference of this and the specified Long.
	     * @param {!Long|number|string} subtrahend Subtrahend
	     * @returns {!Long} Difference
	     */
	    LongPrototype.subtract = function subtract(subtrahend) {
	        if (!isLong(subtrahend))
	            subtrahend = fromValue(subtrahend);
	        return this.add(subtrahend.neg());
	    };

	    /**
	     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
	     * @function
	     * @param {!Long|number|string} subtrahend Subtrahend
	     * @returns {!Long} Difference
	     */
	    LongPrototype.sub = LongPrototype.subtract;

	    /**
	     * Returns the product of this and the specified Long.
	     * @param {!Long|number|string} multiplier Multiplier
	     * @returns {!Long} Product
	     */
	    LongPrototype.multiply = function multiply(multiplier) {
	        if (this.isZero())
	            return ZERO;
	        if (!isLong(multiplier))
	            multiplier = fromValue(multiplier);
	        if (multiplier.isZero())
	            return ZERO;
	        if (this.eq(MIN_VALUE))
	            return multiplier.isOdd() ? MIN_VALUE : ZERO;
	        if (multiplier.eq(MIN_VALUE))
	            return this.isOdd() ? MIN_VALUE : ZERO;

	        if (this.isNegative()) {
	            if (multiplier.isNegative())
	                return this.neg().mul(multiplier.neg());
	            else
	                return this.neg().mul(multiplier).neg();
	        } else if (multiplier.isNegative())
	            return this.mul(multiplier.neg()).neg();

	        // If both longs are small, use float multiplication
	        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
	            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

	        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	        // We can skip products that would overflow.

	        var a48 = this.high >>> 16;
	        var a32 = this.high & 0xFFFF;
	        var a16 = this.low >>> 16;
	        var a00 = this.low & 0xFFFF;

	        var b48 = multiplier.high >>> 16;
	        var b32 = multiplier.high & 0xFFFF;
	        var b16 = multiplier.low >>> 16;
	        var b00 = multiplier.low & 0xFFFF;

	        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	        c00 += a00 * b00;
	        c16 += c00 >>> 16;
	        c00 &= 0xFFFF;
	        c16 += a16 * b00;
	        c32 += c16 >>> 16;
	        c16 &= 0xFFFF;
	        c16 += a00 * b16;
	        c32 += c16 >>> 16;
	        c16 &= 0xFFFF;
	        c32 += a32 * b00;
	        c48 += c32 >>> 16;
	        c32 &= 0xFFFF;
	        c32 += a16 * b16;
	        c48 += c32 >>> 16;
	        c32 &= 0xFFFF;
	        c32 += a00 * b32;
	        c48 += c32 >>> 16;
	        c32 &= 0xFFFF;
	        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	        c48 &= 0xFFFF;
	        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
	    };

	    /**
	     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
	     * @function
	     * @param {!Long|number|string} multiplier Multiplier
	     * @returns {!Long} Product
	     */
	    LongPrototype.mul = LongPrototype.multiply;

	    /**
	     * Returns this Long divided by the specified. The result is signed if this Long is signed or
	     *  unsigned if this Long is unsigned.
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Quotient
	     */
	    LongPrototype.divide = function divide(divisor) {
	        if (!isLong(divisor))
	            divisor = fromValue(divisor);
	        if (divisor.isZero())
	            throw Error('division by zero');
	        if (this.isZero())
	            return this.unsigned ? UZERO : ZERO;
	        var approx, rem, res;
	        if (!this.unsigned) {
	            // This section is only relevant for signed longs and is derived from the
	            // closure library as a whole.
	            if (this.eq(MIN_VALUE)) {
	                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
	                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	                else if (divisor.eq(MIN_VALUE))
	                    return ONE;
	                else {
	                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	                    var halfThis = this.shr(1);
	                    approx = halfThis.div(divisor).shl(1);
	                    if (approx.eq(ZERO)) {
	                        return divisor.isNegative() ? ONE : NEG_ONE;
	                    } else {
	                        rem = this.sub(divisor.mul(approx));
	                        res = approx.add(rem.div(divisor));
	                        return res;
	                    }
	                }
	            } else if (divisor.eq(MIN_VALUE))
	                return this.unsigned ? UZERO : ZERO;
	            if (this.isNegative()) {
	                if (divisor.isNegative())
	                    return this.neg().div(divisor.neg());
	                return this.neg().div(divisor).neg();
	            } else if (divisor.isNegative())
	                return this.div(divisor.neg()).neg();
	            res = ZERO;
	        } else {
	            // The algorithm below has not been made for unsigned longs. It's therefore
	            // required to take special care of the MSB prior to running it.
	            if (!divisor.unsigned)
	                divisor = divisor.toUnsigned();
	            if (divisor.gt(this))
	                return UZERO;
	            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
	                return UONE;
	            res = UZERO;
	        }

	        // Repeat the following until the remainder is less than other:  find a
	        // floating-point that approximates remainder / other *from below*, add this
	        // into the result, and subtract it from the remainder.  It is critical that
	        // the approximate value is less than or equal to the real value so that the
	        // remainder never becomes negative.
	        rem = this;
	        while (rem.gte(divisor)) {
	            // Approximate the result of division. This may be a little greater or
	            // smaller than the actual value.
	            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

	            // We will tweak the approximate result by changing it in the 48-th digit or
	            // the smallest non-fractional digit, whichever is larger.
	            var log2 = Math.ceil(Math.log(approx) / Math.LN2),
	                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

	            // Decrease the approximation until it is smaller than the remainder.  Note
	            // that if it is too large, the product overflows and is negative.
	                approxRes = fromNumber(approx),
	                approxRem = approxRes.mul(divisor);
	            while (approxRem.isNegative() || approxRem.gt(rem)) {
	                approx -= delta;
	                approxRes = fromNumber(approx, this.unsigned);
	                approxRem = approxRes.mul(divisor);
	            }

	            // We know the answer can't be zero... and actually, zero would cause
	            // infinite recursion since we would make no progress.
	            if (approxRes.isZero())
	                approxRes = ONE;

	            res = res.add(approxRes);
	            rem = rem.sub(approxRem);
	        }
	        return res;
	    };

	    /**
	     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
	     * @function
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Quotient
	     */
	    LongPrototype.div = LongPrototype.divide;

	    /**
	     * Returns this Long modulo the specified.
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Remainder
	     */
	    LongPrototype.modulo = function modulo(divisor) {
	        if (!isLong(divisor))
	            divisor = fromValue(divisor);
	        return this.sub(this.div(divisor).mul(divisor));
	    };

	    /**
	     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
	     * @function
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Remainder
	     */
	    LongPrototype.mod = LongPrototype.modulo;

	    /**
	     * Returns the bitwise NOT of this Long.
	     * @returns {!Long}
	     */
	    LongPrototype.not = function not() {
	        return fromBits(~this.low, ~this.high, this.unsigned);
	    };

	    /**
	     * Returns the bitwise AND of this Long and the specified.
	     * @param {!Long|number|string} other Other Long
	     * @returns {!Long}
	     */
	    LongPrototype.and = function and(other) {
	        if (!isLong(other))
	            other = fromValue(other);
	        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
	    };

	    /**
	     * Returns the bitwise OR of this Long and the specified.
	     * @param {!Long|number|string} other Other Long
	     * @returns {!Long}
	     */
	    LongPrototype.or = function or(other) {
	        if (!isLong(other))
	            other = fromValue(other);
	        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
	    };

	    /**
	     * Returns the bitwise XOR of this Long and the given one.
	     * @param {!Long|number|string} other Other Long
	     * @returns {!Long}
	     */
	    LongPrototype.xor = function xor(other) {
	        if (!isLong(other))
	            other = fromValue(other);
	        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
	    };

	    /**
	     * Returns this Long with bits shifted to the left by the given amount.
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */
	    LongPrototype.shiftLeft = function shiftLeft(numBits) {
	        if (isLong(numBits))
	            numBits = numBits.toInt();
	        if ((numBits &= 63) === 0)
	            return this;
	        else if (numBits < 32)
	            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
	        else
	            return fromBits(0, this.low << (numBits - 32), this.unsigned);
	    };

	    /**
	     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
	     * @function
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */
	    LongPrototype.shl = LongPrototype.shiftLeft;

	    /**
	     * Returns this Long with bits arithmetically shifted to the right by the given amount.
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */
	    LongPrototype.shiftRight = function shiftRight(numBits) {
	        if (isLong(numBits))
	            numBits = numBits.toInt();
	        if ((numBits &= 63) === 0)
	            return this;
	        else if (numBits < 32)
	            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
	        else
	            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
	    };

	    /**
	     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
	     * @function
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */
	    LongPrototype.shr = LongPrototype.shiftRight;

	    /**
	     * Returns this Long with bits logically shifted to the right by the given amount.
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */
	    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
	        if (isLong(numBits))
	            numBits = numBits.toInt();
	        numBits &= 63;
	        if (numBits === 0)
	            return this;
	        else {
	            var high = this.high;
	            if (numBits < 32) {
	                var low = this.low;
	                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
	            } else if (numBits === 32)
	                return fromBits(high, 0, this.unsigned);
	            else
	                return fromBits(high >>> (numBits - 32), 0, this.unsigned);
	        }
	    };

	    /**
	     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
	     * @function
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */
	    LongPrototype.shru = LongPrototype.shiftRightUnsigned;

	    /**
	     * Converts this Long to signed.
	     * @returns {!Long} Signed long
	     */
	    LongPrototype.toSigned = function toSigned() {
	        if (!this.unsigned)
	            return this;
	        return fromBits(this.low, this.high, false);
	    };

	    /**
	     * Converts this Long to unsigned.
	     * @returns {!Long} Unsigned long
	     */
	    LongPrototype.toUnsigned = function toUnsigned() {
	        if (this.unsigned)
	            return this;
	        return fromBits(this.low, this.high, true);
	    };

	    /**
	     * Converts this Long to its byte representation.
	     * @param {boolean=} le Whether little or big endian, defaults to big endian
	     * @returns {!Array.<number>} Byte representation
	     */
	    LongPrototype.toBytes = function(le) {
	        return le ? this.toBytesLE() : this.toBytesBE();
	    }

	    /**
	     * Converts this Long to its little endian byte representation.
	     * @returns {!Array.<number>} Little endian byte representation
	     */
	    LongPrototype.toBytesLE = function() {
	        var hi = this.high,
	            lo = this.low;
	        return [
	             lo         & 0xff,
	            (lo >>>  8) & 0xff,
	            (lo >>> 16) & 0xff,
	            (lo >>> 24) & 0xff,
	             hi         & 0xff,
	            (hi >>>  8) & 0xff,
	            (hi >>> 16) & 0xff,
	            (hi >>> 24) & 0xff
	        ];
	    }

	    /**
	     * Converts this Long to its big endian byte representation.
	     * @returns {!Array.<number>} Big endian byte representation
	     */
	    LongPrototype.toBytesBE = function() {
	        var hi = this.high,
	            lo = this.low;
	        return [
	            (hi >>> 24) & 0xff,
	            (hi >>> 16) & 0xff,
	            (hi >>>  8) & 0xff,
	             hi         & 0xff,
	            (lo >>> 24) & 0xff,
	            (lo >>> 16) & 0xff,
	            (lo >>>  8) & 0xff,
	             lo         & 0xff
	        ];
	    }

	    return Long;
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)(module)))

/***/ })
/******/ ]);